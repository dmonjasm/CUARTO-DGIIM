
ijk:     formato del fichero elf64-x86-64


Desensamblado de la secci贸n .init:

0000000000002000 <_init>:
    2000:	f3 0f 1e fa          	endbr64 
    2004:	48 83 ec 08          	sub    $0x8,%rsp
    2008:	48 8b 05 d9 8f 00 00 	mov    0x8fd9(%rip),%rax        # afe8 <__gmon_start__>
    200f:	48 85 c0             	test   %rax,%rax
    2012:	74 02                	je     2016 <_init+0x16>
    2014:	ff d0                	callq  *%rax
    2016:	48 83 c4 08          	add    $0x8,%rsp
    201a:	c3                   	retq   

Desensamblado de la secci贸n .plt:

0000000000002020 <.plt>:
    2020:	ff 35 aa 8e 00 00    	pushq  0x8eaa(%rip)        # aed0 <_GLOBAL_OFFSET_TABLE_+0x8>
    2026:	f2 ff 25 ab 8e 00 00 	bnd jmpq *0x8eab(%rip)        # aed8 <_GLOBAL_OFFSET_TABLE_+0x10>
    202d:	0f 1f 00             	nopl   (%rax)
    2030:	f3 0f 1e fa          	endbr64 
    2034:	68 00 00 00 00       	pushq  $0x0
    2039:	f2 e9 e1 ff ff ff    	bnd jmpq 2020 <.plt>
    203f:	90                   	nop
    2040:	f3 0f 1e fa          	endbr64 
    2044:	68 01 00 00 00       	pushq  $0x1
    2049:	f2 e9 d1 ff ff ff    	bnd jmpq 2020 <.plt>
    204f:	90                   	nop
    2050:	f3 0f 1e fa          	endbr64 
    2054:	68 02 00 00 00       	pushq  $0x2
    2059:	f2 e9 c1 ff ff ff    	bnd jmpq 2020 <.plt>
    205f:	90                   	nop
    2060:	f3 0f 1e fa          	endbr64 
    2064:	68 03 00 00 00       	pushq  $0x3
    2069:	f2 e9 b1 ff ff ff    	bnd jmpq 2020 <.plt>
    206f:	90                   	nop
    2070:	f3 0f 1e fa          	endbr64 
    2074:	68 04 00 00 00       	pushq  $0x4
    2079:	f2 e9 a1 ff ff ff    	bnd jmpq 2020 <.plt>
    207f:	90                   	nop
    2080:	f3 0f 1e fa          	endbr64 
    2084:	68 05 00 00 00       	pushq  $0x5
    2089:	f2 e9 91 ff ff ff    	bnd jmpq 2020 <.plt>
    208f:	90                   	nop
    2090:	f3 0f 1e fa          	endbr64 
    2094:	68 06 00 00 00       	pushq  $0x6
    2099:	f2 e9 81 ff ff ff    	bnd jmpq 2020 <.plt>
    209f:	90                   	nop
    20a0:	f3 0f 1e fa          	endbr64 
    20a4:	68 07 00 00 00       	pushq  $0x7
    20a9:	f2 e9 71 ff ff ff    	bnd jmpq 2020 <.plt>
    20af:	90                   	nop
    20b0:	f3 0f 1e fa          	endbr64 
    20b4:	68 08 00 00 00       	pushq  $0x8
    20b9:	f2 e9 61 ff ff ff    	bnd jmpq 2020 <.plt>
    20bf:	90                   	nop
    20c0:	f3 0f 1e fa          	endbr64 
    20c4:	68 09 00 00 00       	pushq  $0x9
    20c9:	f2 e9 51 ff ff ff    	bnd jmpq 2020 <.plt>
    20cf:	90                   	nop
    20d0:	f3 0f 1e fa          	endbr64 
    20d4:	68 0a 00 00 00       	pushq  $0xa
    20d9:	f2 e9 41 ff ff ff    	bnd jmpq 2020 <.plt>
    20df:	90                   	nop
    20e0:	f3 0f 1e fa          	endbr64 
    20e4:	68 0b 00 00 00       	pushq  $0xb
    20e9:	f2 e9 31 ff ff ff    	bnd jmpq 2020 <.plt>
    20ef:	90                   	nop
    20f0:	f3 0f 1e fa          	endbr64 
    20f4:	68 0c 00 00 00       	pushq  $0xc
    20f9:	f2 e9 21 ff ff ff    	bnd jmpq 2020 <.plt>
    20ff:	90                   	nop
    2100:	f3 0f 1e fa          	endbr64 
    2104:	68 0d 00 00 00       	pushq  $0xd
    2109:	f2 e9 11 ff ff ff    	bnd jmpq 2020 <.plt>
    210f:	90                   	nop
    2110:	f3 0f 1e fa          	endbr64 
    2114:	68 0e 00 00 00       	pushq  $0xe
    2119:	f2 e9 01 ff ff ff    	bnd jmpq 2020 <.plt>
    211f:	90                   	nop
    2120:	f3 0f 1e fa          	endbr64 
    2124:	68 0f 00 00 00       	pushq  $0xf
    2129:	f2 e9 f1 fe ff ff    	bnd jmpq 2020 <.plt>
    212f:	90                   	nop
    2130:	f3 0f 1e fa          	endbr64 
    2134:	68 10 00 00 00       	pushq  $0x10
    2139:	f2 e9 e1 fe ff ff    	bnd jmpq 2020 <.plt>
    213f:	90                   	nop
    2140:	f3 0f 1e fa          	endbr64 
    2144:	68 11 00 00 00       	pushq  $0x11
    2149:	f2 e9 d1 fe ff ff    	bnd jmpq 2020 <.plt>
    214f:	90                   	nop
    2150:	f3 0f 1e fa          	endbr64 
    2154:	68 12 00 00 00       	pushq  $0x12
    2159:	f2 e9 c1 fe ff ff    	bnd jmpq 2020 <.plt>
    215f:	90                   	nop
    2160:	f3 0f 1e fa          	endbr64 
    2164:	68 13 00 00 00       	pushq  $0x13
    2169:	f2 e9 b1 fe ff ff    	bnd jmpq 2020 <.plt>
    216f:	90                   	nop
    2170:	f3 0f 1e fa          	endbr64 
    2174:	68 14 00 00 00       	pushq  $0x14
    2179:	f2 e9 a1 fe ff ff    	bnd jmpq 2020 <.plt>
    217f:	90                   	nop
    2180:	f3 0f 1e fa          	endbr64 
    2184:	68 15 00 00 00       	pushq  $0x15
    2189:	f2 e9 91 fe ff ff    	bnd jmpq 2020 <.plt>
    218f:	90                   	nop
    2190:	f3 0f 1e fa          	endbr64 
    2194:	68 16 00 00 00       	pushq  $0x16
    2199:	f2 e9 81 fe ff ff    	bnd jmpq 2020 <.plt>
    219f:	90                   	nop
    21a0:	f3 0f 1e fa          	endbr64 
    21a4:	68 17 00 00 00       	pushq  $0x17
    21a9:	f2 e9 71 fe ff ff    	bnd jmpq 2020 <.plt>
    21af:	90                   	nop
    21b0:	f3 0f 1e fa          	endbr64 
    21b4:	68 18 00 00 00       	pushq  $0x18
    21b9:	f2 e9 61 fe ff ff    	bnd jmpq 2020 <.plt>
    21bf:	90                   	nop
    21c0:	f3 0f 1e fa          	endbr64 
    21c4:	68 19 00 00 00       	pushq  $0x19
    21c9:	f2 e9 51 fe ff ff    	bnd jmpq 2020 <.plt>
    21cf:	90                   	nop
    21d0:	f3 0f 1e fa          	endbr64 
    21d4:	68 1a 00 00 00       	pushq  $0x1a
    21d9:	f2 e9 41 fe ff ff    	bnd jmpq 2020 <.plt>
    21df:	90                   	nop
    21e0:	f3 0f 1e fa          	endbr64 
    21e4:	68 1b 00 00 00       	pushq  $0x1b
    21e9:	f2 e9 31 fe ff ff    	bnd jmpq 2020 <.plt>
    21ef:	90                   	nop
    21f0:	f3 0f 1e fa          	endbr64 
    21f4:	68 1c 00 00 00       	pushq  $0x1c
    21f9:	f2 e9 21 fe ff ff    	bnd jmpq 2020 <.plt>
    21ff:	90                   	nop

Desensamblado de la secci贸n .plt.got:

0000000000002200 <__cxa_finalize@plt>:
    2200:	f3 0f 1e fa          	endbr64 
    2204:	f2 ff 25 bd 8d 00 00 	bnd jmpq *0x8dbd(%rip)        # afc8 <__cxa_finalize@GLIBC_2.2.5>
    220b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la secci贸n .plt.sec:

0000000000002210 <std::ostream::put(char)@plt>:
    2210:	f3 0f 1e fa          	endbr64 
    2214:	f2 ff 25 c5 8c 00 00 	bnd jmpq *0x8cc5(%rip)        # aee0 <std::ostream::put(char)@GLIBCXX_3.4>
    221b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002220 <std::chrono::_V2::system_clock::now()@plt>:
    2220:	f3 0f 1e fa          	endbr64 
    2224:	f2 ff 25 bd 8c 00 00 	bnd jmpq *0x8cbd(%rip)        # aee8 <std::chrono::_V2::system_clock::now()@GLIBCXX_3.4.19>
    222b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002230 <std::runtime_error::runtime_error(char const*)@plt>:
    2230:	f3 0f 1e fa          	endbr64 
    2234:	f2 ff 25 b5 8c 00 00 	bnd jmpq *0x8cb5(%rip)        # aef0 <std::runtime_error::runtime_error(char const*)@GLIBCXX_3.4.21>
    223b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002240 <strlen@plt>:
    2240:	f3 0f 1e fa          	endbr64 
    2244:	f2 ff 25 ad 8c 00 00 	bnd jmpq *0x8cad(%rip)        # aef8 <strlen@GLIBC_2.2.5>
    224b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002250 <__cxa_allocate_exception@plt>:
    2250:	f3 0f 1e fa          	endbr64 
    2254:	f2 ff 25 a5 8c 00 00 	bnd jmpq *0x8ca5(%rip)        # af00 <__cxa_allocate_exception@CXXABI_1.3>
    225b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002260 <memset@plt>:
    2260:	f3 0f 1e fa          	endbr64 
    2264:	f2 ff 25 9d 8c 00 00 	bnd jmpq *0x8c9d(%rip)        # af08 <memset@GLIBC_2.2.5>
    226b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002270 <__assert_fail@plt>:
    2270:	f3 0f 1e fa          	endbr64 
    2274:	f2 ff 25 95 8c 00 00 	bnd jmpq *0x8c95(%rip)        # af10 <__assert_fail@GLIBC_2.2.5>
    227b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002280 <__multf3@plt>:
    2280:	f3 0f 1e fa          	endbr64 
    2284:	f2 ff 25 8d 8c 00 00 	bnd jmpq *0x8c8d(%rip)        # af18 <__multf3@GCC_4.3.0>
    228b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002290 <std::ostream::flush()@plt>:
    2290:	f3 0f 1e fa          	endbr64 
    2294:	f2 ff 25 85 8c 00 00 	bnd jmpq *0x8c85(%rip)        # af20 <std::ostream::flush()@GLIBCXX_3.4>
    229b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022a0 <std::__throw_logic_error(char const*)@plt>:
    22a0:	f3 0f 1e fa          	endbr64 
    22a4:	f2 ff 25 7d 8c 00 00 	bnd jmpq *0x8c7d(%rip)        # af28 <std::__throw_logic_error(char const*)@GLIBCXX_3.4>
    22ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022b0 <__cxa_free_exception@plt>:
    22b0:	f3 0f 1e fa          	endbr64 
    22b4:	f2 ff 25 75 8c 00 00 	bnd jmpq *0x8c75(%rip)        # af30 <__cxa_free_exception@CXXABI_1.3>
    22bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022c0 <memcpy@plt>:
    22c0:	f3 0f 1e fa          	endbr64 
    22c4:	f2 ff 25 6d 8c 00 00 	bnd jmpq *0x8c6d(%rip)        # af38 <memcpy@GLIBC_2.14>
    22cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022d0 <__cxa_demangle@plt>:
    22d0:	f3 0f 1e fa          	endbr64 
    22d4:	f2 ff 25 65 8c 00 00 	bnd jmpq *0x8c65(%rip)        # af40 <__cxa_demangle@CXXABI_1.3>
    22db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022e0 <__cxa_atexit@plt>:
    22e0:	f3 0f 1e fa          	endbr64 
    22e4:	f2 ff 25 5d 8c 00 00 	bnd jmpq *0x8c5d(%rip)        # af48 <__cxa_atexit@GLIBC_2.2.5>
    22eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022f0 <operator delete(void*)@plt>:
    22f0:	f3 0f 1e fa          	endbr64 
    22f4:	f2 ff 25 55 8c 00 00 	bnd jmpq *0x8c55(%rip)        # af50 <operator delete(void*)@GLIBCXX_3.4>
    22fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002300 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>:
    2300:	f3 0f 1e fa          	endbr64 
    2304:	f2 ff 25 4d 8c 00 00 	bnd jmpq *0x8c4d(%rip)        # af58 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@GLIBCXX_3.4>
    230b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002310 <__stack_chk_fail@plt>:
    2310:	f3 0f 1e fa          	endbr64 
    2314:	f2 ff 25 45 8c 00 00 	bnd jmpq *0x8c45(%rip)        # af60 <__stack_chk_fail@GLIBC_2.4>
    231b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>:
    2320:	f3 0f 1e fa          	endbr64 
    2324:	f2 ff 25 3d 8c 00 00 	bnd jmpq *0x8c3d(%rip)        # af68 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@GLIBCXX_3.4.9>
    232b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002330 <std::ctype<char>::_M_widen_init() const@plt>:
    2330:	f3 0f 1e fa          	endbr64 
    2334:	f2 ff 25 35 8c 00 00 	bnd jmpq *0x8c35(%rip)        # af70 <std::ctype<char>::_M_widen_init() const@GLIBCXX_3.4.11>
    233b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002340 <free@plt>:
    2340:	f3 0f 1e fa          	endbr64 
    2344:	f2 ff 25 2d 8c 00 00 	bnd jmpq *0x8c2d(%rip)        # af78 <free@GLIBC_2.2.5>
    234b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002350 <std::__throw_bad_cast()@plt>:
    2350:	f3 0f 1e fa          	endbr64 
    2354:	f2 ff 25 25 8c 00 00 	bnd jmpq *0x8c25(%rip)        # af80 <std::__throw_bad_cast()@GLIBCXX_3.4>
    235b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002360 <__addtf3@plt>:
    2360:	f3 0f 1e fa          	endbr64 
    2364:	f2 ff 25 1d 8c 00 00 	bnd jmpq *0x8c1d(%rip)        # af88 <__addtf3@GCC_4.3.0>
    236b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002370 <std::ios_base::Init::Init()@plt>:
    2370:	f3 0f 1e fa          	endbr64 
    2374:	f2 ff 25 15 8c 00 00 	bnd jmpq *0x8c15(%rip)        # af90 <std::ios_base::Init::Init()@GLIBCXX_3.4>
    237b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002380 <std::ostream& std::ostream::_M_insert<double>(double)@plt>:
    2380:	f3 0f 1e fa          	endbr64 
    2384:	f2 ff 25 0d 8c 00 00 	bnd jmpq *0x8c0d(%rip)        # af98 <std::ostream& std::ostream::_M_insert<double>(double)@GLIBCXX_3.4.9>
    238b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002390 <memmove@plt>:
    2390:	f3 0f 1e fa          	endbr64 
    2394:	f2 ff 25 05 8c 00 00 	bnd jmpq *0x8c05(%rip)        # afa0 <memmove@GLIBC_2.2.5>
    239b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023a0 <__eqtf2@plt>:
    23a0:	f3 0f 1e fa          	endbr64 
    23a4:	f2 ff 25 fd 8b 00 00 	bnd jmpq *0x8bfd(%rip)        # afa8 <__eqtf2@GCC_4.3.0>
    23ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023b0 <__cxa_throw@plt>:
    23b0:	f3 0f 1e fa          	endbr64 
    23b4:	f2 ff 25 f5 8b 00 00 	bnd jmpq *0x8bf5(%rip)        # afb0 <__cxa_throw@CXXABI_1.3>
    23bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023c0 <_Unwind_Resume@plt>:
    23c0:	f3 0f 1e fa          	endbr64 
    23c4:	f2 ff 25 ed 8b 00 00 	bnd jmpq *0x8bed(%rip)        # afb8 <_Unwind_Resume@GCC_3.0>
    23cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>:
    23d0:	f3 0f 1e fa          	endbr64 
    23d4:	f2 ff 25 e5 8b 00 00 	bnd jmpq *0x8be5(%rip)        # afc0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@GLIBCXX_3.4.21>
    23db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la secci贸n .text:

00000000000023e0 <ec::demangle[abi:cxx11](char const*) [clone .cold]>:
    23e0:	bf 10 00 00 00       	mov    $0x10,%edi
    23e5:	e8 66 fe ff ff       	callq  2250 <__cxa_allocate_exception@plt>
    23ea:	48 89 c7             	mov    %rax,%rdi
    23ed:	48 8d 35 44 5c 00 00 	lea    0x5c44(%rip),%rsi        # 8038 <_IO_stdin_used+0x38>
    23f4:	49 89 c5             	mov    %rax,%r13
    23f7:	e8 34 fe ff ff       	callq  2230 <std::runtime_error::runtime_error(char const*)@plt>
    23fc:	48 8b 15 cd 8b 00 00 	mov    0x8bcd(%rip),%rdx        # afd0 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
    2403:	48 8d 35 96 88 00 00 	lea    0x8896(%rip),%rsi        # aca0 <typeinfo for std::runtime_error@@GLIBCXX_3.4>
    240a:	4c 89 ef             	mov    %r13,%rdi
    240d:	e8 9e ff ff ff       	callq  23b0 <__cxa_throw@plt>
    2412:	f3 0f 1e fa          	endbr64 
    2416:	49 89 c4             	mov    %rax,%r12
    2419:	c5 f8 77             	vzeroupper 
    241c:	eb 12                	jmp    2430 <ec::demangle[abi:cxx11](char const*) [clone .cold]+0x50>
    241e:	f3 0f 1e fa          	endbr64 
    2422:	49 89 c4             	mov    %rax,%r12
    2425:	4c 89 ef             	mov    %r13,%rdi
    2428:	c5 f8 77             	vzeroupper 
    242b:	e8 80 fe ff ff       	callq  22b0 <__cxa_free_exception@plt>
    2430:	48 85 ed             	test   %rbp,%rbp
    2433:	74 08                	je     243d <ec::demangle[abi:cxx11](char const*) [clone .cold]+0x5d>
    2435:	48 89 ef             	mov    %rbp,%rdi
    2438:	e8 03 ff ff ff       	callq  2340 <free@plt>
    243d:	4c 89 e7             	mov    %r12,%rdi
    2440:	e8 7b ff ff ff       	callq  23c0 <_Unwind_Resume@plt>
    2445:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    244c:	00 00 00 
    244f:	90                   	nop

0000000000002450 <main>:
    2450:	f3 0f 1e fa          	endbr64 
    2454:	48 83 ec 08          	sub    $0x8,%rsp
    2458:	ba 41 00 00 00       	mov    $0x41,%edx
    245d:	48 8d 35 fc 5b 00 00 	lea    0x5bfc(%rip),%rsi        # 8060 <_IO_stdin_used+0x60>
    2464:	48 8d 3d d5 8b 00 00 	lea    0x8bd5(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    246b:	e8 b0 fe ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    2470:	48 8d 35 31 5c 00 00 	lea    0x5c31(%rip),%rsi        # 80a8 <_IO_stdin_used+0xa8>
    2477:	48 8d 3d c2 8b 00 00 	lea    0x8bc2(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    247e:	e8 7d fe ff ff       	callq  2300 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    2483:	e8 48 3e 00 00       	callq  62d0 <void test_type<short>()>
    2488:	e8 93 42 00 00       	callq  6720 <void test_type<int>()>
    248d:	e8 0e 46 00 00       	callq  6aa0 <void test_type<long>()>
    2492:	e8 29 33 00 00       	callq  57c0 <void test_type<__int128>()>
    2497:	e8 64 4a 00 00       	callq  6f00 <void test_type<float>()>
    249c:	e8 cf 36 00 00       	callq  5b70 <void test_type<double>()>
    24a1:	e8 5a 3a 00 00       	callq  5f00 <void test_type<long double>()>
    24a6:	e8 85 2f 00 00       	callq  5430 <void test_type<__float128>()>
    24ab:	31 c0                	xor    %eax,%eax
    24ad:	48 83 c4 08          	add    $0x8,%rsp
    24b1:	c3                   	retq   
    24b2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    24b9:	00 00 00 00 
    24bd:	0f 1f 00             	nopl   (%rax)

00000000000024c0 <_GLOBAL__sub_I__ZN2ec8demangleB5cxx11EPKc>:
    24c0:	f3 0f 1e fa          	endbr64 
    24c4:	48 83 ec 08          	sub    $0x8,%rsp
    24c8:	48 8d 3d 82 8c 00 00 	lea    0x8c82(%rip),%rdi        # b151 <std::__ioinit>
    24cf:	e8 9c fe ff ff       	callq  2370 <std::ios_base::Init::Init()@plt>
    24d4:	48 8b 3d 1d 8b 00 00 	mov    0x8b1d(%rip),%rdi        # aff8 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
    24db:	48 8d 15 26 8b 00 00 	lea    0x8b26(%rip),%rdx        # b008 <__dso_handle>
    24e2:	48 8d 35 68 8c 00 00 	lea    0x8c68(%rip),%rsi        # b151 <std::__ioinit>
    24e9:	48 83 c4 08          	add    $0x8,%rsp
    24ed:	e9 ee fd ff ff       	jmpq   22e0 <__cxa_atexit@plt>
    24f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    24f9:	00 00 00 
    24fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000002500 <_start>:
    2500:	f3 0f 1e fa          	endbr64 
    2504:	31 ed                	xor    %ebp,%ebp
    2506:	49 89 d1             	mov    %rdx,%r9
    2509:	5e                   	pop    %rsi
    250a:	48 89 e2             	mov    %rsp,%rdx
    250d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    2511:	50                   	push   %rax
    2512:	54                   	push   %rsp
    2513:	4c 8d 05 c6 4b 00 00 	lea    0x4bc6(%rip),%r8        # 70e0 <__libc_csu_fini>
    251a:	48 8d 0d 4f 4b 00 00 	lea    0x4b4f(%rip),%rcx        # 7070 <__libc_csu_init>
    2521:	48 8d 3d 28 ff ff ff 	lea    -0xd8(%rip),%rdi        # 2450 <main>
    2528:	ff 15 b2 8a 00 00    	callq  *0x8ab2(%rip)        # afe0 <__libc_start_main@GLIBC_2.2.5>
    252e:	f4                   	hlt    
    252f:	90                   	nop

0000000000002530 <deregister_tm_clones>:
    2530:	48 8d 3d e1 8a 00 00 	lea    0x8ae1(%rip),%rdi        # b018 <__TMC_END__>
    2537:	48 8d 05 da 8a 00 00 	lea    0x8ada(%rip),%rax        # b018 <__TMC_END__>
    253e:	48 39 f8             	cmp    %rdi,%rax
    2541:	74 15                	je     2558 <deregister_tm_clones+0x28>
    2543:	48 8b 05 8e 8a 00 00 	mov    0x8a8e(%rip),%rax        # afd8 <_ITM_deregisterTMCloneTable>
    254a:	48 85 c0             	test   %rax,%rax
    254d:	74 09                	je     2558 <deregister_tm_clones+0x28>
    254f:	ff e0                	jmpq   *%rax
    2551:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2558:	c3                   	retq   
    2559:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002560 <register_tm_clones>:
    2560:	48 8d 3d b1 8a 00 00 	lea    0x8ab1(%rip),%rdi        # b018 <__TMC_END__>
    2567:	48 8d 35 aa 8a 00 00 	lea    0x8aaa(%rip),%rsi        # b018 <__TMC_END__>
    256e:	48 29 fe             	sub    %rdi,%rsi
    2571:	48 89 f0             	mov    %rsi,%rax
    2574:	48 c1 ee 3f          	shr    $0x3f,%rsi
    2578:	48 c1 f8 03          	sar    $0x3,%rax
    257c:	48 01 c6             	add    %rax,%rsi
    257f:	48 d1 fe             	sar    %rsi
    2582:	74 14                	je     2598 <register_tm_clones+0x38>
    2584:	48 8b 05 65 8a 00 00 	mov    0x8a65(%rip),%rax        # aff0 <_ITM_registerTMCloneTable>
    258b:	48 85 c0             	test   %rax,%rax
    258e:	74 08                	je     2598 <register_tm_clones+0x38>
    2590:	ff e0                	jmpq   *%rax
    2592:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2598:	c3                   	retq   
    2599:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000025a0 <__do_global_dtors_aux>:
    25a0:	f3 0f 1e fa          	endbr64 
    25a4:	80 3d a5 8b 00 00 00 	cmpb   $0x0,0x8ba5(%rip)        # b150 <completed.8061>
    25ab:	75 2b                	jne    25d8 <__do_global_dtors_aux+0x38>
    25ad:	55                   	push   %rbp
    25ae:	48 83 3d 12 8a 00 00 	cmpq   $0x0,0x8a12(%rip)        # afc8 <__cxa_finalize@GLIBC_2.2.5>
    25b5:	00 
    25b6:	48 89 e5             	mov    %rsp,%rbp
    25b9:	74 0c                	je     25c7 <__do_global_dtors_aux+0x27>
    25bb:	48 8b 3d 46 8a 00 00 	mov    0x8a46(%rip),%rdi        # b008 <__dso_handle>
    25c2:	e8 39 fc ff ff       	callq  2200 <__cxa_finalize@plt>
    25c7:	e8 64 ff ff ff       	callq  2530 <deregister_tm_clones>
    25cc:	c6 05 7d 8b 00 00 01 	movb   $0x1,0x8b7d(%rip)        # b150 <completed.8061>
    25d3:	5d                   	pop    %rbp
    25d4:	c3                   	retq   
    25d5:	0f 1f 00             	nopl   (%rax)
    25d8:	c3                   	retq   
    25d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000025e0 <frame_dummy>:
    25e0:	f3 0f 1e fa          	endbr64 
    25e4:	e9 77 ff ff ff       	jmpq   2560 <register_tm_clones>
    25e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000025f0 <ec::demangle[abi:cxx11](char const*)>:
    25f0:	f3 0f 1e fa          	endbr64 
    25f4:	41 57                	push   %r15
    25f6:	31 d2                	xor    %edx,%edx
    25f8:	41 56                	push   %r14
    25fa:	41 55                	push   %r13
    25fc:	49 89 f5             	mov    %rsi,%r13
    25ff:	31 f6                	xor    %esi,%esi
    2601:	41 54                	push   %r12
    2603:	49 89 fc             	mov    %rdi,%r12
    2606:	4c 89 ef             	mov    %r13,%rdi
    2609:	55                   	push   %rbp
    260a:	48 83 ec 20          	sub    $0x20,%rsp
    260e:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx
    2613:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    261a:	00 00 
    261c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    2621:	31 c0                	xor    %eax,%eax
    2623:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
    262a:	00 
    262b:	e8 a0 fc ff ff       	callq  22d0 <__cxa_demangle@plt>
    2630:	48 89 c5             	mov    %rax,%rbp
    2633:	8b 44 24 0c          	mov    0xc(%rsp),%eax
    2637:	83 f8 ff             	cmp    $0xffffffff,%eax
    263a:	0f 84 a0 fd ff ff    	je     23e0 <ec::demangle[abi:cxx11](char const*) [clone .cold]>
    2640:	85 c0                	test   %eax,%eax
    2642:	75 7c                	jne    26c0 <ec::demangle[abi:cxx11](char const*)+0xd0>
    2644:	4d 8d 74 24 10       	lea    0x10(%r12),%r14
    2649:	4d 89 34 24          	mov    %r14,(%r12)
    264d:	48 85 ed             	test   %rbp,%rbp
    2650:	0f 84 da 00 00 00    	je     2730 <ec::demangle[abi:cxx11](char const*)+0x140>
    2656:	48 89 ef             	mov    %rbp,%rdi
    2659:	e8 e2 fb ff ff       	callq  2240 <strlen@plt>
    265e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    2663:	49 89 c5             	mov    %rax,%r13
    2666:	48 83 f8 0f          	cmp    $0xf,%rax
    266a:	0f 87 10 01 00 00    	ja     2780 <ec::demangle[abi:cxx11](char const*)+0x190>
    2670:	48 83 f8 01          	cmp    $0x1,%rax
    2674:	0f 85 96 00 00 00    	jne    2710 <ec::demangle[abi:cxx11](char const*)+0x120>
    267a:	0f b6 55 00          	movzbl 0x0(%rbp),%edx
    267e:	41 88 54 24 10       	mov    %dl,0x10(%r12)
    2683:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    2688:	41 c6 04 06 00       	movb   $0x0,(%r14,%rax,1)
    268d:	48 89 ef             	mov    %rbp,%rdi
    2690:	e8 ab fc ff ff       	callq  2340 <free@plt>
    2695:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    269a:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    26a1:	00 00 
    26a3:	0f 85 13 01 00 00    	jne    27bc <ec::demangle[abi:cxx11](char const*)+0x1cc>
    26a9:	48 83 c4 20          	add    $0x20,%rsp
    26ad:	5d                   	pop    %rbp
    26ae:	4c 89 e0             	mov    %r12,%rax
    26b1:	41 5c                	pop    %r12
    26b3:	41 5d                	pop    %r13
    26b5:	41 5e                	pop    %r14
    26b7:	41 5f                	pop    %r15
    26b9:	c3                   	retq   
    26ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    26c0:	4d 8d 7c 24 10       	lea    0x10(%r12),%r15
    26c5:	4d 89 3c 24          	mov    %r15,(%r12)
    26c9:	4d 85 ed             	test   %r13,%r13
    26cc:	74 52                	je     2720 <ec::demangle[abi:cxx11](char const*)+0x130>
    26ce:	4c 89 ef             	mov    %r13,%rdi
    26d1:	e8 6a fb ff ff       	callq  2240 <strlen@plt>
    26d6:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    26db:	49 89 c6             	mov    %rax,%r14
    26de:	48 83 f8 0f          	cmp    $0xf,%rax
    26e2:	77 5c                	ja     2740 <ec::demangle[abi:cxx11](char const*)+0x150>
    26e4:	48 83 f8 01          	cmp    $0x1,%rax
    26e8:	75 1e                	jne    2708 <ec::demangle[abi:cxx11](char const*)+0x118>
    26ea:	41 0f b6 55 00       	movzbl 0x0(%r13),%edx
    26ef:	41 88 54 24 10       	mov    %dl,0x10(%r12)
    26f4:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    26f9:	41 c6 04 07 00       	movb   $0x0,(%r15,%rax,1)
    26fe:	48 85 ed             	test   %rbp,%rbp
    2701:	74 92                	je     2695 <ec::demangle[abi:cxx11](char const*)+0xa5>
    2703:	eb 88                	jmp    268d <ec::demangle[abi:cxx11](char const*)+0x9d>
    2705:	0f 1f 00             	nopl   (%rax)
    2708:	48 85 c0             	test   %rax,%rax
    270b:	74 e7                	je     26f4 <ec::demangle[abi:cxx11](char const*)+0x104>
    270d:	eb 51                	jmp    2760 <ec::demangle[abi:cxx11](char const*)+0x170>
    270f:	90                   	nop
    2710:	48 85 c0             	test   %rax,%rax
    2713:	0f 84 6a ff ff ff    	je     2683 <ec::demangle[abi:cxx11](char const*)+0x93>
    2719:	e9 82 00 00 00       	jmpq   27a0 <ec::demangle[abi:cxx11](char const*)+0x1b0>
    271e:	66 90                	xchg   %ax,%ax
    2720:	48 8d 3d e1 58 00 00 	lea    0x58e1(%rip),%rdi        # 8008 <_IO_stdin_used+0x8>
    2727:	e8 74 fb ff ff       	callq  22a0 <std::__throw_logic_error(char const*)@plt>
    272c:	0f 1f 40 00          	nopl   0x0(%rax)
    2730:	48 8d 3d d1 58 00 00 	lea    0x58d1(%rip),%rdi        # 8008 <_IO_stdin_used+0x8>
    2737:	e8 64 fb ff ff       	callq  22a0 <std::__throw_logic_error(char const*)@plt>
    273c:	0f 1f 40 00          	nopl   0x0(%rax)
    2740:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    2745:	31 d2                	xor    %edx,%edx
    2747:	4c 89 e7             	mov    %r12,%rdi
    274a:	e8 81 fc ff ff       	callq  23d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
    274f:	49 89 04 24          	mov    %rax,(%r12)
    2753:	49 89 c7             	mov    %rax,%r15
    2756:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    275b:	49 89 44 24 10       	mov    %rax,0x10(%r12)
    2760:	4c 89 ff             	mov    %r15,%rdi
    2763:	4c 89 f2             	mov    %r14,%rdx
    2766:	4c 89 ee             	mov    %r13,%rsi
    2769:	e8 52 fb ff ff       	callq  22c0 <memcpy@plt>
    276e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    2773:	4d 8b 3c 24          	mov    (%r12),%r15
    2777:	e9 78 ff ff ff       	jmpq   26f4 <ec::demangle[abi:cxx11](char const*)+0x104>
    277c:	0f 1f 40 00          	nopl   0x0(%rax)
    2780:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    2785:	31 d2                	xor    %edx,%edx
    2787:	4c 89 e7             	mov    %r12,%rdi
    278a:	e8 41 fc ff ff       	callq  23d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
    278f:	49 89 04 24          	mov    %rax,(%r12)
    2793:	49 89 c6             	mov    %rax,%r14
    2796:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    279b:	49 89 44 24 10       	mov    %rax,0x10(%r12)
    27a0:	4c 89 f7             	mov    %r14,%rdi
    27a3:	4c 89 ea             	mov    %r13,%rdx
    27a6:	48 89 ee             	mov    %rbp,%rsi
    27a9:	e8 12 fb ff ff       	callq  22c0 <memcpy@plt>
    27ae:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    27b3:	4d 8b 34 24          	mov    (%r12),%r14
    27b7:	e9 c7 fe ff ff       	jmpq   2683 <ec::demangle[abi:cxx11](char const*)+0x93>
    27bc:	e8 4f fb ff ff       	callq  2310 <__stack_chk_fail@plt>
    27c1:	f3 0f 1e fa          	endbr64 
    27c5:	49 89 c4             	mov    %rax,%r12
    27c8:	c5 f8 77             	vzeroupper 
    27cb:	e9 65 fc ff ff       	jmpq   2435 <ec::demangle[abi:cxx11](char const*) [clone .cold]+0x55>
    27d0:	f3 0f 1e fa          	endbr64 
    27d4:	49 89 c4             	mov    %rax,%r12
    27d7:	c5 f8 77             	vzeroupper 
    27da:	e9 5e fc ff ff       	jmpq   243d <ec::demangle[abi:cxx11](char const*) [clone .cold]+0x5d>
    27df:	f3 0f 1e fa          	endbr64 
    27e3:	e9 2e fc ff ff       	jmpq   2416 <ec::demangle[abi:cxx11](char const*) [clone .cold]+0x36>
    27e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    27ef:	00 

00000000000027f0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]>:
    27f0:	41 57                	push   %r15
    27f2:	48 89 d0             	mov    %rdx,%rax
    27f5:	48 29 f8             	sub    %rdi,%rax
    27f8:	41 56                	push   %r14
    27fa:	41 55                	push   %r13
    27fc:	41 54                	push   %r12
    27fe:	55                   	push   %rbp
    27ff:	48 89 d5             	mov    %rdx,%rbp
    2802:	53                   	push   %rbx
    2803:	48 89 fb             	mov    %rdi,%rbx
    2806:	48 83 ec 18          	sub    $0x18,%rsp
    280a:	48 83 f8 18          	cmp    $0x18,%rax
    280e:	0f 8e ef 01 00 00    	jle    2a03 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x213>
    2814:	49 89 f4             	mov    %rsi,%r12
    2817:	48 85 c9             	test   %rcx,%rcx
    281a:	0f 84 d9 00 00 00    	je     28f9 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x109>
    2820:	c5 fb 10 0f          	vmovsd (%rdi),%xmm1
    2824:	0f 1f 40 00          	nopl   0x0(%rax)
    2828:	48 c1 f8 04          	sar    $0x4,%rax
    282c:	48 8d 04 c3          	lea    (%rbx,%rax,8),%rax
    2830:	c5 fb 10 53 08       	vmovsd 0x8(%rbx),%xmm2
    2835:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    2839:	48 ff c9             	dec    %rcx
    283c:	c5 f9 2f c2          	vcomisd %xmm2,%xmm0
    2840:	c5 fb 10 5d f8       	vmovsd -0x8(%rbp),%xmm3
    2845:	48 8d 53 08          	lea    0x8(%rbx),%rdx
    2849:	0f 86 71 01 00 00    	jbe    29c0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x1d0>
    284f:	c5 f9 2f d8          	vcomisd %xmm0,%xmm3
    2853:	0f 87 7b 01 00 00    	ja     29d4 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x1e4>
    2859:	c5 f9 2f da          	vcomisd %xmm2,%xmm3
    285d:	0f 86 45 02 00 00    	jbe    2aa8 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x2b8>
    2863:	c5 fb 11 1b          	vmovsd %xmm3,(%rbx)
    2867:	c5 f9 28 d1          	vmovapd %xmm1,%xmm2
    286b:	c5 fb 11 4d f8       	vmovsd %xmm1,-0x8(%rbp)
    2870:	c5 fb 10 03          	vmovsd (%rbx),%xmm0
    2874:	48 89 e8             	mov    %rbp,%rax
    2877:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    287e:	00 00 
    2880:	c5 fb 10 0a          	vmovsd (%rdx),%xmm1
    2884:	c5 f9 2f c1          	vcomisd %xmm1,%xmm0
    2888:	77 37                	ja     28c1 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0xd1>
    288a:	48 83 e8 08          	sub    $0x8,%rax
    288e:	c5 f9 2f d0          	vcomisd %xmm0,%xmm2
    2892:	76 13                	jbe    28a7 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0xb7>
    2894:	0f 1f 40 00          	nopl   0x0(%rax)
    2898:	c5 fb 10 50 f8       	vmovsd -0x8(%rax),%xmm2
    289d:	48 83 e8 08          	sub    $0x8,%rax
    28a1:	c5 f9 2f d0          	vcomisd %xmm0,%xmm2
    28a5:	77 f1                	ja     2898 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0xa8>
    28a7:	48 39 c2             	cmp    %rax,%rdx
    28aa:	73 24                	jae    28d0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0xe0>
    28ac:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    28b0:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    28b4:	c5 fb 11 08          	vmovsd %xmm1,(%rax)
    28b8:	c5 fb 10 03          	vmovsd (%rbx),%xmm0
    28bc:	c5 fb 10 50 f8       	vmovsd -0x8(%rax),%xmm2
    28c1:	48 83 c2 08          	add    $0x8,%rdx
    28c5:	eb b9                	jmp    2880 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x90>
    28c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    28ce:	00 00 
    28d0:	49 39 d4             	cmp    %rdx,%r12
    28d3:	0f 83 17 01 00 00    	jae    29f0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x200>
    28d9:	48 89 d5             	mov    %rdx,%rbp
    28dc:	48 89 e8             	mov    %rbp,%rax
    28df:	48 29 d8             	sub    %rbx,%rax
    28e2:	c5 f9 28 c8          	vmovapd %xmm0,%xmm1
    28e6:	48 83 f8 18          	cmp    $0x18,%rax
    28ea:	0f 8e 13 01 00 00    	jle    2a03 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x213>
    28f0:	48 85 c9             	test   %rcx,%rcx
    28f3:	0f 85 2f ff ff ff    	jne    2828 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x38>
    28f9:	4d 8d 6c 24 08       	lea    0x8(%r12),%r13
    28fe:	4c 89 e8             	mov    %r13,%rax
    2901:	48 29 d8             	sub    %rbx,%rax
    2904:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    2909:	48 83 f8 08          	cmp    $0x8,%rax
    290d:	7e 3d                	jle    294c <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x15c>
    290f:	49 89 c7             	mov    %rax,%r15
    2912:	49 c1 ff 03          	sar    $0x3,%r15
    2916:	49 8d 57 fe          	lea    -0x2(%r15),%rdx
    291a:	48 89 d0             	mov    %rdx,%rax
    291d:	48 c1 e8 3f          	shr    $0x3f,%rax
    2921:	48 01 d0             	add    %rdx,%rax
    2924:	48 d1 f8             	sar    %rax
    2927:	49 89 c6             	mov    %rax,%r14
    292a:	eb 07                	jmp    2933 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x143>
    292c:	0f 1f 40 00          	nopl   0x0(%rax)
    2930:	49 ff ce             	dec    %r14
    2933:	c4 a1 7b 10 04 f3    	vmovsd (%rbx,%r14,8),%xmm0
    2939:	4c 89 fa             	mov    %r15,%rdx
    293c:	4c 89 f6             	mov    %r14,%rsi
    293f:	48 89 df             	mov    %rbx,%rdi
    2942:	e8 89 27 00 00       	callq  50d0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>
    2947:	4d 85 f6             	test   %r14,%r14
    294a:	75 e4                	jne    2930 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x140>
    294c:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
    2951:	c5 fb 10 03          	vmovsd (%rbx),%xmm0
    2955:	49 c1 fe 03          	sar    $0x3,%r14
    2959:	49 39 ed             	cmp    %rbp,%r13
    295c:	72 0b                	jb     2969 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x179>
    295e:	eb 3b                	jmp    299b <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x1ab>
    2960:	49 83 c5 08          	add    $0x8,%r13
    2964:	49 39 ed             	cmp    %rbp,%r13
    2967:	73 32                	jae    299b <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x1ab>
    2969:	c4 c1 79 2f 45 00    	vcomisd 0x0(%r13),%xmm0
    296f:	76 ef                	jbe    2960 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x170>
    2971:	c5 fb 10 0b          	vmovsd (%rbx),%xmm1
    2975:	c4 c1 7b 10 45 00    	vmovsd 0x0(%r13),%xmm0
    297b:	4c 89 f2             	mov    %r14,%rdx
    297e:	c4 c1 7b 11 4d 00    	vmovsd %xmm1,0x0(%r13)
    2984:	31 f6                	xor    %esi,%esi
    2986:	48 89 df             	mov    %rbx,%rdi
    2989:	49 83 c5 08          	add    $0x8,%r13
    298d:	e8 3e 27 00 00       	callq  50d0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>
    2992:	c5 fb 10 03          	vmovsd (%rbx),%xmm0
    2996:	49 39 ed             	cmp    %rbp,%r13
    2999:	72 ce                	jb     2969 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x179>
    299b:	c4 c1 7b 10 0c 24    	vmovsd (%r12),%xmm1
    29a1:	c5 fb 11 0b          	vmovsd %xmm1,(%rbx)
    29a5:	c4 c1 7b 11 04 24    	vmovsd %xmm0,(%r12)
    29ab:	48 83 c4 18          	add    $0x18,%rsp
    29af:	5b                   	pop    %rbx
    29b0:	5d                   	pop    %rbp
    29b1:	41 5c                	pop    %r12
    29b3:	41 5d                	pop    %r13
    29b5:	41 5e                	pop    %r14
    29b7:	41 5f                	pop    %r15
    29b9:	c3                   	retq   
    29ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    29c0:	c5 f9 2f da          	vcomisd %xmm2,%xmm3
    29c4:	0f 87 de 00 00 00    	ja     2aa8 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x2b8>
    29ca:	c5 f9 2f d8          	vcomisd %xmm0,%xmm3
    29ce:	0f 87 8f fe ff ff    	ja     2863 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x73>
    29d4:	c5 fb 11 03          	vmovsd %xmm0,(%rbx)
    29d8:	c5 fb 11 08          	vmovsd %xmm1,(%rax)
    29dc:	c5 fb 10 55 f8       	vmovsd -0x8(%rbp),%xmm2
    29e1:	e9 8a fe ff ff       	jmpq   2870 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x80>
    29e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    29ed:	00 00 00 
    29f0:	48 89 d3             	mov    %rdx,%rbx
    29f3:	48 89 e8             	mov    %rbp,%rax
    29f6:	48 29 d8             	sub    %rbx,%rax
    29f9:	48 83 f8 18          	cmp    $0x18,%rax
    29fd:	0f 8f ed fe ff ff    	jg     28f0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x100>
    2a03:	48 39 dd             	cmp    %rbx,%rbp
    2a06:	74 a3                	je     29ab <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x1bb>
    2a08:	4c 8d 63 08          	lea    0x8(%rbx),%r12
    2a0c:	49 39 ec             	cmp    %rbp,%r12
    2a0f:	74 9a                	je     29ab <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x1bb>
    2a11:	41 bd 08 00 00 00    	mov    $0x8,%r13d
    2a17:	eb 3b                	jmp    2a54 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x264>
    2a19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2a20:	49 39 dc             	cmp    %rbx,%r12
    2a23:	74 1e                	je     2a43 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x253>
    2a25:	4c 89 e2             	mov    %r12,%rdx
    2a28:	48 29 da             	sub    %rbx,%rdx
    2a2b:	4a 8d 3c 2b          	lea    (%rbx,%r13,1),%rdi
    2a2f:	48 89 de             	mov    %rbx,%rsi
    2a32:	c5 fb 11 44 24 08    	vmovsd %xmm0,0x8(%rsp)
    2a38:	e8 53 f9 ff ff       	callq  2390 <memmove@plt>
    2a3d:	c5 fb 10 44 24 08    	vmovsd 0x8(%rsp),%xmm0
    2a43:	c5 fb 11 03          	vmovsd %xmm0,(%rbx)
    2a47:	49 83 c4 08          	add    $0x8,%r12
    2a4b:	49 39 ec             	cmp    %rbp,%r12
    2a4e:	0f 84 57 ff ff ff    	je     29ab <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x1bb>
    2a54:	c4 c1 7b 10 04 24    	vmovsd (%r12),%xmm0
    2a5a:	c5 fb 10 0b          	vmovsd (%rbx),%xmm1
    2a5e:	c5 f9 2f c8          	vcomisd %xmm0,%xmm1
    2a62:	77 bc                	ja     2a20 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x230>
    2a64:	c4 c1 7b 10 4c 24 f8 	vmovsd -0x8(%r12),%xmm1
    2a6b:	49 8d 44 24 f8       	lea    -0x8(%r12),%rax
    2a70:	c5 f9 2f c8          	vcomisd %xmm0,%xmm1
    2a74:	76 4a                	jbe    2ac0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x2d0>
    2a76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    2a7d:	00 00 00 
    2a80:	c5 fb 10 08          	vmovsd (%rax),%xmm1
    2a84:	48 89 c2             	mov    %rax,%rdx
    2a87:	c5 fb 11 48 08       	vmovsd %xmm1,0x8(%rax)
    2a8c:	c5 fb 10 48 f8       	vmovsd -0x8(%rax),%xmm1
    2a91:	48 83 e8 08          	sub    $0x8,%rax
    2a95:	c5 f9 2f c8          	vcomisd %xmm0,%xmm1
    2a99:	77 e5                	ja     2a80 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x290>
    2a9b:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    2a9f:	eb a6                	jmp    2a47 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x257>
    2aa1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2aa8:	c5 fb 11 13          	vmovsd %xmm2,(%rbx)
    2aac:	c5 fb 11 4b 08       	vmovsd %xmm1,0x8(%rbx)
    2ab1:	c5 fb 10 55 f8       	vmovsd -0x8(%rbp),%xmm2
    2ab6:	e9 b5 fd ff ff       	jmpq   2870 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x80>
    2abb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    2ac0:	4c 89 e2             	mov    %r12,%rdx
    2ac3:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    2ac7:	e9 7b ff ff ff       	jmpq   2a47 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x257>
    2acc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000002ad0 <std::ctype<char>::do_widen(char) const>:
    2ad0:	f3 0f 1e fa          	endbr64 
    2ad4:	89 f0                	mov    %esi,%eax
    2ad6:	c3                   	retq   
    2ad7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    2ade:	00 00 

0000000000002ae0 <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])>:
    2ae0:	f3 0f 1e fa          	endbr64 
    2ae4:	55                   	push   %rbp
    2ae5:	49 89 f1             	mov    %rsi,%r9
    2ae8:	49 89 fb             	mov    %rdi,%r11
    2aeb:	53                   	push   %rbx
    2aec:	48 8d aa 00 80 00 00 	lea    0x8000(%rdx),%rbp
    2af3:	31 db                	xor    %ebx,%ebx
    2af5:	4c 8d 92 00 81 00 00 	lea    0x8100(%rdx),%r10
    2afc:	48 89 ef             	mov    %rbp,%rdi
    2aff:	4d 89 d8             	mov    %r11,%r8
    2b02:	41 0f b7 30          	movzwl (%r8),%esi
    2b06:	48 8d 87 00 80 ff ff 	lea    -0x8000(%rdi),%rax
    2b0d:	4c 89 c9             	mov    %r9,%rcx
    2b10:	0f b7 11             	movzwl (%rcx),%edx
    2b13:	48 05 00 01 00 00    	add    $0x100,%rax
    2b19:	66 0f af 90 00 ff ff 	imul   -0x100(%rax),%dx
    2b20:	ff 
    2b21:	48 83 c1 02          	add    $0x2,%rcx
    2b25:	01 d6                	add    %edx,%esi
    2b27:	66 41 89 30          	mov    %si,(%r8)
    2b2b:	48 39 c7             	cmp    %rax,%rdi
    2b2e:	75 e0                	jne    2b10 <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])+0x30>
    2b30:	48 83 c7 02          	add    $0x2,%rdi
    2b34:	49 83 c0 02          	add    $0x2,%r8
    2b38:	49 39 fa             	cmp    %rdi,%r10
    2b3b:	75 c5                	jne    2b02 <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])+0x22>
    2b3d:	48 83 eb 80          	sub    $0xffffffffffffff80,%rbx
    2b41:	49 81 c1 00 01 00 00 	add    $0x100,%r9
    2b48:	49 81 c3 00 01 00 00 	add    $0x100,%r11
    2b4f:	48 81 fb 00 40 00 00 	cmp    $0x4000,%rbx
    2b56:	75 a4                	jne    2afc <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])+0x1c>
    2b58:	5b                   	pop    %rbx
    2b59:	5d                   	pop    %rbp
    2b5a:	c3                   	retq   
    2b5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002b60 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])>:
    2b60:	f3 0f 1e fa          	endbr64 
    2b64:	55                   	push   %rbp
    2b65:	48 89 f9             	mov    %rdi,%rcx
    2b68:	4c 8d 97 00 01 00 00 	lea    0x100(%rdi),%r10
    2b6f:	48 89 e5             	mov    %rsp,%rbp
    2b72:	41 56                	push   %r14
    2b74:	4c 8d 4f 20          	lea    0x20(%rdi),%r9
    2b78:	4c 8d 9a 00 80 00 00 	lea    0x8000(%rdx),%r11
    2b7f:	41 55                	push   %r13
    2b81:	45 31 ed             	xor    %r13d,%r13d
    2b84:	41 54                	push   %r12
    2b86:	49 89 d4             	mov    %rdx,%r12
    2b89:	53                   	push   %rbx
    2b8a:	48 89 f3             	mov    %rsi,%rbx
    2b8d:	4c 89 e6             	mov    %r12,%rsi
    2b90:	48 89 df             	mov    %rbx,%rdi
    2b93:	49 89 d8             	mov    %rbx,%r8
    2b96:	e9 be 00 00 00       	jmpq   2c59 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0xf9>
    2b9b:	4c 39 c1             	cmp    %r8,%rcx
    2b9e:	0f 93 c0             	setae  %al
    2ba1:	44 08 f0             	or     %r14b,%al
    2ba4:	0f 84 d2 00 00 00    	je     2c7c <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x11c>
    2baa:	c4 e2 7d 79 07       	vpbroadcastw (%rdi),%ymm0
    2baf:	48 81 c6 00 01 00 00 	add    $0x100,%rsi
    2bb6:	c5 fd d5 8e 00 ff ff 	vpmullw -0x100(%rsi),%ymm0,%ymm1
    2bbd:	ff 
    2bbe:	c5 f5 fd 09          	vpaddw (%rcx),%ymm1,%ymm1
    2bc2:	48 83 c7 02          	add    $0x2,%rdi
    2bc6:	c5 fe 7f 09          	vmovdqu %ymm1,(%rcx)
    2bca:	c5 fd d5 8e 20 ff ff 	vpmullw -0xe0(%rsi),%ymm0,%ymm1
    2bd1:	ff 
    2bd2:	c5 f5 fd 49 20       	vpaddw 0x20(%rcx),%ymm1,%ymm1
    2bd7:	c5 fe 7f 49 20       	vmovdqu %ymm1,0x20(%rcx)
    2bdc:	c5 fd d5 8e 40 ff ff 	vpmullw -0xc0(%rsi),%ymm0,%ymm1
    2be3:	ff 
    2be4:	c5 f5 fd 49 40       	vpaddw 0x40(%rcx),%ymm1,%ymm1
    2be9:	c5 fe 7f 49 40       	vmovdqu %ymm1,0x40(%rcx)
    2bee:	c5 fd d5 8e 60 ff ff 	vpmullw -0xa0(%rsi),%ymm0,%ymm1
    2bf5:	ff 
    2bf6:	c5 f5 fd 49 60       	vpaddw 0x60(%rcx),%ymm1,%ymm1
    2bfb:	c5 fe 7f 49 60       	vmovdqu %ymm1,0x60(%rcx)
    2c00:	c5 fd d5 4e 80       	vpmullw -0x80(%rsi),%ymm0,%ymm1
    2c05:	c5 f5 fd 89 80 00 00 	vpaddw 0x80(%rcx),%ymm1,%ymm1
    2c0c:	00 
    2c0d:	c5 fe 7f 89 80 00 00 	vmovdqu %ymm1,0x80(%rcx)
    2c14:	00 
    2c15:	c5 fd d5 4e a0       	vpmullw -0x60(%rsi),%ymm0,%ymm1
    2c1a:	c5 f5 fd 89 a0 00 00 	vpaddw 0xa0(%rcx),%ymm1,%ymm1
    2c21:	00 
    2c22:	c5 fe 7f 89 a0 00 00 	vmovdqu %ymm1,0xa0(%rcx)
    2c29:	00 
    2c2a:	c5 fd d5 4e c0       	vpmullw -0x40(%rsi),%ymm0,%ymm1
    2c2f:	c5 f5 fd 89 c0 00 00 	vpaddw 0xc0(%rcx),%ymm1,%ymm1
    2c36:	00 
    2c37:	c5 fe 7f 89 c0 00 00 	vmovdqu %ymm1,0xc0(%rcx)
    2c3e:	00 
    2c3f:	c5 fd d5 46 e0       	vpmullw -0x20(%rsi),%ymm0,%ymm0
    2c44:	c5 fd fd 81 e0 00 00 	vpaddw 0xe0(%rcx),%ymm0,%ymm0
    2c4b:	00 
    2c4c:	c5 fe 7f 81 e0 00 00 	vmovdqu %ymm0,0xe0(%rcx)
    2c53:	00 
    2c54:	49 39 f3             	cmp    %rsi,%r11
    2c57:	74 4e                	je     2ca7 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x147>
    2c59:	4d 39 d0             	cmp    %r10,%r8
    2c5c:	48 8d 46 20          	lea    0x20(%rsi),%rax
    2c60:	41 0f 93 c6          	setae  %r14b
    2c64:	49 83 c0 02          	add    $0x2,%r8
    2c68:	48 39 c1             	cmp    %rax,%rcx
    2c6b:	0f 93 c2             	setae  %dl
    2c6e:	4c 39 ce             	cmp    %r9,%rsi
    2c71:	0f 93 c0             	setae  %al
    2c74:	08 c2                	or     %al,%dl
    2c76:	0f 85 1f ff ff ff    	jne    2b9b <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x3b>
    2c7c:	31 c0                	xor    %eax,%eax
    2c7e:	66 90                	xchg   %ax,%ax
    2c80:	0f b7 14 46          	movzwl (%rsi,%rax,2),%edx
    2c84:	66 0f af 17          	imul   (%rdi),%dx
    2c88:	66 01 14 41          	add    %dx,(%rcx,%rax,2)
    2c8c:	48 ff c0             	inc    %rax
    2c8f:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    2c95:	75 e9                	jne    2c80 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x120>
    2c97:	48 81 c6 00 01 00 00 	add    $0x100,%rsi
    2c9e:	48 83 c7 02          	add    $0x2,%rdi
    2ca2:	49 39 f3             	cmp    %rsi,%r11
    2ca5:	75 b2                	jne    2c59 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0xf9>
    2ca7:	49 83 ed 80          	sub    $0xffffffffffffff80,%r13
    2cab:	48 81 c1 00 01 00 00 	add    $0x100,%rcx
    2cb2:	48 81 c3 00 01 00 00 	add    $0x100,%rbx
    2cb9:	49 81 c2 00 01 00 00 	add    $0x100,%r10
    2cc0:	49 81 c1 00 01 00 00 	add    $0x100,%r9
    2cc7:	49 81 fd 00 40 00 00 	cmp    $0x4000,%r13
    2cce:	0f 85 b9 fe ff ff    	jne    2b8d <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x2d>
    2cd4:	c5 f8 77             	vzeroupper 
    2cd7:	5b                   	pop    %rbx
    2cd8:	41 5c                	pop    %r12
    2cda:	41 5d                	pop    %r13
    2cdc:	41 5e                	pop    %r14
    2cde:	5d                   	pop    %rbp
    2cdf:	c3                   	retq   

0000000000002ce0 <void jik<short>(short (*) [128], short (*) [128], short (*) [128])>:
    2ce0:	f3 0f 1e fa          	endbr64 
    2ce4:	55                   	push   %rbp
    2ce5:	4c 8d 9f 00 80 00 00 	lea    0x8000(%rdi),%r11
    2cec:	48 89 f5             	mov    %rsi,%rbp
    2cef:	53                   	push   %rbx
    2cf0:	49 89 d2             	mov    %rdx,%r10
    2cf3:	4c 8d 82 00 80 00 00 	lea    0x8000(%rdx),%r8
    2cfa:	31 db                	xor    %ebx,%ebx
    2cfc:	49 8d bb 00 80 ff ff 	lea    -0x8000(%r11),%rdi
    2d03:	49 89 e9             	mov    %rbp,%r9
    2d06:	0f b7 37             	movzwl (%rdi),%esi
    2d09:	4c 89 d0             	mov    %r10,%rax
    2d0c:	4c 89 c9             	mov    %r9,%rcx
    2d0f:	90                   	nop
    2d10:	0f b7 11             	movzwl (%rcx),%edx
    2d13:	48 05 00 01 00 00    	add    $0x100,%rax
    2d19:	66 0f af 90 00 ff ff 	imul   -0x100(%rax),%dx
    2d20:	ff 
    2d21:	48 83 c1 02          	add    $0x2,%rcx
    2d25:	01 d6                	add    %edx,%esi
    2d27:	66 89 37             	mov    %si,(%rdi)
    2d2a:	49 39 c0             	cmp    %rax,%r8
    2d2d:	75 e1                	jne    2d10 <void jik<short>(short (*) [128], short (*) [128], short (*) [128])+0x30>
    2d2f:	48 81 c7 00 01 00 00 	add    $0x100,%rdi
    2d36:	49 81 c1 00 01 00 00 	add    $0x100,%r9
    2d3d:	49 39 fb             	cmp    %rdi,%r11
    2d40:	75 c4                	jne    2d06 <void jik<short>(short (*) [128], short (*) [128], short (*) [128])+0x26>
    2d42:	48 ff c3             	inc    %rbx
    2d45:	49 83 c3 02          	add    $0x2,%r11
    2d49:	49 83 c2 02          	add    $0x2,%r10
    2d4d:	49 83 c0 02          	add    $0x2,%r8
    2d51:	48 81 fb 80 00 00 00 	cmp    $0x80,%rbx
    2d58:	75 a2                	jne    2cfc <void jik<short>(short (*) [128], short (*) [128], short (*) [128])+0x1c>
    2d5a:	5b                   	pop    %rbx
    2d5b:	5d                   	pop    %rbp
    2d5c:	c3                   	retq   
    2d5d:	0f 1f 00             	nopl   (%rax)

0000000000002d60 <void jki<short>(short (*) [128], short (*) [128], short (*) [128])>:
    2d60:	f3 0f 1e fa          	endbr64 
    2d64:	55                   	push   %rbp
    2d65:	49 89 f9             	mov    %rdi,%r9
    2d68:	49 89 d3             	mov    %rdx,%r11
    2d6b:	53                   	push   %rbx
    2d6c:	48 8d bf 00 80 00 00 	lea    0x8000(%rdi),%rdi
    2d73:	48 89 f3             	mov    %rsi,%rbx
    2d76:	49 8d a9 00 01 00 00 	lea    0x100(%r9),%rbp
    2d7d:	4c 8d 96 00 01 00 00 	lea    0x100(%rsi),%r10
    2d84:	49 89 d8             	mov    %rbx,%r8
    2d87:	4c 89 de             	mov    %r11,%rsi
    2d8a:	4c 89 c1             	mov    %r8,%rcx
    2d8d:	4c 89 c8             	mov    %r9,%rax
    2d90:	0f b7 11             	movzwl (%rcx),%edx
    2d93:	48 81 c1 00 01 00 00 	add    $0x100,%rcx
    2d9a:	66 0f af 16          	imul   (%rsi),%dx
    2d9e:	66 01 10             	add    %dx,(%rax)
    2da1:	48 05 00 01 00 00    	add    $0x100,%rax
    2da7:	48 39 c7             	cmp    %rax,%rdi
    2daa:	75 e4                	jne    2d90 <void jki<short>(short (*) [128], short (*) [128], short (*) [128])+0x30>
    2dac:	49 83 c0 02          	add    $0x2,%r8
    2db0:	48 81 c6 00 01 00 00 	add    $0x100,%rsi
    2db7:	4d 39 c2             	cmp    %r8,%r10
    2dba:	75 ce                	jne    2d8a <void jki<short>(short (*) [128], short (*) [128], short (*) [128])+0x2a>
    2dbc:	49 83 c1 02          	add    $0x2,%r9
    2dc0:	48 83 c7 02          	add    $0x2,%rdi
    2dc4:	49 83 c3 02          	add    $0x2,%r11
    2dc8:	4c 39 cd             	cmp    %r9,%rbp
    2dcb:	75 b7                	jne    2d84 <void jki<short>(short (*) [128], short (*) [128], short (*) [128])+0x24>
    2dcd:	5b                   	pop    %rbx
    2dce:	5d                   	pop    %rbp
    2dcf:	c3                   	retq   

0000000000002dd0 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])>:
    2dd0:	f3 0f 1e fa          	endbr64 
    2dd4:	55                   	push   %rbp
    2dd5:	49 89 f0             	mov    %rsi,%r8
    2dd8:	49 89 fb             	mov    %rdi,%r11
    2ddb:	48 89 e5             	mov    %rsp,%rbp
    2dde:	41 55                	push   %r13
    2de0:	48 89 d6             	mov    %rdx,%rsi
    2de3:	4c 8d 4a 20          	lea    0x20(%rdx),%r9
    2de7:	41 54                	push   %r12
    2de9:	4c 8d 97 00 80 00 00 	lea    0x8000(%rdi),%r10
    2df0:	45 31 e4             	xor    %r12d,%r12d
    2df3:	53                   	push   %rbx
    2df4:	4c 89 c3             	mov    %r8,%rbx
    2df7:	4d 89 d8             	mov    %r11,%r8
    2dfa:	48 89 df             	mov    %rbx,%rdi
    2dfd:	e9 b2 00 00 00       	jmpq   2eb4 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0xe4>
    2e02:	84 c0                	test   %al,%al
    2e04:	0f 84 e0 00 00 00    	je     2eea <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x11a>
    2e0a:	c4 e2 7d 79 07       	vpbroadcastw (%rdi),%ymm0
    2e0f:	48 81 c7 00 01 00 00 	add    $0x100,%rdi
    2e16:	c5 fd d5 0e          	vpmullw (%rsi),%ymm0,%ymm1
    2e1a:	c5 f5 fd 09          	vpaddw (%rcx),%ymm1,%ymm1
    2e1e:	c5 fe 7f 09          	vmovdqu %ymm1,(%rcx)
    2e22:	c5 fd d5 4e 20       	vpmullw 0x20(%rsi),%ymm0,%ymm1
    2e27:	c5 f5 fd 49 20       	vpaddw 0x20(%rcx),%ymm1,%ymm1
    2e2c:	c5 fe 7f 49 20       	vmovdqu %ymm1,0x20(%rcx)
    2e31:	c5 fd d5 4e 40       	vpmullw 0x40(%rsi),%ymm0,%ymm1
    2e36:	c5 f5 fd 49 40       	vpaddw 0x40(%rcx),%ymm1,%ymm1
    2e3b:	c5 fe 7f 49 40       	vmovdqu %ymm1,0x40(%rcx)
    2e40:	c5 fd d5 4e 60       	vpmullw 0x60(%rsi),%ymm0,%ymm1
    2e45:	c5 f5 fd 49 60       	vpaddw 0x60(%rcx),%ymm1,%ymm1
    2e4a:	c5 fe 7f 49 60       	vmovdqu %ymm1,0x60(%rcx)
    2e4f:	c5 fd d5 8e 80 00 00 	vpmullw 0x80(%rsi),%ymm0,%ymm1
    2e56:	00 
    2e57:	c5 f5 fd 89 80 00 00 	vpaddw 0x80(%rcx),%ymm1,%ymm1
    2e5e:	00 
    2e5f:	c5 fe 7f 89 80 00 00 	vmovdqu %ymm1,0x80(%rcx)
    2e66:	00 
    2e67:	c5 fd d5 8e a0 00 00 	vpmullw 0xa0(%rsi),%ymm0,%ymm1
    2e6e:	00 
    2e6f:	c5 f5 fd 89 a0 00 00 	vpaddw 0xa0(%rcx),%ymm1,%ymm1
    2e76:	00 
    2e77:	c5 fe 7f 89 a0 00 00 	vmovdqu %ymm1,0xa0(%rcx)
    2e7e:	00 
    2e7f:	c5 fd d5 8e c0 00 00 	vpmullw 0xc0(%rsi),%ymm0,%ymm1
    2e86:	00 
    2e87:	c5 f5 fd 89 c0 00 00 	vpaddw 0xc0(%rcx),%ymm1,%ymm1
    2e8e:	00 
    2e8f:	c5 fe 7f 89 c0 00 00 	vmovdqu %ymm1,0xc0(%rcx)
    2e96:	00 
    2e97:	c5 fd d5 86 e0 00 00 	vpmullw 0xe0(%rsi),%ymm0,%ymm0
    2e9e:	00 
    2e9f:	c5 fd fd 81 e0 00 00 	vpaddw 0xe0(%rcx),%ymm0,%ymm0
    2ea6:	00 
    2ea7:	c5 fe 7f 81 e0 00 00 	vmovdqu %ymm0,0xe0(%rcx)
    2eae:	00 
    2eaf:	4d 39 d0             	cmp    %r10,%r8
    2eb2:	74 5f                	je     2f13 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x143>
    2eb4:	49 8d 40 20          	lea    0x20(%r8),%rax
    2eb8:	48 39 c6             	cmp    %rax,%rsi
    2ebb:	0f 93 c0             	setae  %al
    2ebe:	4d 39 c8             	cmp    %r9,%r8
    2ec1:	0f 93 c2             	setae  %dl
    2ec4:	4c 89 c1             	mov    %r8,%rcx
    2ec7:	09 d0                	or     %edx,%eax
    2ec9:	48 8d 57 02          	lea    0x2(%rdi),%rdx
    2ecd:	49 81 c0 00 01 00 00 	add    $0x100,%r8
    2ed4:	48 39 d1             	cmp    %rdx,%rcx
    2ed7:	41 0f 93 c5          	setae  %r13b
    2edb:	4c 39 c7             	cmp    %r8,%rdi
    2ede:	0f 93 c2             	setae  %dl
    2ee1:	41 08 d5             	or     %dl,%r13b
    2ee4:	0f 85 18 ff ff ff    	jne    2e02 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x32>
    2eea:	31 c0                	xor    %eax,%eax
    2eec:	0f 1f 40 00          	nopl   0x0(%rax)
    2ef0:	0f b7 14 46          	movzwl (%rsi,%rax,2),%edx
    2ef4:	66 0f af 17          	imul   (%rdi),%dx
    2ef8:	66 01 14 41          	add    %dx,(%rcx,%rax,2)
    2efc:	48 ff c0             	inc    %rax
    2eff:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    2f05:	75 e9                	jne    2ef0 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x120>
    2f07:	48 81 c7 00 01 00 00 	add    $0x100,%rdi
    2f0e:	4d 39 d0             	cmp    %r10,%r8
    2f11:	75 a1                	jne    2eb4 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0xe4>
    2f13:	49 ff c4             	inc    %r12
    2f16:	48 81 c6 00 01 00 00 	add    $0x100,%rsi
    2f1d:	48 83 c3 02          	add    $0x2,%rbx
    2f21:	49 81 c1 00 01 00 00 	add    $0x100,%r9
    2f28:	49 81 fc 80 00 00 00 	cmp    $0x80,%r12
    2f2f:	0f 85 c2 fe ff ff    	jne    2df7 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x27>
    2f35:	c5 f8 77             	vzeroupper 
    2f38:	5b                   	pop    %rbx
    2f39:	41 5c                	pop    %r12
    2f3b:	41 5d                	pop    %r13
    2f3d:	5d                   	pop    %rbp
    2f3e:	c3                   	retq   
    2f3f:	90                   	nop

0000000000002f40 <void kji<short>(short (*) [128], short (*) [128], short (*) [128])>:
    2f40:	f3 0f 1e fa          	endbr64 
    2f44:	53                   	push   %rbx
    2f45:	49 89 f0             	mov    %rsi,%r8
    2f48:	49 89 d2             	mov    %rdx,%r10
    2f4b:	48 8d 9e 00 01 00 00 	lea    0x100(%rsi),%rbx
    2f52:	4c 8d 9f 00 80 00 00 	lea    0x8000(%rdi),%r11
    2f59:	4c 8d 8f 00 81 00 00 	lea    0x8100(%rdi),%r9
    2f60:	4c 89 de             	mov    %r11,%rsi
    2f63:	4c 89 d7             	mov    %r10,%rdi
    2f66:	48 8d 86 00 80 ff ff 	lea    -0x8000(%rsi),%rax
    2f6d:	4c 89 c1             	mov    %r8,%rcx
    2f70:	0f b7 11             	movzwl (%rcx),%edx
    2f73:	48 81 c1 00 01 00 00 	add    $0x100,%rcx
    2f7a:	66 0f af 17          	imul   (%rdi),%dx
    2f7e:	66 01 10             	add    %dx,(%rax)
    2f81:	48 05 00 01 00 00    	add    $0x100,%rax
    2f87:	48 39 c6             	cmp    %rax,%rsi
    2f8a:	75 e4                	jne    2f70 <void kji<short>(short (*) [128], short (*) [128], short (*) [128])+0x30>
    2f8c:	48 83 c6 02          	add    $0x2,%rsi
    2f90:	48 83 c7 02          	add    $0x2,%rdi
    2f94:	49 39 f1             	cmp    %rsi,%r9
    2f97:	75 cd                	jne    2f66 <void kji<short>(short (*) [128], short (*) [128], short (*) [128])+0x26>
    2f99:	49 83 c0 02          	add    $0x2,%r8
    2f9d:	49 81 c2 00 01 00 00 	add    $0x100,%r10
    2fa4:	4c 39 c3             	cmp    %r8,%rbx
    2fa7:	75 b7                	jne    2f60 <void kji<short>(short (*) [128], short (*) [128], short (*) [128])+0x20>
    2fa9:	5b                   	pop    %rbx
    2faa:	c3                   	retq   
    2fab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002fb0 <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])>:
    2fb0:	f3 0f 1e fa          	endbr64 
    2fb4:	55                   	push   %rbp
    2fb5:	49 89 f1             	mov    %rsi,%r9
    2fb8:	49 89 fb             	mov    %rdi,%r11
    2fbb:	53                   	push   %rbx
    2fbc:	48 8d aa 00 00 01 00 	lea    0x10000(%rdx),%rbp
    2fc3:	31 db                	xor    %ebx,%ebx
    2fc5:	4c 8d 92 00 02 01 00 	lea    0x10200(%rdx),%r10
    2fcc:	48 89 ef             	mov    %rbp,%rdi
    2fcf:	4d 89 d8             	mov    %r11,%r8
    2fd2:	41 8b 30             	mov    (%r8),%esi
    2fd5:	48 8d 87 00 00 ff ff 	lea    -0x10000(%rdi),%rax
    2fdc:	4c 89 c9             	mov    %r9,%rcx
    2fdf:	90                   	nop
    2fe0:	8b 11                	mov    (%rcx),%edx
    2fe2:	48 05 00 02 00 00    	add    $0x200,%rax
    2fe8:	0f af 90 00 fe ff ff 	imul   -0x200(%rax),%edx
    2fef:	48 83 c1 04          	add    $0x4,%rcx
    2ff3:	01 d6                	add    %edx,%esi
    2ff5:	41 89 30             	mov    %esi,(%r8)
    2ff8:	48 39 c7             	cmp    %rax,%rdi
    2ffb:	75 e3                	jne    2fe0 <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])+0x30>
    2ffd:	48 83 c7 04          	add    $0x4,%rdi
    3001:	49 83 c0 04          	add    $0x4,%r8
    3005:	49 39 fa             	cmp    %rdi,%r10
    3008:	75 c8                	jne    2fd2 <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])+0x22>
    300a:	48 83 eb 80          	sub    $0xffffffffffffff80,%rbx
    300e:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    3015:	49 81 c3 00 02 00 00 	add    $0x200,%r11
    301c:	48 81 fb 00 40 00 00 	cmp    $0x4000,%rbx
    3023:	75 a7                	jne    2fcc <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])+0x1c>
    3025:	5b                   	pop    %rbx
    3026:	5d                   	pop    %rbp
    3027:	c3                   	retq   
    3028:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    302f:	00 

0000000000003030 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])>:
    3030:	f3 0f 1e fa          	endbr64 
    3034:	55                   	push   %rbp
    3035:	48 89 f9             	mov    %rdi,%rcx
    3038:	4c 8d 97 00 02 00 00 	lea    0x200(%rdi),%r10
    303f:	48 89 e5             	mov    %rsp,%rbp
    3042:	41 56                	push   %r14
    3044:	4c 8d 4f 20          	lea    0x20(%rdi),%r9
    3048:	4c 8d 9a 00 00 01 00 	lea    0x10000(%rdx),%r11
    304f:	41 55                	push   %r13
    3051:	45 31 ed             	xor    %r13d,%r13d
    3054:	41 54                	push   %r12
    3056:	49 89 d4             	mov    %rdx,%r12
    3059:	53                   	push   %rbx
    305a:	48 89 f3             	mov    %rsi,%rbx
    305d:	4c 89 e6             	mov    %r12,%rsi
    3060:	48 89 df             	mov    %rbx,%rdi
    3063:	49 89 d8             	mov    %rbx,%r8
    3066:	e9 8e 01 00 00       	jmpq   31f9 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x1c9>
    306b:	4c 39 c1             	cmp    %r8,%rcx
    306e:	0f 93 c0             	setae  %al
    3071:	44 08 f0             	or     %r14b,%al
    3074:	0f 84 a2 01 00 00    	je     321c <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x1ec>
    307a:	c4 e2 7d 58 07       	vpbroadcastd (%rdi),%ymm0
    307f:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    3086:	c4 e2 7d 40 8e 00 fe 	vpmulld -0x200(%rsi),%ymm0,%ymm1
    308d:	ff ff 
    308f:	c5 f5 fe 09          	vpaddd (%rcx),%ymm1,%ymm1
    3093:	48 83 c7 04          	add    $0x4,%rdi
    3097:	c5 fe 7f 09          	vmovdqu %ymm1,(%rcx)
    309b:	c4 e2 7d 40 8e 20 fe 	vpmulld -0x1e0(%rsi),%ymm0,%ymm1
    30a2:	ff ff 
    30a4:	c5 f5 fe 49 20       	vpaddd 0x20(%rcx),%ymm1,%ymm1
    30a9:	c5 fe 7f 49 20       	vmovdqu %ymm1,0x20(%rcx)
    30ae:	c4 e2 7d 40 8e 40 fe 	vpmulld -0x1c0(%rsi),%ymm0,%ymm1
    30b5:	ff ff 
    30b7:	c5 f5 fe 49 40       	vpaddd 0x40(%rcx),%ymm1,%ymm1
    30bc:	c5 fe 7f 49 40       	vmovdqu %ymm1,0x40(%rcx)
    30c1:	c4 e2 7d 40 8e 60 fe 	vpmulld -0x1a0(%rsi),%ymm0,%ymm1
    30c8:	ff ff 
    30ca:	c5 f5 fe 49 60       	vpaddd 0x60(%rcx),%ymm1,%ymm1
    30cf:	c5 fe 7f 49 60       	vmovdqu %ymm1,0x60(%rcx)
    30d4:	c4 e2 7d 40 8e 80 fe 	vpmulld -0x180(%rsi),%ymm0,%ymm1
    30db:	ff ff 
    30dd:	c5 f5 fe 89 80 00 00 	vpaddd 0x80(%rcx),%ymm1,%ymm1
    30e4:	00 
    30e5:	c5 fe 7f 89 80 00 00 	vmovdqu %ymm1,0x80(%rcx)
    30ec:	00 
    30ed:	c4 e2 7d 40 8e a0 fe 	vpmulld -0x160(%rsi),%ymm0,%ymm1
    30f4:	ff ff 
    30f6:	c5 f5 fe 89 a0 00 00 	vpaddd 0xa0(%rcx),%ymm1,%ymm1
    30fd:	00 
    30fe:	c5 fe 7f 89 a0 00 00 	vmovdqu %ymm1,0xa0(%rcx)
    3105:	00 
    3106:	c4 e2 7d 40 8e c0 fe 	vpmulld -0x140(%rsi),%ymm0,%ymm1
    310d:	ff ff 
    310f:	c5 f5 fe 89 c0 00 00 	vpaddd 0xc0(%rcx),%ymm1,%ymm1
    3116:	00 
    3117:	c5 fe 7f 89 c0 00 00 	vmovdqu %ymm1,0xc0(%rcx)
    311e:	00 
    311f:	c4 e2 7d 40 8e e0 fe 	vpmulld -0x120(%rsi),%ymm0,%ymm1
    3126:	ff ff 
    3128:	c5 f5 fe 89 e0 00 00 	vpaddd 0xe0(%rcx),%ymm1,%ymm1
    312f:	00 
    3130:	c5 fe 7f 89 e0 00 00 	vmovdqu %ymm1,0xe0(%rcx)
    3137:	00 
    3138:	c4 e2 7d 40 8e 00 ff 	vpmulld -0x100(%rsi),%ymm0,%ymm1
    313f:	ff ff 
    3141:	c5 f5 fe 89 00 01 00 	vpaddd 0x100(%rcx),%ymm1,%ymm1
    3148:	00 
    3149:	c5 fe 7f 89 00 01 00 	vmovdqu %ymm1,0x100(%rcx)
    3150:	00 
    3151:	c4 e2 7d 40 8e 20 ff 	vpmulld -0xe0(%rsi),%ymm0,%ymm1
    3158:	ff ff 
    315a:	c5 f5 fe 89 20 01 00 	vpaddd 0x120(%rcx),%ymm1,%ymm1
    3161:	00 
    3162:	c5 fe 7f 89 20 01 00 	vmovdqu %ymm1,0x120(%rcx)
    3169:	00 
    316a:	c4 e2 7d 40 8e 40 ff 	vpmulld -0xc0(%rsi),%ymm0,%ymm1
    3171:	ff ff 
    3173:	c5 f5 fe 89 40 01 00 	vpaddd 0x140(%rcx),%ymm1,%ymm1
    317a:	00 
    317b:	c5 fe 7f 89 40 01 00 	vmovdqu %ymm1,0x140(%rcx)
    3182:	00 
    3183:	c4 e2 7d 40 8e 60 ff 	vpmulld -0xa0(%rsi),%ymm0,%ymm1
    318a:	ff ff 
    318c:	c5 f5 fe 89 60 01 00 	vpaddd 0x160(%rcx),%ymm1,%ymm1
    3193:	00 
    3194:	c5 fe 7f 89 60 01 00 	vmovdqu %ymm1,0x160(%rcx)
    319b:	00 
    319c:	c4 e2 7d 40 4e 80    	vpmulld -0x80(%rsi),%ymm0,%ymm1
    31a2:	c5 f5 fe 89 80 01 00 	vpaddd 0x180(%rcx),%ymm1,%ymm1
    31a9:	00 
    31aa:	c5 fe 7f 89 80 01 00 	vmovdqu %ymm1,0x180(%rcx)
    31b1:	00 
    31b2:	c4 e2 7d 40 4e a0    	vpmulld -0x60(%rsi),%ymm0,%ymm1
    31b8:	c5 f5 fe 89 a0 01 00 	vpaddd 0x1a0(%rcx),%ymm1,%ymm1
    31bf:	00 
    31c0:	c5 fe 7f 89 a0 01 00 	vmovdqu %ymm1,0x1a0(%rcx)
    31c7:	00 
    31c8:	c4 e2 7d 40 4e c0    	vpmulld -0x40(%rsi),%ymm0,%ymm1
    31ce:	c5 f5 fe 89 c0 01 00 	vpaddd 0x1c0(%rcx),%ymm1,%ymm1
    31d5:	00 
    31d6:	c5 fe 7f 89 c0 01 00 	vmovdqu %ymm1,0x1c0(%rcx)
    31dd:	00 
    31de:	c4 e2 7d 40 46 e0    	vpmulld -0x20(%rsi),%ymm0,%ymm0
    31e4:	c5 fd fe 81 e0 01 00 	vpaddd 0x1e0(%rcx),%ymm0,%ymm0
    31eb:	00 
    31ec:	c5 fe 7f 81 e0 01 00 	vmovdqu %ymm0,0x1e0(%rcx)
    31f3:	00 
    31f4:	49 39 f3             	cmp    %rsi,%r11
    31f7:	74 4b                	je     3244 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x214>
    31f9:	4d 39 d0             	cmp    %r10,%r8
    31fc:	48 8d 46 20          	lea    0x20(%rsi),%rax
    3200:	41 0f 93 c6          	setae  %r14b
    3204:	49 83 c0 04          	add    $0x4,%r8
    3208:	48 39 c1             	cmp    %rax,%rcx
    320b:	0f 93 c2             	setae  %dl
    320e:	4c 39 ce             	cmp    %r9,%rsi
    3211:	0f 93 c0             	setae  %al
    3214:	08 c2                	or     %al,%dl
    3216:	0f 85 4f fe ff ff    	jne    306b <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x3b>
    321c:	31 c0                	xor    %eax,%eax
    321e:	66 90                	xchg   %ax,%ax
    3220:	8b 17                	mov    (%rdi),%edx
    3222:	0f af 14 86          	imul   (%rsi,%rax,4),%edx
    3226:	01 14 81             	add    %edx,(%rcx,%rax,4)
    3229:	48 ff c0             	inc    %rax
    322c:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    3232:	75 ec                	jne    3220 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x1f0>
    3234:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    323b:	48 83 c7 04          	add    $0x4,%rdi
    323f:	49 39 f3             	cmp    %rsi,%r11
    3242:	75 b5                	jne    31f9 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x1c9>
    3244:	49 83 ed 80          	sub    $0xffffffffffffff80,%r13
    3248:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    324f:	48 81 c3 00 02 00 00 	add    $0x200,%rbx
    3256:	49 81 c2 00 02 00 00 	add    $0x200,%r10
    325d:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    3264:	49 81 fd 00 40 00 00 	cmp    $0x4000,%r13
    326b:	0f 85 ec fd ff ff    	jne    305d <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x2d>
    3271:	c5 f8 77             	vzeroupper 
    3274:	5b                   	pop    %rbx
    3275:	41 5c                	pop    %r12
    3277:	41 5d                	pop    %r13
    3279:	41 5e                	pop    %r14
    327b:	5d                   	pop    %rbp
    327c:	c3                   	retq   
    327d:	0f 1f 00             	nopl   (%rax)

0000000000003280 <void jik<int>(int (*) [128], int (*) [128], int (*) [128])>:
    3280:	f3 0f 1e fa          	endbr64 
    3284:	55                   	push   %rbp
    3285:	4c 8d 9f 00 00 01 00 	lea    0x10000(%rdi),%r11
    328c:	48 89 f5             	mov    %rsi,%rbp
    328f:	53                   	push   %rbx
    3290:	49 89 d2             	mov    %rdx,%r10
    3293:	4c 8d 82 00 00 01 00 	lea    0x10000(%rdx),%r8
    329a:	31 db                	xor    %ebx,%ebx
    329c:	49 8d bb 00 00 ff ff 	lea    -0x10000(%r11),%rdi
    32a3:	49 89 e9             	mov    %rbp,%r9
    32a6:	8b 37                	mov    (%rdi),%esi
    32a8:	4c 89 d0             	mov    %r10,%rax
    32ab:	4c 89 c9             	mov    %r9,%rcx
    32ae:	66 90                	xchg   %ax,%ax
    32b0:	8b 11                	mov    (%rcx),%edx
    32b2:	48 05 00 02 00 00    	add    $0x200,%rax
    32b8:	0f af 90 00 fe ff ff 	imul   -0x200(%rax),%edx
    32bf:	48 83 c1 04          	add    $0x4,%rcx
    32c3:	01 d6                	add    %edx,%esi
    32c5:	89 37                	mov    %esi,(%rdi)
    32c7:	4c 39 c0             	cmp    %r8,%rax
    32ca:	75 e4                	jne    32b0 <void jik<int>(int (*) [128], int (*) [128], int (*) [128])+0x30>
    32cc:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    32d3:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    32da:	4c 39 df             	cmp    %r11,%rdi
    32dd:	75 c7                	jne    32a6 <void jik<int>(int (*) [128], int (*) [128], int (*) [128])+0x26>
    32df:	48 ff c3             	inc    %rbx
    32e2:	4c 8d 5f 04          	lea    0x4(%rdi),%r11
    32e6:	49 83 c2 04          	add    $0x4,%r10
    32ea:	4c 8d 40 04          	lea    0x4(%rax),%r8
    32ee:	48 81 fb 80 00 00 00 	cmp    $0x80,%rbx
    32f5:	75 a5                	jne    329c <void jik<int>(int (*) [128], int (*) [128], int (*) [128])+0x1c>
    32f7:	5b                   	pop    %rbx
    32f8:	5d                   	pop    %rbp
    32f9:	c3                   	retq   
    32fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000003300 <void jki<int>(int (*) [128], int (*) [128], int (*) [128])>:
    3300:	f3 0f 1e fa          	endbr64 
    3304:	55                   	push   %rbp
    3305:	49 89 f9             	mov    %rdi,%r9
    3308:	49 89 d3             	mov    %rdx,%r11
    330b:	53                   	push   %rbx
    330c:	48 8d bf 00 00 01 00 	lea    0x10000(%rdi),%rdi
    3313:	48 89 f3             	mov    %rsi,%rbx
    3316:	49 8d a9 00 02 00 00 	lea    0x200(%r9),%rbp
    331d:	4c 8d 96 00 02 00 00 	lea    0x200(%rsi),%r10
    3324:	49 89 d8             	mov    %rbx,%r8
    3327:	4c 89 de             	mov    %r11,%rsi
    332a:	4c 89 c1             	mov    %r8,%rcx
    332d:	4c 89 c8             	mov    %r9,%rax
    3330:	8b 11                	mov    (%rcx),%edx
    3332:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    3339:	0f af 16             	imul   (%rsi),%edx
    333c:	01 10                	add    %edx,(%rax)
    333e:	48 05 00 02 00 00    	add    $0x200,%rax
    3344:	48 39 f8             	cmp    %rdi,%rax
    3347:	75 e7                	jne    3330 <void jki<int>(int (*) [128], int (*) [128], int (*) [128])+0x30>
    3349:	49 83 c0 04          	add    $0x4,%r8
    334d:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    3354:	4d 39 d0             	cmp    %r10,%r8
    3357:	75 d1                	jne    332a <void jki<int>(int (*) [128], int (*) [128], int (*) [128])+0x2a>
    3359:	49 83 c1 04          	add    $0x4,%r9
    335d:	48 8d 78 04          	lea    0x4(%rax),%rdi
    3361:	49 83 c3 04          	add    $0x4,%r11
    3365:	49 39 e9             	cmp    %rbp,%r9
    3368:	75 ba                	jne    3324 <void jki<int>(int (*) [128], int (*) [128], int (*) [128])+0x24>
    336a:	5b                   	pop    %rbx
    336b:	5d                   	pop    %rbp
    336c:	c3                   	retq   
    336d:	0f 1f 00             	nopl   (%rax)

0000000000003370 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])>:
    3370:	f3 0f 1e fa          	endbr64 
    3374:	55                   	push   %rbp
    3375:	49 89 f0             	mov    %rsi,%r8
    3378:	49 89 fb             	mov    %rdi,%r11
    337b:	48 89 e5             	mov    %rsp,%rbp
    337e:	41 55                	push   %r13
    3380:	48 89 d6             	mov    %rdx,%rsi
    3383:	4c 8d 4a 20          	lea    0x20(%rdx),%r9
    3387:	41 54                	push   %r12
    3389:	4c 8d 97 00 00 01 00 	lea    0x10000(%rdi),%r10
    3390:	45 31 e4             	xor    %r12d,%r12d
    3393:	53                   	push   %rbx
    3394:	4c 89 c3             	mov    %r8,%rbx
    3397:	4d 89 d8             	mov    %r11,%r8
    339a:	48 89 df             	mov    %rbx,%rdi
    339d:	e9 82 01 00 00       	jmpq   3524 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x1b4>
    33a2:	84 c0                	test   %al,%al
    33a4:	0f 84 b0 01 00 00    	je     355a <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x1ea>
    33aa:	c4 e2 7d 58 07       	vpbroadcastd (%rdi),%ymm0
    33af:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    33b6:	c4 e2 7d 40 0e       	vpmulld (%rsi),%ymm0,%ymm1
    33bb:	c5 f5 fe 09          	vpaddd (%rcx),%ymm1,%ymm1
    33bf:	c5 fe 7f 09          	vmovdqu %ymm1,(%rcx)
    33c3:	c4 e2 7d 40 4e 20    	vpmulld 0x20(%rsi),%ymm0,%ymm1
    33c9:	c5 f5 fe 49 20       	vpaddd 0x20(%rcx),%ymm1,%ymm1
    33ce:	c5 fe 7f 49 20       	vmovdqu %ymm1,0x20(%rcx)
    33d3:	c4 e2 7d 40 4e 40    	vpmulld 0x40(%rsi),%ymm0,%ymm1
    33d9:	c5 f5 fe 49 40       	vpaddd 0x40(%rcx),%ymm1,%ymm1
    33de:	c5 fe 7f 49 40       	vmovdqu %ymm1,0x40(%rcx)
    33e3:	c4 e2 7d 40 4e 60    	vpmulld 0x60(%rsi),%ymm0,%ymm1
    33e9:	c5 f5 fe 49 60       	vpaddd 0x60(%rcx),%ymm1,%ymm1
    33ee:	c5 fe 7f 49 60       	vmovdqu %ymm1,0x60(%rcx)
    33f3:	c4 e2 7d 40 8e 80 00 	vpmulld 0x80(%rsi),%ymm0,%ymm1
    33fa:	00 00 
    33fc:	c5 f5 fe 89 80 00 00 	vpaddd 0x80(%rcx),%ymm1,%ymm1
    3403:	00 
    3404:	c5 fe 7f 89 80 00 00 	vmovdqu %ymm1,0x80(%rcx)
    340b:	00 
    340c:	c4 e2 7d 40 8e a0 00 	vpmulld 0xa0(%rsi),%ymm0,%ymm1
    3413:	00 00 
    3415:	c5 f5 fe 89 a0 00 00 	vpaddd 0xa0(%rcx),%ymm1,%ymm1
    341c:	00 
    341d:	c5 fe 7f 89 a0 00 00 	vmovdqu %ymm1,0xa0(%rcx)
    3424:	00 
    3425:	c4 e2 7d 40 8e c0 00 	vpmulld 0xc0(%rsi),%ymm0,%ymm1
    342c:	00 00 
    342e:	c5 f5 fe 89 c0 00 00 	vpaddd 0xc0(%rcx),%ymm1,%ymm1
    3435:	00 
    3436:	c5 fe 7f 89 c0 00 00 	vmovdqu %ymm1,0xc0(%rcx)
    343d:	00 
    343e:	c4 e2 7d 40 8e e0 00 	vpmulld 0xe0(%rsi),%ymm0,%ymm1
    3445:	00 00 
    3447:	c5 f5 fe 89 e0 00 00 	vpaddd 0xe0(%rcx),%ymm1,%ymm1
    344e:	00 
    344f:	c5 fe 7f 89 e0 00 00 	vmovdqu %ymm1,0xe0(%rcx)
    3456:	00 
    3457:	c4 e2 7d 40 8e 00 01 	vpmulld 0x100(%rsi),%ymm0,%ymm1
    345e:	00 00 
    3460:	c5 f5 fe 89 00 01 00 	vpaddd 0x100(%rcx),%ymm1,%ymm1
    3467:	00 
    3468:	c5 fe 7f 89 00 01 00 	vmovdqu %ymm1,0x100(%rcx)
    346f:	00 
    3470:	c4 e2 7d 40 8e 20 01 	vpmulld 0x120(%rsi),%ymm0,%ymm1
    3477:	00 00 
    3479:	c5 f5 fe 89 20 01 00 	vpaddd 0x120(%rcx),%ymm1,%ymm1
    3480:	00 
    3481:	c5 fe 7f 89 20 01 00 	vmovdqu %ymm1,0x120(%rcx)
    3488:	00 
    3489:	c4 e2 7d 40 8e 40 01 	vpmulld 0x140(%rsi),%ymm0,%ymm1
    3490:	00 00 
    3492:	c5 f5 fe 89 40 01 00 	vpaddd 0x140(%rcx),%ymm1,%ymm1
    3499:	00 
    349a:	c5 fe 7f 89 40 01 00 	vmovdqu %ymm1,0x140(%rcx)
    34a1:	00 
    34a2:	c4 e2 7d 40 8e 60 01 	vpmulld 0x160(%rsi),%ymm0,%ymm1
    34a9:	00 00 
    34ab:	c5 f5 fe 89 60 01 00 	vpaddd 0x160(%rcx),%ymm1,%ymm1
    34b2:	00 
    34b3:	c5 fe 7f 89 60 01 00 	vmovdqu %ymm1,0x160(%rcx)
    34ba:	00 
    34bb:	c4 e2 7d 40 8e 80 01 	vpmulld 0x180(%rsi),%ymm0,%ymm1
    34c2:	00 00 
    34c4:	c5 f5 fe 89 80 01 00 	vpaddd 0x180(%rcx),%ymm1,%ymm1
    34cb:	00 
    34cc:	c5 fe 7f 89 80 01 00 	vmovdqu %ymm1,0x180(%rcx)
    34d3:	00 
    34d4:	c4 e2 7d 40 8e a0 01 	vpmulld 0x1a0(%rsi),%ymm0,%ymm1
    34db:	00 00 
    34dd:	c5 f5 fe 89 a0 01 00 	vpaddd 0x1a0(%rcx),%ymm1,%ymm1
    34e4:	00 
    34e5:	c5 fe 7f 89 a0 01 00 	vmovdqu %ymm1,0x1a0(%rcx)
    34ec:	00 
    34ed:	c4 e2 7d 40 8e c0 01 	vpmulld 0x1c0(%rsi),%ymm0,%ymm1
    34f4:	00 00 
    34f6:	c5 f5 fe 89 c0 01 00 	vpaddd 0x1c0(%rcx),%ymm1,%ymm1
    34fd:	00 
    34fe:	c5 fe 7f 89 c0 01 00 	vmovdqu %ymm1,0x1c0(%rcx)
    3505:	00 
    3506:	c4 e2 7d 40 86 e0 01 	vpmulld 0x1e0(%rsi),%ymm0,%ymm0
    350d:	00 00 
    350f:	c5 fd fe 81 e0 01 00 	vpaddd 0x1e0(%rcx),%ymm0,%ymm0
    3516:	00 
    3517:	c5 fe 7f 81 e0 01 00 	vmovdqu %ymm0,0x1e0(%rcx)
    351e:	00 
    351f:	4d 39 c2             	cmp    %r8,%r10
    3522:	74 5c                	je     3580 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x210>
    3524:	49 8d 40 20          	lea    0x20(%r8),%rax
    3528:	48 39 c6             	cmp    %rax,%rsi
    352b:	0f 93 c0             	setae  %al
    352e:	4d 39 c8             	cmp    %r9,%r8
    3531:	0f 93 c2             	setae  %dl
    3534:	4c 89 c1             	mov    %r8,%rcx
    3537:	09 d0                	or     %edx,%eax
    3539:	48 8d 57 04          	lea    0x4(%rdi),%rdx
    353d:	49 81 c0 00 02 00 00 	add    $0x200,%r8
    3544:	48 39 d1             	cmp    %rdx,%rcx
    3547:	41 0f 93 c5          	setae  %r13b
    354b:	4c 39 c7             	cmp    %r8,%rdi
    354e:	0f 93 c2             	setae  %dl
    3551:	41 08 d5             	or     %dl,%r13b
    3554:	0f 85 48 fe ff ff    	jne    33a2 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x32>
    355a:	31 c0                	xor    %eax,%eax
    355c:	0f 1f 40 00          	nopl   0x0(%rax)
    3560:	8b 17                	mov    (%rdi),%edx
    3562:	0f af 14 86          	imul   (%rsi,%rax,4),%edx
    3566:	01 14 81             	add    %edx,(%rcx,%rax,4)
    3569:	48 ff c0             	inc    %rax
    356c:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    3572:	75 ec                	jne    3560 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x1f0>
    3574:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    357b:	4d 39 c2             	cmp    %r8,%r10
    357e:	75 a4                	jne    3524 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x1b4>
    3580:	49 ff c4             	inc    %r12
    3583:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    358a:	48 83 c3 04          	add    $0x4,%rbx
    358e:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    3595:	49 81 fc 80 00 00 00 	cmp    $0x80,%r12
    359c:	0f 85 f5 fd ff ff    	jne    3397 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x27>
    35a2:	c5 f8 77             	vzeroupper 
    35a5:	5b                   	pop    %rbx
    35a6:	41 5c                	pop    %r12
    35a8:	41 5d                	pop    %r13
    35aa:	5d                   	pop    %rbp
    35ab:	c3                   	retq   
    35ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000035b0 <void kji<int>(int (*) [128], int (*) [128], int (*) [128])>:
    35b0:	f3 0f 1e fa          	endbr64 
    35b4:	53                   	push   %rbx
    35b5:	49 89 f0             	mov    %rsi,%r8
    35b8:	49 89 d2             	mov    %rdx,%r10
    35bb:	48 8d 9e 00 02 00 00 	lea    0x200(%rsi),%rbx
    35c2:	4c 8d 9f 00 00 01 00 	lea    0x10000(%rdi),%r11
    35c9:	4c 8d 8f 00 02 01 00 	lea    0x10200(%rdi),%r9
    35d0:	4c 89 de             	mov    %r11,%rsi
    35d3:	4c 89 d7             	mov    %r10,%rdi
    35d6:	48 8d 86 00 00 ff ff 	lea    -0x10000(%rsi),%rax
    35dd:	4c 89 c1             	mov    %r8,%rcx
    35e0:	8b 11                	mov    (%rcx),%edx
    35e2:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    35e9:	0f af 17             	imul   (%rdi),%edx
    35ec:	01 10                	add    %edx,(%rax)
    35ee:	48 05 00 02 00 00    	add    $0x200,%rax
    35f4:	48 39 c6             	cmp    %rax,%rsi
    35f7:	75 e7                	jne    35e0 <void kji<int>(int (*) [128], int (*) [128], int (*) [128])+0x30>
    35f9:	48 83 c6 04          	add    $0x4,%rsi
    35fd:	48 83 c7 04          	add    $0x4,%rdi
    3601:	4c 39 ce             	cmp    %r9,%rsi
    3604:	75 d0                	jne    35d6 <void kji<int>(int (*) [128], int (*) [128], int (*) [128])+0x26>
    3606:	49 83 c0 04          	add    $0x4,%r8
    360a:	49 81 c2 00 02 00 00 	add    $0x200,%r10
    3611:	49 39 d8             	cmp    %rbx,%r8
    3614:	75 ba                	jne    35d0 <void kji<int>(int (*) [128], int (*) [128], int (*) [128])+0x20>
    3616:	5b                   	pop    %rbx
    3617:	c3                   	retq   
    3618:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    361f:	00 

0000000000003620 <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])>:
    3620:	f3 0f 1e fa          	endbr64 
    3624:	55                   	push   %rbp
    3625:	49 89 f1             	mov    %rsi,%r9
    3628:	49 89 fb             	mov    %rdi,%r11
    362b:	53                   	push   %rbx
    362c:	48 8d aa 00 00 02 00 	lea    0x20000(%rdx),%rbp
    3633:	31 db                	xor    %ebx,%ebx
    3635:	4c 8d 92 00 04 02 00 	lea    0x20400(%rdx),%r10
    363c:	48 89 ef             	mov    %rbp,%rdi
    363f:	4d 89 d8             	mov    %r11,%r8
    3642:	49 8b 30             	mov    (%r8),%rsi
    3645:	48 8d 87 00 00 fe ff 	lea    -0x20000(%rdi),%rax
    364c:	4c 89 c9             	mov    %r9,%rcx
    364f:	90                   	nop
    3650:	48 8b 11             	mov    (%rcx),%rdx
    3653:	48 05 00 04 00 00    	add    $0x400,%rax
    3659:	48 0f af 90 00 fc ff 	imul   -0x400(%rax),%rdx
    3660:	ff 
    3661:	48 83 c1 08          	add    $0x8,%rcx
    3665:	48 01 d6             	add    %rdx,%rsi
    3668:	49 89 30             	mov    %rsi,(%r8)
    366b:	48 39 c7             	cmp    %rax,%rdi
    366e:	75 e0                	jne    3650 <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])+0x30>
    3670:	48 83 c7 08          	add    $0x8,%rdi
    3674:	49 83 c0 08          	add    $0x8,%r8
    3678:	49 39 fa             	cmp    %rdi,%r10
    367b:	75 c5                	jne    3642 <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])+0x22>
    367d:	48 83 eb 80          	sub    $0xffffffffffffff80,%rbx
    3681:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    3688:	49 81 c3 00 04 00 00 	add    $0x400,%r11
    368f:	48 81 fb 00 40 00 00 	cmp    $0x4000,%rbx
    3696:	75 a4                	jne    363c <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])+0x1c>
    3698:	5b                   	pop    %rbx
    3699:	5d                   	pop    %rbp
    369a:	c3                   	retq   
    369b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000036a0 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])>:
    36a0:	f3 0f 1e fa          	endbr64 
    36a4:	55                   	push   %rbp
    36a5:	4c 8d 97 00 04 00 00 	lea    0x400(%rdi),%r10
    36ac:	4c 8d 4f 20          	lea    0x20(%rdi),%r9
    36b0:	48 89 e5             	mov    %rsp,%rbp
    36b3:	41 56                	push   %r14
    36b5:	41 55                	push   %r13
    36b7:	45 31 ed             	xor    %r13d,%r13d
    36ba:	41 54                	push   %r12
    36bc:	49 89 d4             	mov    %rdx,%r12
    36bf:	4d 8d 9c 24 00 00 02 	lea    0x20000(%r12),%r11
    36c6:	00 
    36c7:	53                   	push   %rbx
    36c8:	48 89 fa             	mov    %rdi,%rdx
    36cb:	48 89 f3             	mov    %rsi,%rbx
    36ce:	4c 89 e6             	mov    %r12,%rsi
    36d1:	48 89 df             	mov    %rbx,%rdi
    36d4:	49 89 d8             	mov    %rbx,%r8
    36d7:	4d 39 d0             	cmp    %r10,%r8
    36da:	48 8d 46 20          	lea    0x20(%rsi),%rax
    36de:	41 0f 93 c6          	setae  %r14b
    36e2:	49 83 c0 08          	add    $0x8,%r8
    36e6:	48 39 c2             	cmp    %rax,%rdx
    36e9:	0f 93 c1             	setae  %cl
    36ec:	4c 39 ce             	cmp    %r9,%rsi
    36ef:	0f 93 c0             	setae  %al
    36f2:	08 c1                	or     %al,%cl
    36f4:	0f 84 a4 00 00 00    	je     379e <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0xfe>
    36fa:	4c 39 c2             	cmp    %r8,%rdx
    36fd:	0f 93 c0             	setae  %al
    3700:	44 08 f0             	or     %r14b,%al
    3703:	0f 84 95 00 00 00    	je     379e <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0xfe>
    3709:	c4 e2 7d 59 1f       	vpbroadcastq (%rdi),%ymm3
    370e:	31 c0                	xor    %eax,%eax
    3710:	c5 dd 73 d3 20       	vpsrlq $0x20,%ymm3,%ymm4
    3715:	0f 1f 00             	nopl   (%rax)
    3718:	c5 fe 6f 14 06       	vmovdqu (%rsi,%rax,1),%ymm2
    371d:	c5 fd 73 d2 20       	vpsrlq $0x20,%ymm2,%ymm0
    3722:	c5 ed f4 cb          	vpmuludq %ymm3,%ymm2,%ymm1
    3726:	c5 fd f4 c3          	vpmuludq %ymm3,%ymm0,%ymm0
    372a:	c5 dd f4 d2          	vpmuludq %ymm2,%ymm4,%ymm2
    372e:	c5 fd d4 c2          	vpaddq %ymm2,%ymm0,%ymm0
    3732:	c5 fd 73 f0 20       	vpsllq $0x20,%ymm0,%ymm0
    3737:	c5 f5 d4 c0          	vpaddq %ymm0,%ymm1,%ymm0
    373b:	c5 fd d4 04 02       	vpaddq (%rdx,%rax,1),%ymm0,%ymm0
    3740:	c5 fe 7f 04 02       	vmovdqu %ymm0,(%rdx,%rax,1)
    3745:	48 83 c0 20          	add    $0x20,%rax
    3749:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    374f:	75 c7                	jne    3718 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0x78>
    3751:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    3758:	48 83 c7 08          	add    $0x8,%rdi
    375c:	4c 39 de             	cmp    %r11,%rsi
    375f:	0f 85 72 ff ff ff    	jne    36d7 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0x37>
    3765:	49 83 ed 80          	sub    $0xffffffffffffff80,%r13
    3769:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    3770:	48 81 c3 00 04 00 00 	add    $0x400,%rbx
    3777:	49 81 c2 00 04 00 00 	add    $0x400,%r10
    377e:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    3785:	49 81 fd 00 40 00 00 	cmp    $0x4000,%r13
    378c:	0f 85 3c ff ff ff    	jne    36ce <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0x2e>
    3792:	c5 f8 77             	vzeroupper 
    3795:	5b                   	pop    %rbx
    3796:	41 5c                	pop    %r12
    3798:	41 5d                	pop    %r13
    379a:	41 5e                	pop    %r14
    379c:	5d                   	pop    %rbp
    379d:	c3                   	retq   
    379e:	31 c0                	xor    %eax,%eax
    37a0:	48 8b 0f             	mov    (%rdi),%rcx
    37a3:	48 0f af 0c c6       	imul   (%rsi,%rax,8),%rcx
    37a8:	48 01 0c c2          	add    %rcx,(%rdx,%rax,8)
    37ac:	48 ff c0             	inc    %rax
    37af:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    37b5:	75 e9                	jne    37a0 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0x100>
    37b7:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    37be:	48 83 c7 08          	add    $0x8,%rdi
    37c2:	4c 39 de             	cmp    %r11,%rsi
    37c5:	0f 85 0c ff ff ff    	jne    36d7 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0x37>
    37cb:	eb 98                	jmp    3765 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0xc5>
    37cd:	0f 1f 00             	nopl   (%rax)

00000000000037d0 <void jik<long>(long (*) [128], long (*) [128], long (*) [128])>:
    37d0:	f3 0f 1e fa          	endbr64 
    37d4:	55                   	push   %rbp
    37d5:	4c 8d 9f 00 00 02 00 	lea    0x20000(%rdi),%r11
    37dc:	48 89 f5             	mov    %rsi,%rbp
    37df:	53                   	push   %rbx
    37e0:	49 89 d2             	mov    %rdx,%r10
    37e3:	4c 8d 82 00 00 02 00 	lea    0x20000(%rdx),%r8
    37ea:	31 db                	xor    %ebx,%ebx
    37ec:	49 8d bb 00 00 fe ff 	lea    -0x20000(%r11),%rdi
    37f3:	49 89 e9             	mov    %rbp,%r9
    37f6:	48 8b 37             	mov    (%rdi),%rsi
    37f9:	4c 89 d0             	mov    %r10,%rax
    37fc:	4c 89 c9             	mov    %r9,%rcx
    37ff:	90                   	nop
    3800:	48 8b 11             	mov    (%rcx),%rdx
    3803:	48 05 00 04 00 00    	add    $0x400,%rax
    3809:	48 0f af 90 00 fc ff 	imul   -0x400(%rax),%rdx
    3810:	ff 
    3811:	48 83 c1 08          	add    $0x8,%rcx
    3815:	48 01 d6             	add    %rdx,%rsi
    3818:	48 89 37             	mov    %rsi,(%rdi)
    381b:	4c 39 c0             	cmp    %r8,%rax
    381e:	75 e0                	jne    3800 <void jik<long>(long (*) [128], long (*) [128], long (*) [128])+0x30>
    3820:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    3827:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    382e:	4c 39 df             	cmp    %r11,%rdi
    3831:	75 c3                	jne    37f6 <void jik<long>(long (*) [128], long (*) [128], long (*) [128])+0x26>
    3833:	48 ff c3             	inc    %rbx
    3836:	4c 8d 5f 08          	lea    0x8(%rdi),%r11
    383a:	49 83 c2 08          	add    $0x8,%r10
    383e:	4c 8d 40 08          	lea    0x8(%rax),%r8
    3842:	48 81 fb 80 00 00 00 	cmp    $0x80,%rbx
    3849:	75 a1                	jne    37ec <void jik<long>(long (*) [128], long (*) [128], long (*) [128])+0x1c>
    384b:	5b                   	pop    %rbx
    384c:	5d                   	pop    %rbp
    384d:	c3                   	retq   
    384e:	66 90                	xchg   %ax,%ax

0000000000003850 <void jki<long>(long (*) [128], long (*) [128], long (*) [128])>:
    3850:	f3 0f 1e fa          	endbr64 
    3854:	55                   	push   %rbp
    3855:	49 89 f9             	mov    %rdi,%r9
    3858:	49 89 d3             	mov    %rdx,%r11
    385b:	53                   	push   %rbx
    385c:	48 8d bf 00 00 02 00 	lea    0x20000(%rdi),%rdi
    3863:	48 89 f3             	mov    %rsi,%rbx
    3866:	49 8d a9 00 04 00 00 	lea    0x400(%r9),%rbp
    386d:	4c 8d 96 00 04 00 00 	lea    0x400(%rsi),%r10
    3874:	49 89 d8             	mov    %rbx,%r8
    3877:	4c 89 de             	mov    %r11,%rsi
    387a:	4c 89 c1             	mov    %r8,%rcx
    387d:	4c 89 c8             	mov    %r9,%rax
    3880:	48 8b 11             	mov    (%rcx),%rdx
    3883:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    388a:	48 0f af 16          	imul   (%rsi),%rdx
    388e:	48 01 10             	add    %rdx,(%rax)
    3891:	48 05 00 04 00 00    	add    $0x400,%rax
    3897:	48 39 f8             	cmp    %rdi,%rax
    389a:	75 e4                	jne    3880 <void jki<long>(long (*) [128], long (*) [128], long (*) [128])+0x30>
    389c:	49 83 c0 08          	add    $0x8,%r8
    38a0:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    38a7:	4d 39 d0             	cmp    %r10,%r8
    38aa:	75 ce                	jne    387a <void jki<long>(long (*) [128], long (*) [128], long (*) [128])+0x2a>
    38ac:	49 83 c1 08          	add    $0x8,%r9
    38b0:	48 8d 78 08          	lea    0x8(%rax),%rdi
    38b4:	49 83 c3 08          	add    $0x8,%r11
    38b8:	49 39 e9             	cmp    %rbp,%r9
    38bb:	75 b7                	jne    3874 <void jki<long>(long (*) [128], long (*) [128], long (*) [128])+0x24>
    38bd:	5b                   	pop    %rbx
    38be:	5d                   	pop    %rbp
    38bf:	c3                   	retq   

00000000000038c0 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])>:
    38c0:	f3 0f 1e fa          	endbr64 
    38c4:	55                   	push   %rbp
    38c5:	49 89 f0             	mov    %rsi,%r8
    38c8:	49 89 fb             	mov    %rdi,%r11
    38cb:	48 89 e5             	mov    %rsp,%rbp
    38ce:	41 55                	push   %r13
    38d0:	48 89 d6             	mov    %rdx,%rsi
    38d3:	4c 8d 4a 20          	lea    0x20(%rdx),%r9
    38d7:	41 54                	push   %r12
    38d9:	4c 8d 97 00 00 02 00 	lea    0x20000(%rdi),%r10
    38e0:	45 31 e4             	xor    %r12d,%r12d
    38e3:	53                   	push   %rbx
    38e4:	4c 89 c3             	mov    %r8,%rbx
    38e7:	4d 89 d8             	mov    %r11,%r8
    38ea:	48 89 df             	mov    %rbx,%rdi
    38ed:	49 8d 40 20          	lea    0x20(%r8),%rax
    38f1:	48 39 c6             	cmp    %rax,%rsi
    38f4:	0f 93 c0             	setae  %al
    38f7:	4d 39 c8             	cmp    %r9,%r8
    38fa:	0f 93 c1             	setae  %cl
    38fd:	4c 89 c2             	mov    %r8,%rdx
    3900:	09 c8                	or     %ecx,%eax
    3902:	48 8d 4f 08          	lea    0x8(%rdi),%rcx
    3906:	49 81 c0 00 04 00 00 	add    $0x400,%r8
    390d:	48 39 ca             	cmp    %rcx,%rdx
    3910:	41 0f 93 c5          	setae  %r13b
    3914:	4c 39 c7             	cmp    %r8,%rdi
    3917:	0f 93 c1             	setae  %cl
    391a:	41 08 cd             	or     %cl,%r13b
    391d:	0f 84 92 00 00 00    	je     39b5 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0xf5>
    3923:	84 c0                	test   %al,%al
    3925:	0f 84 8a 00 00 00    	je     39b5 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0xf5>
    392b:	c4 e2 7d 59 1f       	vpbroadcastq (%rdi),%ymm3
    3930:	31 c0                	xor    %eax,%eax
    3932:	c5 dd 73 d3 20       	vpsrlq $0x20,%ymm3,%ymm4
    3937:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    393e:	00 00 
    3940:	c5 fe 6f 14 06       	vmovdqu (%rsi,%rax,1),%ymm2
    3945:	c5 fd 73 d2 20       	vpsrlq $0x20,%ymm2,%ymm0
    394a:	c5 ed f4 cb          	vpmuludq %ymm3,%ymm2,%ymm1
    394e:	c5 fd f4 c3          	vpmuludq %ymm3,%ymm0,%ymm0
    3952:	c5 dd f4 d2          	vpmuludq %ymm2,%ymm4,%ymm2
    3956:	c5 fd d4 c2          	vpaddq %ymm2,%ymm0,%ymm0
    395a:	c5 fd 73 f0 20       	vpsllq $0x20,%ymm0,%ymm0
    395f:	c5 f5 d4 c0          	vpaddq %ymm0,%ymm1,%ymm0
    3963:	c5 fd d4 04 02       	vpaddq (%rdx,%rax,1),%ymm0,%ymm0
    3968:	c5 fe 7f 04 02       	vmovdqu %ymm0,(%rdx,%rax,1)
    396d:	48 83 c0 20          	add    $0x20,%rax
    3971:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    3977:	75 c7                	jne    3940 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0x80>
    3979:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    3980:	4d 39 d0             	cmp    %r10,%r8
    3983:	0f 85 64 ff ff ff    	jne    38ed <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0x2d>
    3989:	49 ff c4             	inc    %r12
    398c:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    3993:	48 83 c3 08          	add    $0x8,%rbx
    3997:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    399e:	49 81 fc 80 00 00 00 	cmp    $0x80,%r12
    39a5:	0f 85 3c ff ff ff    	jne    38e7 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0x27>
    39ab:	c5 f8 77             	vzeroupper 
    39ae:	5b                   	pop    %rbx
    39af:	41 5c                	pop    %r12
    39b1:	41 5d                	pop    %r13
    39b3:	5d                   	pop    %rbp
    39b4:	c3                   	retq   
    39b5:	31 c0                	xor    %eax,%eax
    39b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    39be:	00 00 
    39c0:	48 8b 0f             	mov    (%rdi),%rcx
    39c3:	48 0f af 0c c6       	imul   (%rsi,%rax,8),%rcx
    39c8:	48 01 0c c2          	add    %rcx,(%rdx,%rax,8)
    39cc:	48 ff c0             	inc    %rax
    39cf:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    39d5:	75 e9                	jne    39c0 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0x100>
    39d7:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    39de:	4d 39 d0             	cmp    %r10,%r8
    39e1:	0f 85 06 ff ff ff    	jne    38ed <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0x2d>
    39e7:	eb a0                	jmp    3989 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0xc9>
    39e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000039f0 <void kji<long>(long (*) [128], long (*) [128], long (*) [128])>:
    39f0:	f3 0f 1e fa          	endbr64 
    39f4:	53                   	push   %rbx
    39f5:	49 89 f0             	mov    %rsi,%r8
    39f8:	49 89 d2             	mov    %rdx,%r10
    39fb:	48 8d 9e 00 04 00 00 	lea    0x400(%rsi),%rbx
    3a02:	4c 8d 9f 00 00 02 00 	lea    0x20000(%rdi),%r11
    3a09:	4c 8d 8f 00 04 02 00 	lea    0x20400(%rdi),%r9
    3a10:	4c 89 de             	mov    %r11,%rsi
    3a13:	4c 89 d7             	mov    %r10,%rdi
    3a16:	48 8d 86 00 00 fe ff 	lea    -0x20000(%rsi),%rax
    3a1d:	4c 89 c1             	mov    %r8,%rcx
    3a20:	48 8b 11             	mov    (%rcx),%rdx
    3a23:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    3a2a:	48 0f af 17          	imul   (%rdi),%rdx
    3a2e:	48 01 10             	add    %rdx,(%rax)
    3a31:	48 05 00 04 00 00    	add    $0x400,%rax
    3a37:	48 39 c6             	cmp    %rax,%rsi
    3a3a:	75 e4                	jne    3a20 <void kji<long>(long (*) [128], long (*) [128], long (*) [128])+0x30>
    3a3c:	48 83 c6 08          	add    $0x8,%rsi
    3a40:	48 83 c7 08          	add    $0x8,%rdi
    3a44:	4c 39 ce             	cmp    %r9,%rsi
    3a47:	75 cd                	jne    3a16 <void kji<long>(long (*) [128], long (*) [128], long (*) [128])+0x26>
    3a49:	49 83 c0 08          	add    $0x8,%r8
    3a4d:	49 81 c2 00 04 00 00 	add    $0x400,%r10
    3a54:	49 39 d8             	cmp    %rbx,%r8
    3a57:	75 b7                	jne    3a10 <void kji<long>(long (*) [128], long (*) [128], long (*) [128])+0x20>
    3a59:	5b                   	pop    %rbx
    3a5a:	c3                   	retq   
    3a5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003a60 <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    3a60:	f3 0f 1e fa          	endbr64 
    3a64:	41 57                	push   %r15
    3a66:	4c 8d ba 00 00 04 00 	lea    0x40000(%rdx),%r15
    3a6d:	41 56                	push   %r14
    3a6f:	45 31 f6             	xor    %r14d,%r14d
    3a72:	41 55                	push   %r13
    3a74:	49 89 fd             	mov    %rdi,%r13
    3a77:	41 54                	push   %r12
    3a79:	4c 8d a2 00 08 04 00 	lea    0x40800(%rdx),%r12
    3a80:	55                   	push   %rbp
    3a81:	48 89 f5             	mov    %rsi,%rbp
    3a84:	53                   	push   %rbx
    3a85:	4c 89 ff             	mov    %r15,%rdi
    3a88:	4c 89 eb             	mov    %r13,%rbx
    3a8b:	4c 8b 13             	mov    (%rbx),%r10
    3a8e:	4c 8b 5b 08          	mov    0x8(%rbx),%r11
    3a92:	48 8d 87 00 00 fc ff 	lea    -0x40000(%rdi),%rax
    3a99:	48 89 ee             	mov    %rbp,%rsi
    3a9c:	0f 1f 40 00          	nopl   0x0(%rax)
    3aa0:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
    3aa4:	48 8b 10             	mov    (%rax),%rdx
    3aa7:	48 0f af d1          	imul   %rcx,%rdx
    3aab:	48 8b 48 08          	mov    0x8(%rax),%rcx
    3aaf:	48 0f af 0e          	imul   (%rsi),%rcx
    3ab3:	48 01 d1             	add    %rdx,%rcx
    3ab6:	48 8b 10             	mov    (%rax),%rdx
    3ab9:	c4 62 bb f6 0e       	mulx   (%rsi),%r8,%r9
    3abe:	49 01 c9             	add    %rcx,%r9
    3ac1:	4d 01 c2             	add    %r8,%r10
    3ac4:	4d 11 cb             	adc    %r9,%r11
    3ac7:	48 05 00 08 00 00    	add    $0x800,%rax
    3acd:	4c 89 13             	mov    %r10,(%rbx)
    3ad0:	4c 89 5b 08          	mov    %r11,0x8(%rbx)
    3ad4:	48 83 c6 10          	add    $0x10,%rsi
    3ad8:	48 39 c7             	cmp    %rax,%rdi
    3adb:	75 c3                	jne    3aa0 <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x40>
    3add:	48 83 c7 10          	add    $0x10,%rdi
    3ae1:	48 83 c3 10          	add    $0x10,%rbx
    3ae5:	49 39 fc             	cmp    %rdi,%r12
    3ae8:	75 a1                	jne    3a8b <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x2b>
    3aea:	49 83 ee 80          	sub    $0xffffffffffffff80,%r14
    3aee:	48 81 c5 00 08 00 00 	add    $0x800,%rbp
    3af5:	49 81 c5 00 08 00 00 	add    $0x800,%r13
    3afc:	49 81 fe 00 40 00 00 	cmp    $0x4000,%r14
    3b03:	75 80                	jne    3a85 <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x25>
    3b05:	5b                   	pop    %rbx
    3b06:	5d                   	pop    %rbp
    3b07:	41 5c                	pop    %r12
    3b09:	41 5d                	pop    %r13
    3b0b:	41 5e                	pop    %r14
    3b0d:	41 5f                	pop    %r15
    3b0f:	c3                   	retq   

0000000000003b10 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    3b10:	f3 0f 1e fa          	endbr64 
    3b14:	55                   	push   %rbp
    3b15:	4c 8d 9e 00 08 00 00 	lea    0x800(%rsi),%r11
    3b1c:	49 89 fa             	mov    %rdi,%r10
    3b1f:	53                   	push   %rbx
    3b20:	48 8d ae 00 08 04 00 	lea    0x40800(%rsi),%rbp
    3b27:	48 89 d3             	mov    %rdx,%rbx
    3b2a:	4d 8d 83 00 f8 ff ff 	lea    -0x800(%r11),%r8
    3b31:	49 89 d9             	mov    %rbx,%r9
    3b34:	31 c0                	xor    %eax,%eax
    3b36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3b3d:	00 00 00 
    3b40:	49 8b 48 08          	mov    0x8(%r8),%rcx
    3b44:	49 8b 14 01          	mov    (%r9,%rax,1),%rdx
    3b48:	48 0f af d1          	imul   %rcx,%rdx
    3b4c:	49 8b 4c 01 08       	mov    0x8(%r9,%rax,1),%rcx
    3b51:	49 0f af 08          	imul   (%r8),%rcx
    3b55:	48 01 d1             	add    %rdx,%rcx
    3b58:	49 8b 14 01          	mov    (%r9,%rax,1),%rdx
    3b5c:	c4 c2 cb f6 38       	mulx   (%r8),%rsi,%rdi
    3b61:	48 01 cf             	add    %rcx,%rdi
    3b64:	49 01 34 02          	add    %rsi,(%r10,%rax,1)
    3b68:	49 11 7c 02 08       	adc    %rdi,0x8(%r10,%rax,1)
    3b6d:	48 83 c0 10          	add    $0x10,%rax
    3b71:	48 3d 00 08 00 00    	cmp    $0x800,%rax
    3b77:	75 c7                	jne    3b40 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x30>
    3b79:	49 83 c0 10          	add    $0x10,%r8
    3b7d:	49 81 c1 00 08 00 00 	add    $0x800,%r9
    3b84:	4d 39 c3             	cmp    %r8,%r11
    3b87:	75 ab                	jne    3b34 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x24>
    3b89:	49 81 c3 00 08 00 00 	add    $0x800,%r11
    3b90:	49 81 c2 00 08 00 00 	add    $0x800,%r10
    3b97:	4c 39 dd             	cmp    %r11,%rbp
    3b9a:	75 8e                	jne    3b2a <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x1a>
    3b9c:	5b                   	pop    %rbx
    3b9d:	5d                   	pop    %rbp
    3b9e:	c3                   	retq   
    3b9f:	90                   	nop

0000000000003ba0 <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    3ba0:	f3 0f 1e fa          	endbr64 
    3ba4:	41 57                	push   %r15
    3ba6:	45 31 ff             	xor    %r15d,%r15d
    3ba9:	41 56                	push   %r14
    3bab:	49 89 f6             	mov    %rsi,%r14
    3bae:	41 55                	push   %r13
    3bb0:	4c 8d af 00 00 04 00 	lea    0x40000(%rdi),%r13
    3bb7:	41 54                	push   %r12
    3bb9:	49 89 d4             	mov    %rdx,%r12
    3bbc:	55                   	push   %rbp
    3bbd:	53                   	push   %rbx
    3bbe:	48 8d 9a 00 00 04 00 	lea    0x40000(%rdx),%rbx
    3bc5:	49 8d bd 00 00 fc ff 	lea    -0x40000(%r13),%rdi
    3bcc:	4c 89 f5             	mov    %r14,%rbp
    3bcf:	4c 8b 17             	mov    (%rdi),%r10
    3bd2:	4c 8b 5f 08          	mov    0x8(%rdi),%r11
    3bd6:	4c 89 e0             	mov    %r12,%rax
    3bd9:	48 89 ee             	mov    %rbp,%rsi
    3bdc:	0f 1f 40 00          	nopl   0x0(%rax)
    3be0:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
    3be4:	48 8b 10             	mov    (%rax),%rdx
    3be7:	48 0f af d1          	imul   %rcx,%rdx
    3beb:	48 8b 48 08          	mov    0x8(%rax),%rcx
    3bef:	48 0f af 0e          	imul   (%rsi),%rcx
    3bf3:	48 01 d1             	add    %rdx,%rcx
    3bf6:	48 8b 10             	mov    (%rax),%rdx
    3bf9:	c4 62 bb f6 0e       	mulx   (%rsi),%r8,%r9
    3bfe:	49 01 c9             	add    %rcx,%r9
    3c01:	4d 01 c2             	add    %r8,%r10
    3c04:	4d 11 cb             	adc    %r9,%r11
    3c07:	48 05 00 08 00 00    	add    $0x800,%rax
    3c0d:	4c 89 17             	mov    %r10,(%rdi)
    3c10:	4c 89 5f 08          	mov    %r11,0x8(%rdi)
    3c14:	48 83 c6 10          	add    $0x10,%rsi
    3c18:	48 39 d8             	cmp    %rbx,%rax
    3c1b:	75 c3                	jne    3be0 <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x40>
    3c1d:	48 81 c7 00 08 00 00 	add    $0x800,%rdi
    3c24:	48 81 c5 00 08 00 00 	add    $0x800,%rbp
    3c2b:	4c 39 ef             	cmp    %r13,%rdi
    3c2e:	75 9f                	jne    3bcf <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x2f>
    3c30:	49 ff c7             	inc    %r15
    3c33:	4c 8d 6f 10          	lea    0x10(%rdi),%r13
    3c37:	49 83 c4 10          	add    $0x10,%r12
    3c3b:	48 8d 58 10          	lea    0x10(%rax),%rbx
    3c3f:	49 81 ff 80 00 00 00 	cmp    $0x80,%r15
    3c46:	0f 85 79 ff ff ff    	jne    3bc5 <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x25>
    3c4c:	5b                   	pop    %rbx
    3c4d:	5d                   	pop    %rbp
    3c4e:	41 5c                	pop    %r12
    3c50:	41 5d                	pop    %r13
    3c52:	41 5e                	pop    %r14
    3c54:	41 5f                	pop    %r15
    3c56:	c3                   	retq   
    3c57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    3c5e:	00 00 

0000000000003c60 <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    3c60:	f3 0f 1e fa          	endbr64 
    3c64:	41 57                	push   %r15
    3c66:	4c 8d 97 00 00 04 00 	lea    0x40000(%rdi),%r10
    3c6d:	41 56                	push   %r14
    3c6f:	4c 8d b7 00 08 00 00 	lea    0x800(%rdi),%r14
    3c76:	41 55                	push   %r13
    3c78:	49 89 f5             	mov    %rsi,%r13
    3c7b:	41 54                	push   %r12
    3c7d:	49 89 d4             	mov    %rdx,%r12
    3c80:	55                   	push   %rbp
    3c81:	48 8d ae 00 08 00 00 	lea    0x800(%rsi),%rbp
    3c88:	53                   	push   %rbx
    3c89:	48 89 fb             	mov    %rdi,%rbx
    3c8c:	4d 89 eb             	mov    %r13,%r11
    3c8f:	4c 89 e7             	mov    %r12,%rdi
    3c92:	4c 89 de             	mov    %r11,%rsi
    3c95:	48 89 d9             	mov    %rbx,%rcx
    3c98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    3c9f:	00 
    3ca0:	48 8b 56 08          	mov    0x8(%rsi),%rdx
    3ca4:	48 8b 07             	mov    (%rdi),%rax
    3ca7:	48 0f af c2          	imul   %rdx,%rax
    3cab:	48 8b 57 08          	mov    0x8(%rdi),%rdx
    3caf:	48 0f af 16          	imul   (%rsi),%rdx
    3cb3:	4c 8d 3c 02          	lea    (%rdx,%rax,1),%r15
    3cb7:	48 8b 07             	mov    (%rdi),%rax
    3cba:	48 89 c2             	mov    %rax,%rdx
    3cbd:	c4 62 bb f6 0e       	mulx   (%rsi),%r8,%r9
    3cc2:	4d 01 f9             	add    %r15,%r9
    3cc5:	4c 01 01             	add    %r8,(%rcx)
    3cc8:	4c 11 49 08          	adc    %r9,0x8(%rcx)
    3ccc:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    3cd3:	48 81 c6 00 08 00 00 	add    $0x800,%rsi
    3cda:	4c 39 d1             	cmp    %r10,%rcx
    3cdd:	75 c1                	jne    3ca0 <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x40>
    3cdf:	49 83 c3 10          	add    $0x10,%r11
    3ce3:	48 81 c7 00 08 00 00 	add    $0x800,%rdi
    3cea:	49 39 eb             	cmp    %rbp,%r11
    3ced:	75 a3                	jne    3c92 <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x32>
    3cef:	48 83 c3 10          	add    $0x10,%rbx
    3cf3:	4c 8d 51 10          	lea    0x10(%rcx),%r10
    3cf7:	49 83 c4 10          	add    $0x10,%r12
    3cfb:	4c 39 f3             	cmp    %r14,%rbx
    3cfe:	75 8c                	jne    3c8c <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x2c>
    3d00:	5b                   	pop    %rbx
    3d01:	5d                   	pop    %rbp
    3d02:	41 5c                	pop    %r12
    3d04:	41 5d                	pop    %r13
    3d06:	41 5e                	pop    %r14
    3d08:	41 5f                	pop    %r15
    3d0a:	c3                   	retq   
    3d0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003d10 <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    3d10:	f3 0f 1e fa          	endbr64 
    3d14:	55                   	push   %rbp
    3d15:	49 89 fb             	mov    %rdi,%r11
    3d18:	49 89 d1             	mov    %rdx,%r9
    3d1b:	53                   	push   %rbx
    3d1c:	48 8d ae 00 08 04 00 	lea    0x40800(%rsi),%rbp
    3d23:	48 8d 9e 00 00 04 00 	lea    0x40000(%rsi),%rbx
    3d2a:	4d 89 da             	mov    %r11,%r10
    3d2d:	4c 8d 83 00 00 fc ff 	lea    -0x40000(%rbx),%r8
    3d34:	31 c0                	xor    %eax,%eax
    3d36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3d3d:	00 00 00 
    3d40:	49 8b 48 08          	mov    0x8(%r8),%rcx
    3d44:	49 8b 14 01          	mov    (%r9,%rax,1),%rdx
    3d48:	48 0f af d1          	imul   %rcx,%rdx
    3d4c:	49 8b 4c 01 08       	mov    0x8(%r9,%rax,1),%rcx
    3d51:	49 0f af 08          	imul   (%r8),%rcx
    3d55:	48 01 d1             	add    %rdx,%rcx
    3d58:	49 8b 14 01          	mov    (%r9,%rax,1),%rdx
    3d5c:	c4 c2 cb f6 38       	mulx   (%r8),%rsi,%rdi
    3d61:	48 01 cf             	add    %rcx,%rdi
    3d64:	49 01 34 02          	add    %rsi,(%r10,%rax,1)
    3d68:	49 11 7c 02 08       	adc    %rdi,0x8(%r10,%rax,1)
    3d6d:	48 83 c0 10          	add    $0x10,%rax
    3d71:	48 3d 00 08 00 00    	cmp    $0x800,%rax
    3d77:	75 c7                	jne    3d40 <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x30>
    3d79:	49 81 c0 00 08 00 00 	add    $0x800,%r8
    3d80:	49 81 c2 00 08 00 00 	add    $0x800,%r10
    3d87:	4c 39 c3             	cmp    %r8,%rbx
    3d8a:	75 a8                	jne    3d34 <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x24>
    3d8c:	48 83 c3 10          	add    $0x10,%rbx
    3d90:	49 81 c1 00 08 00 00 	add    $0x800,%r9
    3d97:	48 39 eb             	cmp    %rbp,%rbx
    3d9a:	75 8e                	jne    3d2a <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x1a>
    3d9c:	5b                   	pop    %rbx
    3d9d:	5d                   	pop    %rbp
    3d9e:	c3                   	retq   
    3d9f:	90                   	nop

0000000000003da0 <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    3da0:	f3 0f 1e fa          	endbr64 
    3da4:	41 56                	push   %r14
    3da6:	49 89 f3             	mov    %rsi,%r11
    3da9:	41 55                	push   %r13
    3dab:	4c 8d ae 00 08 00 00 	lea    0x800(%rsi),%r13
    3db2:	41 54                	push   %r12
    3db4:	4c 8d a7 00 00 04 00 	lea    0x40000(%rdi),%r12
    3dbb:	55                   	push   %rbp
    3dbc:	48 89 d5             	mov    %rdx,%rbp
    3dbf:	53                   	push   %rbx
    3dc0:	48 8d 9f 00 08 04 00 	lea    0x40800(%rdi),%rbx
    3dc7:	4d 89 e2             	mov    %r12,%r10
    3dca:	48 89 ef             	mov    %rbp,%rdi
    3dcd:	49 8d b2 00 00 fc ff 	lea    -0x40000(%r10),%rsi
    3dd4:	4c 89 d9             	mov    %r11,%rcx
    3dd7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    3dde:	00 00 
    3de0:	48 8b 51 08          	mov    0x8(%rcx),%rdx
    3de4:	48 8b 07             	mov    (%rdi),%rax
    3de7:	48 0f af c2          	imul   %rdx,%rax
    3deb:	48 8b 57 08          	mov    0x8(%rdi),%rdx
    3def:	48 0f af 11          	imul   (%rcx),%rdx
    3df3:	4c 8d 34 02          	lea    (%rdx,%rax,1),%r14
    3df7:	48 8b 07             	mov    (%rdi),%rax
    3dfa:	48 89 c2             	mov    %rax,%rdx
    3dfd:	c4 62 bb f6 09       	mulx   (%rcx),%r8,%r9
    3e02:	4d 01 f1             	add    %r14,%r9
    3e05:	4c 01 06             	add    %r8,(%rsi)
    3e08:	4c 11 4e 08          	adc    %r9,0x8(%rsi)
    3e0c:	48 81 c6 00 08 00 00 	add    $0x800,%rsi
    3e13:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    3e1a:	49 39 f2             	cmp    %rsi,%r10
    3e1d:	75 c1                	jne    3de0 <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x40>
    3e1f:	49 83 c2 10          	add    $0x10,%r10
    3e23:	48 83 c7 10          	add    $0x10,%rdi
    3e27:	49 39 da             	cmp    %rbx,%r10
    3e2a:	75 a1                	jne    3dcd <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x2d>
    3e2c:	49 83 c3 10          	add    $0x10,%r11
    3e30:	48 81 c5 00 08 00 00 	add    $0x800,%rbp
    3e37:	4d 39 eb             	cmp    %r13,%r11
    3e3a:	75 8b                	jne    3dc7 <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x27>
    3e3c:	5b                   	pop    %rbx
    3e3d:	5d                   	pop    %rbp
    3e3e:	41 5c                	pop    %r12
    3e40:	41 5d                	pop    %r13
    3e42:	41 5e                	pop    %r14
    3e44:	c3                   	retq   
    3e45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3e4c:	00 00 00 
    3e4f:	90                   	nop

0000000000003e50 <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])>:
    3e50:	f3 0f 1e fa          	endbr64 
    3e54:	49 89 f9             	mov    %rdi,%r9
    3e57:	45 31 d2             	xor    %r10d,%r10d
    3e5a:	48 89 f7             	mov    %rsi,%rdi
    3e5d:	4c 8d 9a 00 00 01 00 	lea    0x10000(%rdx),%r11
    3e64:	4c 8d 82 00 02 01 00 	lea    0x10200(%rdx),%r8
    3e6b:	4c 89 d9             	mov    %r11,%rcx
    3e6e:	4c 89 ce             	mov    %r9,%rsi
    3e71:	c5 fa 10 06          	vmovss (%rsi),%xmm0
    3e75:	48 8d 81 00 00 ff ff 	lea    -0x10000(%rcx),%rax
    3e7c:	48 89 fa             	mov    %rdi,%rdx
    3e7f:	90                   	nop
    3e80:	c5 fa 10 0a          	vmovss (%rdx),%xmm1
    3e84:	48 05 00 02 00 00    	add    $0x200,%rax
    3e8a:	c4 e2 71 b9 80 00 fe 	vfmadd231ss -0x200(%rax),%xmm1,%xmm0
    3e91:	ff ff 
    3e93:	48 83 c2 04          	add    $0x4,%rdx
    3e97:	c5 fa 11 06          	vmovss %xmm0,(%rsi)
    3e9b:	48 39 c1             	cmp    %rax,%rcx
    3e9e:	75 e0                	jne    3e80 <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])+0x30>
    3ea0:	48 83 c1 04          	add    $0x4,%rcx
    3ea4:	48 83 c6 04          	add    $0x4,%rsi
    3ea8:	49 39 c8             	cmp    %rcx,%r8
    3eab:	75 c4                	jne    3e71 <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])+0x21>
    3ead:	49 83 ea 80          	sub    $0xffffffffffffff80,%r10
    3eb1:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    3eb8:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    3ebf:	49 81 fa 00 40 00 00 	cmp    $0x4000,%r10
    3ec6:	75 a3                	jne    3e6b <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])+0x1b>
    3ec8:	c3                   	retq   
    3ec9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000003ed0 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])>:
    3ed0:	f3 0f 1e fa          	endbr64 
    3ed4:	55                   	push   %rbp
    3ed5:	4c 8d 97 00 02 00 00 	lea    0x200(%rdi),%r10
    3edc:	4c 8d 4f 20          	lea    0x20(%rdi),%r9
    3ee0:	48 89 e5             	mov    %rsp,%rbp
    3ee3:	41 56                	push   %r14
    3ee5:	41 55                	push   %r13
    3ee7:	45 31 ed             	xor    %r13d,%r13d
    3eea:	41 54                	push   %r12
    3eec:	49 89 d4             	mov    %rdx,%r12
    3eef:	4d 8d 9c 24 00 00 01 	lea    0x10000(%r12),%r11
    3ef6:	00 
    3ef7:	53                   	push   %rbx
    3ef8:	48 89 fa             	mov    %rdi,%rdx
    3efb:	48 89 f3             	mov    %rsi,%rbx
    3efe:	4c 89 e1             	mov    %r12,%rcx
    3f01:	48 89 de             	mov    %rbx,%rsi
    3f04:	48 89 df             	mov    %rbx,%rdi
    3f07:	e9 8a 01 00 00       	jmpq   4096 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x1c6>
    3f0c:	48 39 fa             	cmp    %rdi,%rdx
    3f0f:	0f 93 c0             	setae  %al
    3f12:	44 08 f0             	or     %r14b,%al
    3f15:	0f 84 a0 01 00 00    	je     40bb <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x1eb>
    3f1b:	c4 e2 7d 18 06       	vbroadcastss (%rsi),%ymm0
    3f20:	c5 fc 10 09          	vmovups (%rcx),%ymm1
    3f24:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    3f2b:	c4 e2 7d a8 0a       	vfmadd213ps (%rdx),%ymm0,%ymm1
    3f30:	48 83 c6 04          	add    $0x4,%rsi
    3f34:	c5 fc 11 0a          	vmovups %ymm1,(%rdx)
    3f38:	c5 fc 10 89 20 fe ff 	vmovups -0x1e0(%rcx),%ymm1
    3f3f:	ff 
    3f40:	c4 e2 7d a8 4a 20    	vfmadd213ps 0x20(%rdx),%ymm0,%ymm1
    3f46:	c5 fc 11 4a 20       	vmovups %ymm1,0x20(%rdx)
    3f4b:	c5 fc 10 89 40 fe ff 	vmovups -0x1c0(%rcx),%ymm1
    3f52:	ff 
    3f53:	c4 e2 7d a8 4a 40    	vfmadd213ps 0x40(%rdx),%ymm0,%ymm1
    3f59:	c5 fc 11 4a 40       	vmovups %ymm1,0x40(%rdx)
    3f5e:	c5 fc 10 89 60 fe ff 	vmovups -0x1a0(%rcx),%ymm1
    3f65:	ff 
    3f66:	c4 e2 7d a8 4a 60    	vfmadd213ps 0x60(%rdx),%ymm0,%ymm1
    3f6c:	c5 fc 11 4a 60       	vmovups %ymm1,0x60(%rdx)
    3f71:	c5 fc 10 89 80 fe ff 	vmovups -0x180(%rcx),%ymm1
    3f78:	ff 
    3f79:	c4 e2 7d a8 8a 80 00 	vfmadd213ps 0x80(%rdx),%ymm0,%ymm1
    3f80:	00 00 
    3f82:	c5 fc 11 8a 80 00 00 	vmovups %ymm1,0x80(%rdx)
    3f89:	00 
    3f8a:	c5 fc 10 89 a0 fe ff 	vmovups -0x160(%rcx),%ymm1
    3f91:	ff 
    3f92:	c4 e2 7d a8 8a a0 00 	vfmadd213ps 0xa0(%rdx),%ymm0,%ymm1
    3f99:	00 00 
    3f9b:	c5 fc 11 8a a0 00 00 	vmovups %ymm1,0xa0(%rdx)
    3fa2:	00 
    3fa3:	c5 fc 10 89 c0 fe ff 	vmovups -0x140(%rcx),%ymm1
    3faa:	ff 
    3fab:	c4 e2 7d a8 8a c0 00 	vfmadd213ps 0xc0(%rdx),%ymm0,%ymm1
    3fb2:	00 00 
    3fb4:	c5 fc 11 8a c0 00 00 	vmovups %ymm1,0xc0(%rdx)
    3fbb:	00 
    3fbc:	c5 fc 10 89 e0 fe ff 	vmovups -0x120(%rcx),%ymm1
    3fc3:	ff 
    3fc4:	c4 e2 7d a8 8a e0 00 	vfmadd213ps 0xe0(%rdx),%ymm0,%ymm1
    3fcb:	00 00 
    3fcd:	c5 fc 11 8a e0 00 00 	vmovups %ymm1,0xe0(%rdx)
    3fd4:	00 
    3fd5:	c5 fc 10 89 00 ff ff 	vmovups -0x100(%rcx),%ymm1
    3fdc:	ff 
    3fdd:	c4 e2 7d a8 8a 00 01 	vfmadd213ps 0x100(%rdx),%ymm0,%ymm1
    3fe4:	00 00 
    3fe6:	c5 fc 11 8a 00 01 00 	vmovups %ymm1,0x100(%rdx)
    3fed:	00 
    3fee:	c5 fc 10 89 20 ff ff 	vmovups -0xe0(%rcx),%ymm1
    3ff5:	ff 
    3ff6:	c4 e2 7d a8 8a 20 01 	vfmadd213ps 0x120(%rdx),%ymm0,%ymm1
    3ffd:	00 00 
    3fff:	c5 fc 11 8a 20 01 00 	vmovups %ymm1,0x120(%rdx)
    4006:	00 
    4007:	c5 fc 10 89 40 ff ff 	vmovups -0xc0(%rcx),%ymm1
    400e:	ff 
    400f:	c4 e2 7d a8 8a 40 01 	vfmadd213ps 0x140(%rdx),%ymm0,%ymm1
    4016:	00 00 
    4018:	c5 fc 10 9a e0 01 00 	vmovups 0x1e0(%rdx),%ymm3
    401f:	00 
    4020:	c5 fc 11 8a 40 01 00 	vmovups %ymm1,0x140(%rdx)
    4027:	00 
    4028:	c5 fc 10 89 60 ff ff 	vmovups -0xa0(%rcx),%ymm1
    402f:	ff 
    4030:	c4 e2 7d a8 8a 60 01 	vfmadd213ps 0x160(%rdx),%ymm0,%ymm1
    4037:	00 00 
    4039:	c5 fc 11 8a 60 01 00 	vmovups %ymm1,0x160(%rdx)
    4040:	00 
    4041:	c5 fc 10 49 80       	vmovups -0x80(%rcx),%ymm1
    4046:	c4 e2 7d a8 8a 80 01 	vfmadd213ps 0x180(%rdx),%ymm0,%ymm1
    404d:	00 00 
    404f:	c5 fc 11 8a 80 01 00 	vmovups %ymm1,0x180(%rdx)
    4056:	00 
    4057:	c5 fc 10 49 a0       	vmovups -0x60(%rcx),%ymm1
    405c:	c4 e2 7d a8 8a a0 01 	vfmadd213ps 0x1a0(%rdx),%ymm0,%ymm1
    4063:	00 00 
    4065:	c5 fc 11 8a a0 01 00 	vmovups %ymm1,0x1a0(%rdx)
    406c:	00 
    406d:	c5 fc 10 49 c0       	vmovups -0x40(%rcx),%ymm1
    4072:	c4 e2 7d a8 8a c0 01 	vfmadd213ps 0x1c0(%rdx),%ymm0,%ymm1
    4079:	00 00 
    407b:	c5 fc 11 8a c0 01 00 	vmovups %ymm1,0x1c0(%rdx)
    4082:	00 
    4083:	c4 e2 65 98 41 e0    	vfmadd132ps -0x20(%rcx),%ymm3,%ymm0
    4089:	c5 fc 11 82 e0 01 00 	vmovups %ymm0,0x1e0(%rdx)
    4090:	00 
    4091:	49 39 cb             	cmp    %rcx,%r11
    4094:	74 59                	je     40ef <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x21f>
    4096:	4c 39 d7             	cmp    %r10,%rdi
    4099:	48 8d 41 20          	lea    0x20(%rcx),%rax
    409d:	41 0f 93 c6          	setae  %r14b
    40a1:	48 83 c7 04          	add    $0x4,%rdi
    40a5:	48 39 c2             	cmp    %rax,%rdx
    40a8:	41 0f 93 c0          	setae  %r8b
    40ac:	4c 39 c9             	cmp    %r9,%rcx
    40af:	0f 93 c0             	setae  %al
    40b2:	41 08 c0             	or     %al,%r8b
    40b5:	0f 85 51 fe ff ff    	jne    3f0c <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x3c>
    40bb:	31 c0                	xor    %eax,%eax
    40bd:	0f 1f 00             	nopl   (%rax)
    40c0:	c5 fa 10 14 82       	vmovss (%rdx,%rax,4),%xmm2
    40c5:	c5 fa 10 06          	vmovss (%rsi),%xmm0
    40c9:	c4 e2 69 99 04 81    	vfmadd132ss (%rcx,%rax,4),%xmm2,%xmm0
    40cf:	c5 fa 11 04 82       	vmovss %xmm0,(%rdx,%rax,4)
    40d4:	48 ff c0             	inc    %rax
    40d7:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    40dd:	75 e1                	jne    40c0 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x1f0>
    40df:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    40e6:	48 83 c6 04          	add    $0x4,%rsi
    40ea:	49 39 cb             	cmp    %rcx,%r11
    40ed:	75 a7                	jne    4096 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x1c6>
    40ef:	49 83 ed 80          	sub    $0xffffffffffffff80,%r13
    40f3:	48 81 c2 00 02 00 00 	add    $0x200,%rdx
    40fa:	48 81 c3 00 02 00 00 	add    $0x200,%rbx
    4101:	49 81 c2 00 02 00 00 	add    $0x200,%r10
    4108:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    410f:	49 81 fd 00 40 00 00 	cmp    $0x4000,%r13
    4116:	0f 85 e2 fd ff ff    	jne    3efe <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x2e>
    411c:	c5 f8 77             	vzeroupper 
    411f:	5b                   	pop    %rbx
    4120:	41 5c                	pop    %r12
    4122:	41 5d                	pop    %r13
    4124:	41 5e                	pop    %r14
    4126:	5d                   	pop    %rbp
    4127:	c3                   	retq   
    4128:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    412f:	00 

0000000000004130 <void jik<float>(float (*) [128], float (*) [128], float (*) [128])>:
    4130:	f3 0f 1e fa          	endbr64 
    4134:	49 89 f3             	mov    %rsi,%r11
    4137:	4c 8d 8f 00 00 01 00 	lea    0x10000(%rdi),%r9
    413e:	49 89 d0             	mov    %rdx,%r8
    4141:	48 8d b2 00 00 01 00 	lea    0x10000(%rdx),%rsi
    4148:	45 31 d2             	xor    %r10d,%r10d
    414b:	49 8d 89 00 00 ff ff 	lea    -0x10000(%r9),%rcx
    4152:	4c 89 df             	mov    %r11,%rdi
    4155:	c5 fa 10 01          	vmovss (%rcx),%xmm0
    4159:	4c 89 c0             	mov    %r8,%rax
    415c:	48 89 fa             	mov    %rdi,%rdx
    415f:	90                   	nop
    4160:	c5 fa 10 0a          	vmovss (%rdx),%xmm1
    4164:	48 05 00 02 00 00    	add    $0x200,%rax
    416a:	c4 e2 71 b9 80 00 fe 	vfmadd231ss -0x200(%rax),%xmm1,%xmm0
    4171:	ff ff 
    4173:	48 83 c2 04          	add    $0x4,%rdx
    4177:	c5 fa 11 01          	vmovss %xmm0,(%rcx)
    417b:	48 39 f0             	cmp    %rsi,%rax
    417e:	75 e0                	jne    4160 <void jik<float>(float (*) [128], float (*) [128], float (*) [128])+0x30>
    4180:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    4187:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    418e:	4c 39 c9             	cmp    %r9,%rcx
    4191:	75 c2                	jne    4155 <void jik<float>(float (*) [128], float (*) [128], float (*) [128])+0x25>
    4193:	49 ff c2             	inc    %r10
    4196:	4c 8d 49 04          	lea    0x4(%rcx),%r9
    419a:	49 83 c0 04          	add    $0x4,%r8
    419e:	48 8d 70 04          	lea    0x4(%rax),%rsi
    41a2:	49 81 fa 80 00 00 00 	cmp    $0x80,%r10
    41a9:	75 a0                	jne    414b <void jik<float>(float (*) [128], float (*) [128], float (*) [128])+0x1b>
    41ab:	c3                   	retq   
    41ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000041b0 <void jki<float>(float (*) [128], float (*) [128], float (*) [128])>:
    41b0:	f3 0f 1e fa          	endbr64 
    41b4:	49 89 f3             	mov    %rsi,%r11
    41b7:	53                   	push   %rbx
    41b8:	49 89 f8             	mov    %rdi,%r8
    41bb:	48 8d b7 00 00 01 00 	lea    0x10000(%rdi),%rsi
    41c2:	49 89 d2             	mov    %rdx,%r10
    41c5:	48 8d 9f 00 02 00 00 	lea    0x200(%rdi),%rbx
    41cc:	4d 8d 8b 00 02 00 00 	lea    0x200(%r11),%r9
    41d3:	4c 89 df             	mov    %r11,%rdi
    41d6:	4c 89 d1             	mov    %r10,%rcx
    41d9:	48 89 fa             	mov    %rdi,%rdx
    41dc:	4c 89 c0             	mov    %r8,%rax
    41df:	90                   	nop
    41e0:	c5 fa 10 02          	vmovss (%rdx),%xmm0
    41e4:	c5 fa 10 08          	vmovss (%rax),%xmm1
    41e8:	48 05 00 02 00 00    	add    $0x200,%rax
    41ee:	c4 e2 71 99 01       	vfmadd132ss (%rcx),%xmm1,%xmm0
    41f3:	48 81 c2 00 02 00 00 	add    $0x200,%rdx
    41fa:	c5 fa 11 80 00 fe ff 	vmovss %xmm0,-0x200(%rax)
    4201:	ff 
    4202:	48 39 f0             	cmp    %rsi,%rax
    4205:	75 d9                	jne    41e0 <void jki<float>(float (*) [128], float (*) [128], float (*) [128])+0x30>
    4207:	48 83 c7 04          	add    $0x4,%rdi
    420b:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    4212:	4c 39 cf             	cmp    %r9,%rdi
    4215:	75 c2                	jne    41d9 <void jki<float>(float (*) [128], float (*) [128], float (*) [128])+0x29>
    4217:	49 83 c0 04          	add    $0x4,%r8
    421b:	48 8d 70 04          	lea    0x4(%rax),%rsi
    421f:	49 83 c2 04          	add    $0x4,%r10
    4223:	49 39 d8             	cmp    %rbx,%r8
    4226:	75 ab                	jne    41d3 <void jki<float>(float (*) [128], float (*) [128], float (*) [128])+0x23>
    4228:	5b                   	pop    %rbx
    4229:	c3                   	retq   
    422a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000004230 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])>:
    4230:	f3 0f 1e fa          	endbr64 
    4234:	55                   	push   %rbp
    4235:	48 89 d1             	mov    %rdx,%rcx
    4238:	4c 8d 52 20          	lea    0x20(%rdx),%r10
    423c:	48 89 e5             	mov    %rsp,%rbp
    423f:	41 55                	push   %r13
    4241:	4c 8d 9f 00 00 01 00 	lea    0x10000(%rdi),%r11
    4248:	45 31 ed             	xor    %r13d,%r13d
    424b:	41 54                	push   %r12
    424d:	49 89 f4             	mov    %rsi,%r12
    4250:	53                   	push   %rbx
    4251:	48 89 fb             	mov    %rdi,%rbx
    4254:	48 89 df             	mov    %rbx,%rdi
    4257:	4c 89 e6             	mov    %r12,%rsi
    425a:	e9 82 01 00 00       	jmpq   43e1 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x1b1>
    425f:	84 c0                	test   %al,%al
    4261:	0f 84 b3 01 00 00    	je     441a <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x1ea>
    4267:	c4 e2 7d 18 06       	vbroadcastss (%rsi),%ymm0
    426c:	c5 fc 10 09          	vmovups (%rcx),%ymm1
    4270:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    4277:	c4 e2 7d a8 0a       	vfmadd213ps (%rdx),%ymm0,%ymm1
    427c:	c5 fc 11 0a          	vmovups %ymm1,(%rdx)
    4280:	c5 fc 10 49 20       	vmovups 0x20(%rcx),%ymm1
    4285:	c4 e2 7d a8 4a 20    	vfmadd213ps 0x20(%rdx),%ymm0,%ymm1
    428b:	c5 fc 11 4a 20       	vmovups %ymm1,0x20(%rdx)
    4290:	c5 fc 10 49 40       	vmovups 0x40(%rcx),%ymm1
    4295:	c4 e2 7d a8 4a 40    	vfmadd213ps 0x40(%rdx),%ymm0,%ymm1
    429b:	c5 fc 11 4a 40       	vmovups %ymm1,0x40(%rdx)
    42a0:	c5 fc 10 49 60       	vmovups 0x60(%rcx),%ymm1
    42a5:	c4 e2 7d a8 4a 60    	vfmadd213ps 0x60(%rdx),%ymm0,%ymm1
    42ab:	c5 fc 11 4a 60       	vmovups %ymm1,0x60(%rdx)
    42b0:	c5 fc 10 89 80 00 00 	vmovups 0x80(%rcx),%ymm1
    42b7:	00 
    42b8:	c4 e2 7d a8 8a 80 00 	vfmadd213ps 0x80(%rdx),%ymm0,%ymm1
    42bf:	00 00 
    42c1:	c5 fc 11 8a 80 00 00 	vmovups %ymm1,0x80(%rdx)
    42c8:	00 
    42c9:	c5 fc 10 89 a0 00 00 	vmovups 0xa0(%rcx),%ymm1
    42d0:	00 
    42d1:	c4 e2 7d a8 8a a0 00 	vfmadd213ps 0xa0(%rdx),%ymm0,%ymm1
    42d8:	00 00 
    42da:	c5 fc 11 8a a0 00 00 	vmovups %ymm1,0xa0(%rdx)
    42e1:	00 
    42e2:	c5 fc 10 89 c0 00 00 	vmovups 0xc0(%rcx),%ymm1
    42e9:	00 
    42ea:	c4 e2 7d a8 8a c0 00 	vfmadd213ps 0xc0(%rdx),%ymm0,%ymm1
    42f1:	00 00 
    42f3:	c5 fc 11 8a c0 00 00 	vmovups %ymm1,0xc0(%rdx)
    42fa:	00 
    42fb:	c5 fc 10 89 e0 00 00 	vmovups 0xe0(%rcx),%ymm1
    4302:	00 
    4303:	c4 e2 7d a8 8a e0 00 	vfmadd213ps 0xe0(%rdx),%ymm0,%ymm1
    430a:	00 00 
    430c:	c5 fc 11 8a e0 00 00 	vmovups %ymm1,0xe0(%rdx)
    4313:	00 
    4314:	c5 fc 10 89 00 01 00 	vmovups 0x100(%rcx),%ymm1
    431b:	00 
    431c:	c4 e2 7d a8 8a 00 01 	vfmadd213ps 0x100(%rdx),%ymm0,%ymm1
    4323:	00 00 
    4325:	c5 fc 11 8a 00 01 00 	vmovups %ymm1,0x100(%rdx)
    432c:	00 
    432d:	c5 fc 10 89 20 01 00 	vmovups 0x120(%rcx),%ymm1
    4334:	00 
    4335:	c4 e2 7d a8 8a 20 01 	vfmadd213ps 0x120(%rdx),%ymm0,%ymm1
    433c:	00 00 
    433e:	c5 fc 11 8a 20 01 00 	vmovups %ymm1,0x120(%rdx)
    4345:	00 
    4346:	c5 fc 10 89 40 01 00 	vmovups 0x140(%rcx),%ymm1
    434d:	00 
    434e:	c4 e2 7d a8 8a 40 01 	vfmadd213ps 0x140(%rdx),%ymm0,%ymm1
    4355:	00 00 
    4357:	c5 fc 10 9a e0 01 00 	vmovups 0x1e0(%rdx),%ymm3
    435e:	00 
    435f:	c5 fc 11 8a 40 01 00 	vmovups %ymm1,0x140(%rdx)
    4366:	00 
    4367:	c5 fc 10 89 60 01 00 	vmovups 0x160(%rcx),%ymm1
    436e:	00 
    436f:	c4 e2 7d a8 8a 60 01 	vfmadd213ps 0x160(%rdx),%ymm0,%ymm1
    4376:	00 00 
    4378:	c5 fc 11 8a 60 01 00 	vmovups %ymm1,0x160(%rdx)
    437f:	00 
    4380:	c5 fc 10 89 80 01 00 	vmovups 0x180(%rcx),%ymm1
    4387:	00 
    4388:	c4 e2 7d a8 8a 80 01 	vfmadd213ps 0x180(%rdx),%ymm0,%ymm1
    438f:	00 00 
    4391:	c5 fc 11 8a 80 01 00 	vmovups %ymm1,0x180(%rdx)
    4398:	00 
    4399:	c5 fc 10 89 a0 01 00 	vmovups 0x1a0(%rcx),%ymm1
    43a0:	00 
    43a1:	c4 e2 7d a8 8a a0 01 	vfmadd213ps 0x1a0(%rdx),%ymm0,%ymm1
    43a8:	00 00 
    43aa:	c5 fc 11 8a a0 01 00 	vmovups %ymm1,0x1a0(%rdx)
    43b1:	00 
    43b2:	c5 fc 10 89 c0 01 00 	vmovups 0x1c0(%rcx),%ymm1
    43b9:	00 
    43ba:	c4 e2 7d a8 8a c0 01 	vfmadd213ps 0x1c0(%rdx),%ymm0,%ymm1
    43c1:	00 00 
    43c3:	c5 fc 11 8a c0 01 00 	vmovups %ymm1,0x1c0(%rdx)
    43ca:	00 
    43cb:	c4 e2 65 98 81 e0 01 	vfmadd132ps 0x1e0(%rcx),%ymm3,%ymm0
    43d2:	00 00 
    43d4:	c5 fc 11 82 e0 01 00 	vmovups %ymm0,0x1e0(%rdx)
    43db:	00 
    43dc:	49 39 fb             	cmp    %rdi,%r11
    43df:	74 6a                	je     444b <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x21b>
    43e1:	48 8d 47 20          	lea    0x20(%rdi),%rax
    43e5:	48 39 c1             	cmp    %rax,%rcx
    43e8:	0f 93 c0             	setae  %al
    43eb:	4c 39 d7             	cmp    %r10,%rdi
    43ee:	41 0f 93 c0          	setae  %r8b
    43f2:	48 89 fa             	mov    %rdi,%rdx
    43f5:	44 09 c0             	or     %r8d,%eax
    43f8:	4c 8d 46 04          	lea    0x4(%rsi),%r8
    43fc:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    4403:	4c 39 c2             	cmp    %r8,%rdx
    4406:	41 0f 93 c1          	setae  %r9b
    440a:	48 39 fe             	cmp    %rdi,%rsi
    440d:	41 0f 93 c0          	setae  %r8b
    4411:	45 08 c1             	or     %r8b,%r9b
    4414:	0f 85 45 fe ff ff    	jne    425f <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x2f>
    441a:	31 c0                	xor    %eax,%eax
    441c:	0f 1f 40 00          	nopl   0x0(%rax)
    4420:	c5 fa 10 14 82       	vmovss (%rdx,%rax,4),%xmm2
    4425:	c5 fa 10 06          	vmovss (%rsi),%xmm0
    4429:	c4 e2 69 99 04 81    	vfmadd132ss (%rcx,%rax,4),%xmm2,%xmm0
    442f:	c5 fa 11 04 82       	vmovss %xmm0,(%rdx,%rax,4)
    4434:	48 ff c0             	inc    %rax
    4437:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    443d:	75 e1                	jne    4420 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x1f0>
    443f:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    4446:	49 39 fb             	cmp    %rdi,%r11
    4449:	75 96                	jne    43e1 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x1b1>
    444b:	49 ff c5             	inc    %r13
    444e:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    4455:	49 83 c4 04          	add    $0x4,%r12
    4459:	49 81 c2 00 02 00 00 	add    $0x200,%r10
    4460:	49 81 fd 80 00 00 00 	cmp    $0x80,%r13
    4467:	0f 85 e7 fd ff ff    	jne    4254 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x24>
    446d:	c5 f8 77             	vzeroupper 
    4470:	5b                   	pop    %rbx
    4471:	41 5c                	pop    %r12
    4473:	41 5d                	pop    %r13
    4475:	5d                   	pop    %rbp
    4476:	c3                   	retq   
    4477:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    447e:	00 00 

0000000000004480 <void kji<float>(float (*) [128], float (*) [128], float (*) [128])>:
    4480:	f3 0f 1e fa          	endbr64 
    4484:	48 89 f8             	mov    %rdi,%rax
    4487:	49 89 d1             	mov    %rdx,%r9
    448a:	48 89 f7             	mov    %rsi,%rdi
    448d:	4c 8d 9e 00 02 00 00 	lea    0x200(%rsi),%r11
    4494:	4c 8d 90 00 00 01 00 	lea    0x10000(%rax),%r10
    449b:	4c 8d 80 00 02 01 00 	lea    0x10200(%rax),%r8
    44a2:	4c 89 d1             	mov    %r10,%rcx
    44a5:	4c 89 ce             	mov    %r9,%rsi
    44a8:	48 8d 81 00 00 ff ff 	lea    -0x10000(%rcx),%rax
    44af:	48 89 fa             	mov    %rdi,%rdx
    44b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    44b8:	c5 fa 10 02          	vmovss (%rdx),%xmm0
    44bc:	c5 fa 10 08          	vmovss (%rax),%xmm1
    44c0:	48 05 00 02 00 00    	add    $0x200,%rax
    44c6:	c4 e2 71 99 06       	vfmadd132ss (%rsi),%xmm1,%xmm0
    44cb:	48 81 c2 00 02 00 00 	add    $0x200,%rdx
    44d2:	c5 fa 11 80 00 fe ff 	vmovss %xmm0,-0x200(%rax)
    44d9:	ff 
    44da:	48 39 c1             	cmp    %rax,%rcx
    44dd:	75 d9                	jne    44b8 <void kji<float>(float (*) [128], float (*) [128], float (*) [128])+0x38>
    44df:	48 83 c1 04          	add    $0x4,%rcx
    44e3:	48 83 c6 04          	add    $0x4,%rsi
    44e7:	4c 39 c1             	cmp    %r8,%rcx
    44ea:	75 bc                	jne    44a8 <void kji<float>(float (*) [128], float (*) [128], float (*) [128])+0x28>
    44ec:	48 83 c7 04          	add    $0x4,%rdi
    44f0:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    44f7:	4c 39 df             	cmp    %r11,%rdi
    44fa:	75 a6                	jne    44a2 <void kji<float>(float (*) [128], float (*) [128], float (*) [128])+0x22>
    44fc:	c3                   	retq   
    44fd:	0f 1f 00             	nopl   (%rax)

0000000000004500 <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])>:
    4500:	f3 0f 1e fa          	endbr64 
    4504:	49 89 f9             	mov    %rdi,%r9
    4507:	45 31 d2             	xor    %r10d,%r10d
    450a:	48 89 f7             	mov    %rsi,%rdi
    450d:	4c 8d 9a 00 00 02 00 	lea    0x20000(%rdx),%r11
    4514:	4c 8d 82 00 04 02 00 	lea    0x20400(%rdx),%r8
    451b:	4c 89 d9             	mov    %r11,%rcx
    451e:	4c 89 ce             	mov    %r9,%rsi
    4521:	c5 fb 10 06          	vmovsd (%rsi),%xmm0
    4525:	48 8d 81 00 00 fe ff 	lea    -0x20000(%rcx),%rax
    452c:	48 89 fa             	mov    %rdi,%rdx
    452f:	90                   	nop
    4530:	c5 fb 10 0a          	vmovsd (%rdx),%xmm1
    4534:	48 05 00 04 00 00    	add    $0x400,%rax
    453a:	c4 e2 f1 b9 80 00 fc 	vfmadd231sd -0x400(%rax),%xmm1,%xmm0
    4541:	ff ff 
    4543:	48 83 c2 08          	add    $0x8,%rdx
    4547:	c5 fb 11 06          	vmovsd %xmm0,(%rsi)
    454b:	48 39 c1             	cmp    %rax,%rcx
    454e:	75 e0                	jne    4530 <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])+0x30>
    4550:	48 83 c1 08          	add    $0x8,%rcx
    4554:	48 83 c6 08          	add    $0x8,%rsi
    4558:	49 39 c8             	cmp    %rcx,%r8
    455b:	75 c4                	jne    4521 <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])+0x21>
    455d:	49 83 ea 80          	sub    $0xffffffffffffff80,%r10
    4561:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    4568:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    456f:	49 81 fa 00 40 00 00 	cmp    $0x4000,%r10
    4576:	75 a3                	jne    451b <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])+0x1b>
    4578:	c3                   	retq   
    4579:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000004580 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])>:
    4580:	f3 0f 1e fa          	endbr64 
    4584:	55                   	push   %rbp
    4585:	4c 8d 97 00 04 00 00 	lea    0x400(%rdi),%r10
    458c:	4c 8d 4f 20          	lea    0x20(%rdi),%r9
    4590:	48 89 e5             	mov    %rsp,%rbp
    4593:	41 56                	push   %r14
    4595:	41 55                	push   %r13
    4597:	45 31 ed             	xor    %r13d,%r13d
    459a:	41 54                	push   %r12
    459c:	49 89 d4             	mov    %rdx,%r12
    459f:	4d 8d 9c 24 00 00 02 	lea    0x20000(%r12),%r11
    45a6:	00 
    45a7:	53                   	push   %rbx
    45a8:	48 89 fa             	mov    %rdi,%rdx
    45ab:	48 89 f3             	mov    %rsi,%rbx
    45ae:	4c 89 e1             	mov    %r12,%rcx
    45b1:	48 89 de             	mov    %rbx,%rsi
    45b4:	48 89 df             	mov    %rbx,%rdi
    45b7:	4c 39 d7             	cmp    %r10,%rdi
    45ba:	48 8d 41 20          	lea    0x20(%rcx),%rax
    45be:	41 0f 93 c6          	setae  %r14b
    45c2:	48 83 c7 08          	add    $0x8,%rdi
    45c6:	48 39 c2             	cmp    %rax,%rdx
    45c9:	41 0f 93 c0          	setae  %r8b
    45cd:	4c 39 c9             	cmp    %r9,%rcx
    45d0:	0f 93 c0             	setae  %al
    45d3:	41 08 c0             	or     %al,%r8b
    45d6:	74 7d                	je     4655 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0xd5>
    45d8:	48 39 fa             	cmp    %rdi,%rdx
    45db:	0f 93 c0             	setae  %al
    45de:	44 08 f0             	or     %r14b,%al
    45e1:	74 72                	je     4655 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0xd5>
    45e3:	c4 e2 7d 19 0e       	vbroadcastsd (%rsi),%ymm1
    45e8:	31 c0                	xor    %eax,%eax
    45ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    45f0:	c5 fd 10 04 01       	vmovupd (%rcx,%rax,1),%ymm0
    45f5:	c4 e2 f5 a8 04 02    	vfmadd213pd (%rdx,%rax,1),%ymm1,%ymm0
    45fb:	c5 fd 11 04 02       	vmovupd %ymm0,(%rdx,%rax,1)
    4600:	48 83 c0 20          	add    $0x20,%rax
    4604:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    460a:	75 e4                	jne    45f0 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0x70>
    460c:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    4613:	48 83 c6 08          	add    $0x8,%rsi
    4617:	4c 39 d9             	cmp    %r11,%rcx
    461a:	75 9b                	jne    45b7 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0x37>
    461c:	49 83 ed 80          	sub    $0xffffffffffffff80,%r13
    4620:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    4627:	48 81 c3 00 04 00 00 	add    $0x400,%rbx
    462e:	49 81 c2 00 04 00 00 	add    $0x400,%r10
    4635:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    463c:	49 81 fd 00 40 00 00 	cmp    $0x4000,%r13
    4643:	0f 85 65 ff ff ff    	jne    45ae <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0x2e>
    4649:	c5 f8 77             	vzeroupper 
    464c:	5b                   	pop    %rbx
    464d:	41 5c                	pop    %r12
    464f:	41 5d                	pop    %r13
    4651:	41 5e                	pop    %r14
    4653:	5d                   	pop    %rbp
    4654:	c3                   	retq   
    4655:	31 c0                	xor    %eax,%eax
    4657:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    465e:	00 00 
    4660:	c5 fb 10 14 c2       	vmovsd (%rdx,%rax,8),%xmm2
    4665:	c5 fb 10 06          	vmovsd (%rsi),%xmm0
    4669:	c4 e2 e9 99 04 c1    	vfmadd132sd (%rcx,%rax,8),%xmm2,%xmm0
    466f:	c5 fb 11 04 c2       	vmovsd %xmm0,(%rdx,%rax,8)
    4674:	48 ff c0             	inc    %rax
    4677:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    467d:	75 e1                	jne    4660 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0xe0>
    467f:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    4686:	48 83 c6 08          	add    $0x8,%rsi
    468a:	4c 39 d9             	cmp    %r11,%rcx
    468d:	0f 85 24 ff ff ff    	jne    45b7 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0x37>
    4693:	eb 87                	jmp    461c <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0x9c>
    4695:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    469c:	00 00 00 
    469f:	90                   	nop

00000000000046a0 <void jik<double>(double (*) [128], double (*) [128], double (*) [128])>:
    46a0:	f3 0f 1e fa          	endbr64 
    46a4:	49 89 f3             	mov    %rsi,%r11
    46a7:	4c 8d 8f 00 00 02 00 	lea    0x20000(%rdi),%r9
    46ae:	49 89 d0             	mov    %rdx,%r8
    46b1:	48 8d b2 00 00 02 00 	lea    0x20000(%rdx),%rsi
    46b8:	45 31 d2             	xor    %r10d,%r10d
    46bb:	49 8d 89 00 00 fe ff 	lea    -0x20000(%r9),%rcx
    46c2:	4c 89 df             	mov    %r11,%rdi
    46c5:	c5 fb 10 01          	vmovsd (%rcx),%xmm0
    46c9:	4c 89 c0             	mov    %r8,%rax
    46cc:	48 89 fa             	mov    %rdi,%rdx
    46cf:	90                   	nop
    46d0:	c5 fb 10 0a          	vmovsd (%rdx),%xmm1
    46d4:	48 05 00 04 00 00    	add    $0x400,%rax
    46da:	c4 e2 f1 b9 80 00 fc 	vfmadd231sd -0x400(%rax),%xmm1,%xmm0
    46e1:	ff ff 
    46e3:	48 83 c2 08          	add    $0x8,%rdx
    46e7:	c5 fb 11 01          	vmovsd %xmm0,(%rcx)
    46eb:	48 39 f0             	cmp    %rsi,%rax
    46ee:	75 e0                	jne    46d0 <void jik<double>(double (*) [128], double (*) [128], double (*) [128])+0x30>
    46f0:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    46f7:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    46fe:	4c 39 c9             	cmp    %r9,%rcx
    4701:	75 c2                	jne    46c5 <void jik<double>(double (*) [128], double (*) [128], double (*) [128])+0x25>
    4703:	49 ff c2             	inc    %r10
    4706:	4c 8d 49 08          	lea    0x8(%rcx),%r9
    470a:	49 83 c0 08          	add    $0x8,%r8
    470e:	48 8d 70 08          	lea    0x8(%rax),%rsi
    4712:	49 81 fa 80 00 00 00 	cmp    $0x80,%r10
    4719:	75 a0                	jne    46bb <void jik<double>(double (*) [128], double (*) [128], double (*) [128])+0x1b>
    471b:	c3                   	retq   
    471c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000004720 <void jki<double>(double (*) [128], double (*) [128], double (*) [128])>:
    4720:	f3 0f 1e fa          	endbr64 
    4724:	49 89 f3             	mov    %rsi,%r11
    4727:	53                   	push   %rbx
    4728:	49 89 f8             	mov    %rdi,%r8
    472b:	48 8d b7 00 00 02 00 	lea    0x20000(%rdi),%rsi
    4732:	49 89 d2             	mov    %rdx,%r10
    4735:	48 8d 9f 00 04 00 00 	lea    0x400(%rdi),%rbx
    473c:	4d 8d 8b 00 04 00 00 	lea    0x400(%r11),%r9
    4743:	4c 89 df             	mov    %r11,%rdi
    4746:	4c 89 d1             	mov    %r10,%rcx
    4749:	48 89 fa             	mov    %rdi,%rdx
    474c:	4c 89 c0             	mov    %r8,%rax
    474f:	90                   	nop
    4750:	c5 fb 10 02          	vmovsd (%rdx),%xmm0
    4754:	c5 fb 10 08          	vmovsd (%rax),%xmm1
    4758:	48 05 00 04 00 00    	add    $0x400,%rax
    475e:	c4 e2 f1 99 01       	vfmadd132sd (%rcx),%xmm1,%xmm0
    4763:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    476a:	c5 fb 11 80 00 fc ff 	vmovsd %xmm0,-0x400(%rax)
    4771:	ff 
    4772:	48 39 f0             	cmp    %rsi,%rax
    4775:	75 d9                	jne    4750 <void jki<double>(double (*) [128], double (*) [128], double (*) [128])+0x30>
    4777:	48 83 c7 08          	add    $0x8,%rdi
    477b:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    4782:	4c 39 cf             	cmp    %r9,%rdi
    4785:	75 c2                	jne    4749 <void jki<double>(double (*) [128], double (*) [128], double (*) [128])+0x29>
    4787:	49 83 c0 08          	add    $0x8,%r8
    478b:	48 8d 70 08          	lea    0x8(%rax),%rsi
    478f:	49 83 c2 08          	add    $0x8,%r10
    4793:	49 39 d8             	cmp    %rbx,%r8
    4796:	75 ab                	jne    4743 <void jki<double>(double (*) [128], double (*) [128], double (*) [128])+0x23>
    4798:	5b                   	pop    %rbx
    4799:	c3                   	retq   
    479a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000047a0 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])>:
    47a0:	f3 0f 1e fa          	endbr64 
    47a4:	55                   	push   %rbp
    47a5:	49 89 fb             	mov    %rdi,%r11
    47a8:	48 89 d1             	mov    %rdx,%rcx
    47ab:	48 89 e5             	mov    %rsp,%rbp
    47ae:	41 55                	push   %r13
    47b0:	4c 8d 4a 20          	lea    0x20(%rdx),%r9
    47b4:	4c 8d 97 00 00 02 00 	lea    0x20000(%rdi),%r10
    47bb:	41 54                	push   %r12
    47bd:	45 31 e4             	xor    %r12d,%r12d
    47c0:	53                   	push   %rbx
    47c1:	48 89 f3             	mov    %rsi,%rbx
    47c4:	4c 89 df             	mov    %r11,%rdi
    47c7:	48 89 de             	mov    %rbx,%rsi
    47ca:	48 8d 47 20          	lea    0x20(%rdi),%rax
    47ce:	48 39 c1             	cmp    %rax,%rcx
    47d1:	0f 93 c0             	setae  %al
    47d4:	4c 39 cf             	cmp    %r9,%rdi
    47d7:	41 0f 93 c0          	setae  %r8b
    47db:	48 89 fa             	mov    %rdi,%rdx
    47de:	44 09 c0             	or     %r8d,%eax
    47e1:	4c 8d 46 08          	lea    0x8(%rsi),%r8
    47e5:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    47ec:	4c 39 c2             	cmp    %r8,%rdx
    47ef:	41 0f 93 c5          	setae  %r13b
    47f3:	48 39 fe             	cmp    %rdi,%rsi
    47f6:	41 0f 93 c0          	setae  %r8b
    47fa:	45 08 c5             	or     %r8b,%r13b
    47fd:	74 65                	je     4864 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0xc4>
    47ff:	84 c0                	test   %al,%al
    4801:	74 61                	je     4864 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0xc4>
    4803:	c4 e2 7d 19 0e       	vbroadcastsd (%rsi),%ymm1
    4808:	31 c0                	xor    %eax,%eax
    480a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4810:	c5 fd 10 04 01       	vmovupd (%rcx,%rax,1),%ymm0
    4815:	c4 e2 f5 a8 04 02    	vfmadd213pd (%rdx,%rax,1),%ymm1,%ymm0
    481b:	c5 fd 11 04 02       	vmovupd %ymm0,(%rdx,%rax,1)
    4820:	48 83 c0 20          	add    $0x20,%rax
    4824:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    482a:	75 e4                	jne    4810 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x70>
    482c:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    4833:	4c 39 d7             	cmp    %r10,%rdi
    4836:	75 92                	jne    47ca <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x2a>
    4838:	49 ff c4             	inc    %r12
    483b:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    4842:	48 83 c3 08          	add    $0x8,%rbx
    4846:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    484d:	49 81 fc 80 00 00 00 	cmp    $0x80,%r12
    4854:	0f 85 6a ff ff ff    	jne    47c4 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x24>
    485a:	c5 f8 77             	vzeroupper 
    485d:	5b                   	pop    %rbx
    485e:	41 5c                	pop    %r12
    4860:	41 5d                	pop    %r13
    4862:	5d                   	pop    %rbp
    4863:	c3                   	retq   
    4864:	31 c0                	xor    %eax,%eax
    4866:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    486d:	00 00 00 
    4870:	c5 fb 10 14 c2       	vmovsd (%rdx,%rax,8),%xmm2
    4875:	c5 fb 10 06          	vmovsd (%rsi),%xmm0
    4879:	c4 e2 e9 99 04 c1    	vfmadd132sd (%rcx,%rax,8),%xmm2,%xmm0
    487f:	c5 fb 11 04 c2       	vmovsd %xmm0,(%rdx,%rax,8)
    4884:	48 ff c0             	inc    %rax
    4887:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    488d:	75 e1                	jne    4870 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0xd0>
    488f:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    4896:	4c 39 d7             	cmp    %r10,%rdi
    4899:	0f 85 2b ff ff ff    	jne    47ca <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x2a>
    489f:	eb 97                	jmp    4838 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x98>
    48a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    48a8:	00 00 00 
    48ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000048b0 <void kji<double>(double (*) [128], double (*) [128], double (*) [128])>:
    48b0:	f3 0f 1e fa          	endbr64 
    48b4:	48 89 f8             	mov    %rdi,%rax
    48b7:	49 89 d1             	mov    %rdx,%r9
    48ba:	48 89 f7             	mov    %rsi,%rdi
    48bd:	4c 8d 9e 00 04 00 00 	lea    0x400(%rsi),%r11
    48c4:	4c 8d 90 00 00 02 00 	lea    0x20000(%rax),%r10
    48cb:	4c 8d 80 00 04 02 00 	lea    0x20400(%rax),%r8
    48d2:	4c 89 d1             	mov    %r10,%rcx
    48d5:	4c 89 ce             	mov    %r9,%rsi
    48d8:	48 8d 81 00 00 fe ff 	lea    -0x20000(%rcx),%rax
    48df:	48 89 fa             	mov    %rdi,%rdx
    48e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    48e8:	c5 fb 10 02          	vmovsd (%rdx),%xmm0
    48ec:	c5 fb 10 08          	vmovsd (%rax),%xmm1
    48f0:	48 05 00 04 00 00    	add    $0x400,%rax
    48f6:	c4 e2 f1 99 06       	vfmadd132sd (%rsi),%xmm1,%xmm0
    48fb:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    4902:	c5 fb 11 80 00 fc ff 	vmovsd %xmm0,-0x400(%rax)
    4909:	ff 
    490a:	48 39 c1             	cmp    %rax,%rcx
    490d:	75 d9                	jne    48e8 <void kji<double>(double (*) [128], double (*) [128], double (*) [128])+0x38>
    490f:	48 83 c1 08          	add    $0x8,%rcx
    4913:	48 83 c6 08          	add    $0x8,%rsi
    4917:	4c 39 c1             	cmp    %r8,%rcx
    491a:	75 bc                	jne    48d8 <void kji<double>(double (*) [128], double (*) [128], double (*) [128])+0x28>
    491c:	48 83 c7 08          	add    $0x8,%rdi
    4920:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    4927:	4c 39 df             	cmp    %r11,%rdi
    492a:	75 a6                	jne    48d2 <void kji<double>(double (*) [128], double (*) [128], double (*) [128])+0x22>
    492c:	c3                   	retq   
    492d:	0f 1f 00             	nopl   (%rax)

0000000000004930 <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    4930:	f3 0f 1e fa          	endbr64 
    4934:	49 89 f9             	mov    %rdi,%r9
    4937:	45 31 d2             	xor    %r10d,%r10d
    493a:	48 89 f7             	mov    %rsi,%rdi
    493d:	4c 8d 9a 00 00 04 00 	lea    0x40000(%rdx),%r11
    4944:	4c 8d 82 00 08 04 00 	lea    0x40800(%rdx),%r8
    494b:	4c 89 d9             	mov    %r11,%rcx
    494e:	4c 89 ce             	mov    %r9,%rsi
    4951:	db 2e                	fldt   (%rsi)
    4953:	48 8d 81 00 00 fc ff 	lea    -0x40000(%rcx),%rax
    495a:	48 89 fa             	mov    %rdi,%rdx
    495d:	0f 1f 00             	nopl   (%rax)
    4960:	db 2a                	fldt   (%rdx)
    4962:	48 05 00 08 00 00    	add    $0x800,%rax
    4968:	48 83 c2 10          	add    $0x10,%rdx
    496c:	db a8 00 f8 ff ff    	fldt   -0x800(%rax)
    4972:	de c9                	fmulp  %st,%st(1)
    4974:	de c1                	faddp  %st,%st(1)
    4976:	d9 c0                	fld    %st(0)
    4978:	db 3e                	fstpt  (%rsi)
    497a:	48 39 c1             	cmp    %rax,%rcx
    497d:	75 e1                	jne    4960 <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x30>
    497f:	dd d8                	fstp   %st(0)
    4981:	48 83 c1 10          	add    $0x10,%rcx
    4985:	48 83 c6 10          	add    $0x10,%rsi
    4989:	49 39 c8             	cmp    %rcx,%r8
    498c:	75 c3                	jne    4951 <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x21>
    498e:	49 83 ea 80          	sub    $0xffffffffffffff80,%r10
    4992:	48 81 c7 00 08 00 00 	add    $0x800,%rdi
    4999:	49 81 c1 00 08 00 00 	add    $0x800,%r9
    49a0:	49 81 fa 00 40 00 00 	cmp    $0x4000,%r10
    49a7:	75 a2                	jne    494b <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x1b>
    49a9:	c3                   	retq   
    49aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000049b0 <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    49b0:	f3 0f 1e fa          	endbr64 
    49b4:	49 89 d1             	mov    %rdx,%r9
    49b7:	4c 8d 86 00 08 00 00 	lea    0x800(%rsi),%r8
    49be:	48 89 fa             	mov    %rdi,%rdx
    49c1:	48 8d be 00 08 04 00 	lea    0x40800(%rsi),%rdi
    49c8:	49 8d 88 00 f8 ff ff 	lea    -0x800(%r8),%rcx
    49cf:	4c 89 ce             	mov    %r9,%rsi
    49d2:	31 c0                	xor    %eax,%eax
    49d4:	0f 1f 40 00          	nopl   0x0(%rax)
    49d8:	db 29                	fldt   (%rcx)
    49da:	db 2c 06             	fldt   (%rsi,%rax,1)
    49dd:	de c9                	fmulp  %st,%st(1)
    49df:	db 2c 02             	fldt   (%rdx,%rax,1)
    49e2:	de c1                	faddp  %st,%st(1)
    49e4:	db 3c 02             	fstpt  (%rdx,%rax,1)
    49e7:	48 83 c0 10          	add    $0x10,%rax
    49eb:	48 3d 00 08 00 00    	cmp    $0x800,%rax
    49f1:	75 e5                	jne    49d8 <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x28>
    49f3:	48 83 c1 10          	add    $0x10,%rcx
    49f7:	48 81 c6 00 08 00 00 	add    $0x800,%rsi
    49fe:	49 39 c8             	cmp    %rcx,%r8
    4a01:	75 cf                	jne    49d2 <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x22>
    4a03:	49 81 c0 00 08 00 00 	add    $0x800,%r8
    4a0a:	48 81 c2 00 08 00 00 	add    $0x800,%rdx
    4a11:	4c 39 c7             	cmp    %r8,%rdi
    4a14:	75 b2                	jne    49c8 <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x18>
    4a16:	c3                   	retq   
    4a17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    4a1e:	00 00 

0000000000004a20 <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    4a20:	f3 0f 1e fa          	endbr64 
    4a24:	49 89 f3             	mov    %rsi,%r11
    4a27:	4c 8d 8f 00 00 04 00 	lea    0x40000(%rdi),%r9
    4a2e:	49 89 d0             	mov    %rdx,%r8
    4a31:	48 8d b2 00 00 04 00 	lea    0x40000(%rdx),%rsi
    4a38:	45 31 d2             	xor    %r10d,%r10d
    4a3b:	49 8d 89 00 00 fc ff 	lea    -0x40000(%r9),%rcx
    4a42:	4c 89 df             	mov    %r11,%rdi
    4a45:	db 29                	fldt   (%rcx)
    4a47:	4c 89 c0             	mov    %r8,%rax
    4a4a:	48 89 fa             	mov    %rdi,%rdx
    4a4d:	0f 1f 00             	nopl   (%rax)
    4a50:	db 2a                	fldt   (%rdx)
    4a52:	48 05 00 08 00 00    	add    $0x800,%rax
    4a58:	48 83 c2 10          	add    $0x10,%rdx
    4a5c:	db a8 00 f8 ff ff    	fldt   -0x800(%rax)
    4a62:	de c9                	fmulp  %st,%st(1)
    4a64:	de c1                	faddp  %st,%st(1)
    4a66:	d9 c0                	fld    %st(0)
    4a68:	db 39                	fstpt  (%rcx)
    4a6a:	48 39 f0             	cmp    %rsi,%rax
    4a6d:	75 e1                	jne    4a50 <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x30>
    4a6f:	dd d8                	fstp   %st(0)
    4a71:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    4a78:	48 81 c7 00 08 00 00 	add    $0x800,%rdi
    4a7f:	4c 39 c9             	cmp    %r9,%rcx
    4a82:	75 c1                	jne    4a45 <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x25>
    4a84:	49 ff c2             	inc    %r10
    4a87:	4c 8d 49 10          	lea    0x10(%rcx),%r9
    4a8b:	49 83 c0 10          	add    $0x10,%r8
    4a8f:	48 8d 70 10          	lea    0x10(%rax),%rsi
    4a93:	49 81 fa 80 00 00 00 	cmp    $0x80,%r10
    4a9a:	75 9f                	jne    4a3b <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x1b>
    4a9c:	c3                   	retq   
    4a9d:	0f 1f 00             	nopl   (%rax)

0000000000004aa0 <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    4aa0:	f3 0f 1e fa          	endbr64 
    4aa4:	49 89 f3             	mov    %rsi,%r11
    4aa7:	53                   	push   %rbx
    4aa8:	49 89 f8             	mov    %rdi,%r8
    4aab:	48 8d b7 00 00 04 00 	lea    0x40000(%rdi),%rsi
    4ab2:	49 89 d2             	mov    %rdx,%r10
    4ab5:	48 8d 9f 00 08 00 00 	lea    0x800(%rdi),%rbx
    4abc:	4d 8d 8b 00 08 00 00 	lea    0x800(%r11),%r9
    4ac3:	4c 89 df             	mov    %r11,%rdi
    4ac6:	4c 89 d1             	mov    %r10,%rcx
    4ac9:	48 89 fa             	mov    %rdi,%rdx
    4acc:	4c 89 c0             	mov    %r8,%rax
    4acf:	90                   	nop
    4ad0:	db 2a                	fldt   (%rdx)
    4ad2:	48 05 00 08 00 00    	add    $0x800,%rax
    4ad8:	48 81 c2 00 08 00 00 	add    $0x800,%rdx
    4adf:	db 29                	fldt   (%rcx)
    4ae1:	de c9                	fmulp  %st,%st(1)
    4ae3:	db a8 00 f8 ff ff    	fldt   -0x800(%rax)
    4ae9:	de c1                	faddp  %st,%st(1)
    4aeb:	db b8 00 f8 ff ff    	fstpt  -0x800(%rax)
    4af1:	48 39 f0             	cmp    %rsi,%rax
    4af4:	75 da                	jne    4ad0 <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x30>
    4af6:	48 83 c7 10          	add    $0x10,%rdi
    4afa:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    4b01:	4c 39 cf             	cmp    %r9,%rdi
    4b04:	75 c3                	jne    4ac9 <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x29>
    4b06:	49 83 c0 10          	add    $0x10,%r8
    4b0a:	48 8d 70 10          	lea    0x10(%rax),%rsi
    4b0e:	49 83 c2 10          	add    $0x10,%r10
    4b12:	49 39 d8             	cmp    %rbx,%r8
    4b15:	75 ac                	jne    4ac3 <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x23>
    4b17:	5b                   	pop    %rbx
    4b18:	c3                   	retq   
    4b19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000004b20 <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    4b20:	f3 0f 1e fa          	endbr64 
    4b24:	48 89 f0             	mov    %rsi,%rax
    4b27:	49 89 f9             	mov    %rdi,%r9
    4b2a:	4c 8d 80 00 08 04 00 	lea    0x40800(%rax),%r8
    4b31:	48 8d be 00 00 04 00 	lea    0x40000(%rsi),%rdi
    4b38:	48 89 d6             	mov    %rdx,%rsi
    4b3b:	4c 89 ca             	mov    %r9,%rdx
    4b3e:	48 8d 8f 00 00 fc ff 	lea    -0x40000(%rdi),%rcx
    4b45:	31 c0                	xor    %eax,%eax
    4b47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    4b4e:	00 00 
    4b50:	db 29                	fldt   (%rcx)
    4b52:	db 2c 06             	fldt   (%rsi,%rax,1)
    4b55:	de c9                	fmulp  %st,%st(1)
    4b57:	db 2c 02             	fldt   (%rdx,%rax,1)
    4b5a:	de c1                	faddp  %st,%st(1)
    4b5c:	db 3c 02             	fstpt  (%rdx,%rax,1)
    4b5f:	48 83 c0 10          	add    $0x10,%rax
    4b63:	48 3d 00 08 00 00    	cmp    $0x800,%rax
    4b69:	75 e5                	jne    4b50 <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x30>
    4b6b:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    4b72:	48 81 c2 00 08 00 00 	add    $0x800,%rdx
    4b79:	48 39 cf             	cmp    %rcx,%rdi
    4b7c:	75 c7                	jne    4b45 <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x25>
    4b7e:	48 83 c7 10          	add    $0x10,%rdi
    4b82:	48 81 c6 00 08 00 00 	add    $0x800,%rsi
    4b89:	4c 39 c7             	cmp    %r8,%rdi
    4b8c:	75 ad                	jne    4b3b <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x1b>
    4b8e:	c3                   	retq   
    4b8f:	90                   	nop

0000000000004b90 <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    4b90:	f3 0f 1e fa          	endbr64 
    4b94:	48 89 f8             	mov    %rdi,%rax
    4b97:	49 89 d1             	mov    %rdx,%r9
    4b9a:	48 89 f7             	mov    %rsi,%rdi
    4b9d:	4c 8d 9e 00 08 00 00 	lea    0x800(%rsi),%r11
    4ba4:	4c 8d 90 00 00 04 00 	lea    0x40000(%rax),%r10
    4bab:	4c 8d 80 00 08 04 00 	lea    0x40800(%rax),%r8
    4bb2:	4c 89 d1             	mov    %r10,%rcx
    4bb5:	4c 89 ce             	mov    %r9,%rsi
    4bb8:	48 8d 81 00 00 fc ff 	lea    -0x40000(%rcx),%rax
    4bbf:	48 89 fa             	mov    %rdi,%rdx
    4bc2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4bc8:	db 2a                	fldt   (%rdx)
    4bca:	48 05 00 08 00 00    	add    $0x800,%rax
    4bd0:	48 81 c2 00 08 00 00 	add    $0x800,%rdx
    4bd7:	db 2e                	fldt   (%rsi)
    4bd9:	de c9                	fmulp  %st,%st(1)
    4bdb:	db a8 00 f8 ff ff    	fldt   -0x800(%rax)
    4be1:	de c1                	faddp  %st,%st(1)
    4be3:	db b8 00 f8 ff ff    	fstpt  -0x800(%rax)
    4be9:	48 39 c1             	cmp    %rax,%rcx
    4bec:	75 da                	jne    4bc8 <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x38>
    4bee:	48 83 c1 10          	add    $0x10,%rcx
    4bf2:	48 83 c6 10          	add    $0x10,%rsi
    4bf6:	4c 39 c1             	cmp    %r8,%rcx
    4bf9:	75 bd                	jne    4bb8 <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x28>
    4bfb:	48 83 c7 10          	add    $0x10,%rdi
    4bff:	49 81 c1 00 08 00 00 	add    $0x800,%r9
    4c06:	4c 39 df             	cmp    %r11,%rdi
    4c09:	75 a7                	jne    4bb2 <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x22>
    4c0b:	c3                   	retq   
    4c0c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000004c10 <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    4c10:	f3 0f 1e fa          	endbr64 
    4c14:	41 57                	push   %r15
    4c16:	48 8d 8a 00 00 04 00 	lea    0x40000(%rdx),%rcx
    4c1d:	41 56                	push   %r14
    4c1f:	41 55                	push   %r13
    4c21:	4c 8d aa 00 08 04 00 	lea    0x40800(%rdx),%r13
    4c28:	41 54                	push   %r12
    4c2a:	49 89 f4             	mov    %rsi,%r12
    4c2d:	55                   	push   %rbp
    4c2e:	53                   	push   %rbx
    4c2f:	48 83 ec 38          	sub    $0x38,%rsp
    4c33:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    4c38:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
    4c3f:	00 00 
    4c41:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
    4c46:	48 8b 5c 24 28       	mov    0x28(%rsp),%rbx
    4c4b:	48 8b 6c 24 20       	mov    0x20(%rsp),%rbp
    4c50:	c5 f9 6f 55 00       	vmovdqa 0x0(%rbp),%xmm2
    4c55:	4c 8d bb 00 00 fc ff 	lea    -0x40000(%rbx),%r15
    4c5c:	4d 89 e6             	mov    %r12,%r14
    4c5f:	90                   	nop
    4c60:	c4 c1 79 6f 0f       	vmovdqa (%r15),%xmm1
    4c65:	c4 c1 79 6f 06       	vmovdqa (%r14),%xmm0
    4c6a:	c5 f8 29 14 24       	vmovaps %xmm2,(%rsp)
    4c6f:	e8 0c d6 ff ff       	callq  2280 <__multf3@plt>
    4c74:	c5 f9 6f 14 24       	vmovdqa (%rsp),%xmm2
    4c79:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    4c7d:	c5 f9 6f c2          	vmovdqa %xmm2,%xmm0
    4c81:	e8 da d6 ff ff       	callq  2360 <__addtf3@plt>
    4c86:	49 81 c7 00 08 00 00 	add    $0x800,%r15
    4c8d:	c5 f9 6f d0          	vmovdqa %xmm0,%xmm2
    4c91:	c5 f8 29 45 00       	vmovaps %xmm0,0x0(%rbp)
    4c96:	49 83 c6 10          	add    $0x10,%r14
    4c9a:	4c 39 fb             	cmp    %r15,%rbx
    4c9d:	75 c1                	jne    4c60 <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x50>
    4c9f:	48 83 c3 10          	add    $0x10,%rbx
    4ca3:	48 83 c5 10          	add    $0x10,%rbp
    4ca7:	49 39 dd             	cmp    %rbx,%r13
    4caa:	75 a4                	jne    4c50 <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x40>
    4cac:	48 83 6c 24 18 80    	subq   $0xffffffffffffff80,0x18(%rsp)
    4cb2:	48 81 44 24 20 00 08 	addq   $0x800,0x20(%rsp)
    4cb9:	00 00 
    4cbb:	49 81 c4 00 08 00 00 	add    $0x800,%r12
    4cc2:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    4cc7:	48 3d 00 40 00 00    	cmp    $0x4000,%rax
    4ccd:	0f 85 73 ff ff ff    	jne    4c46 <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x36>
    4cd3:	48 83 c4 38          	add    $0x38,%rsp
    4cd7:	5b                   	pop    %rbx
    4cd8:	5d                   	pop    %rbp
    4cd9:	41 5c                	pop    %r12
    4cdb:	41 5d                	pop    %r13
    4cdd:	41 5e                	pop    %r14
    4cdf:	41 5f                	pop    %r15
    4ce1:	c3                   	retq   
    4ce2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    4ce9:	00 00 00 
    4cec:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000004cf0 <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    4cf0:	f3 0f 1e fa          	endbr64 
    4cf4:	41 57                	push   %r15
    4cf6:	48 89 f0             	mov    %rsi,%rax
    4cf9:	48 05 00 08 04 00    	add    $0x40800,%rax
    4cff:	41 56                	push   %r14
    4d01:	49 89 d6             	mov    %rdx,%r14
    4d04:	41 55                	push   %r13
    4d06:	4c 8d ae 00 08 00 00 	lea    0x800(%rsi),%r13
    4d0d:	41 54                	push   %r12
    4d0f:	55                   	push   %rbp
    4d10:	53                   	push   %rbx
    4d11:	48 89 fb             	mov    %rdi,%rbx
    4d14:	48 83 ec 18          	sub    $0x18,%rsp
    4d18:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    4d1d:	49 8d ad 00 f8 ff ff 	lea    -0x800(%r13),%rbp
    4d24:	4d 89 f4             	mov    %r14,%r12
    4d27:	45 31 ff             	xor    %r15d,%r15d
    4d2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4d30:	c4 81 79 6f 0c 3c    	vmovdqa (%r12,%r15,1),%xmm1
    4d36:	c5 f9 6f 45 00       	vmovdqa 0x0(%rbp),%xmm0
    4d3b:	e8 40 d5 ff ff       	callq  2280 <__multf3@plt>
    4d40:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    4d44:	c4 a1 79 6f 04 3b    	vmovdqa (%rbx,%r15,1),%xmm0
    4d4a:	e8 11 d6 ff ff       	callq  2360 <__addtf3@plt>
    4d4f:	c4 a1 78 29 04 3b    	vmovaps %xmm0,(%rbx,%r15,1)
    4d55:	49 83 c7 10          	add    $0x10,%r15
    4d59:	49 81 ff 00 08 00 00 	cmp    $0x800,%r15
    4d60:	75 ce                	jne    4d30 <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x40>
    4d62:	48 83 c5 10          	add    $0x10,%rbp
    4d66:	49 81 c4 00 08 00 00 	add    $0x800,%r12
    4d6d:	49 39 ed             	cmp    %rbp,%r13
    4d70:	75 b5                	jne    4d27 <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x37>
    4d72:	49 81 c5 00 08 00 00 	add    $0x800,%r13
    4d79:	48 81 c3 00 08 00 00 	add    $0x800,%rbx
    4d80:	4c 39 6c 24 08       	cmp    %r13,0x8(%rsp)
    4d85:	75 96                	jne    4d1d <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x2d>
    4d87:	48 83 c4 18          	add    $0x18,%rsp
    4d8b:	5b                   	pop    %rbx
    4d8c:	5d                   	pop    %rbp
    4d8d:	41 5c                	pop    %r12
    4d8f:	41 5d                	pop    %r13
    4d91:	41 5e                	pop    %r14
    4d93:	41 5f                	pop    %r15
    4d95:	c3                   	retq   
    4d96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    4d9d:	00 00 00 

0000000000004da0 <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    4da0:	f3 0f 1e fa          	endbr64 
    4da4:	41 57                	push   %r15
    4da6:	48 8d 87 00 00 04 00 	lea    0x40000(%rdi),%rax
    4dad:	41 56                	push   %r14
    4daf:	41 55                	push   %r13
    4db1:	49 89 d5             	mov    %rdx,%r13
    4db4:	41 54                	push   %r12
    4db6:	55                   	push   %rbp
    4db7:	48 8d aa 00 00 04 00 	lea    0x40000(%rdx),%rbp
    4dbe:	53                   	push   %rbx
    4dbf:	48 83 ec 38          	sub    $0x38,%rsp
    4dc3:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    4dc8:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    4dcd:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
    4dd4:	00 00 
    4dd6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    4ddb:	4c 8b 64 24 28       	mov    0x28(%rsp),%r12
    4de0:	48 8d 98 00 00 fc ff 	lea    -0x40000(%rax),%rbx
    4de7:	c5 f9 6f 13          	vmovdqa (%rbx),%xmm2
    4deb:	4d 89 ef             	mov    %r13,%r15
    4dee:	4d 89 e6             	mov    %r12,%r14
    4df1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    4df8:	c4 c1 79 6f 0f       	vmovdqa (%r15),%xmm1
    4dfd:	c4 c1 79 6f 06       	vmovdqa (%r14),%xmm0
    4e02:	c5 f8 29 14 24       	vmovaps %xmm2,(%rsp)
    4e07:	e8 74 d4 ff ff       	callq  2280 <__multf3@plt>
    4e0c:	c5 f9 6f 14 24       	vmovdqa (%rsp),%xmm2
    4e11:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    4e15:	c5 f9 6f c2          	vmovdqa %xmm2,%xmm0
    4e19:	e8 42 d5 ff ff       	callq  2360 <__addtf3@plt>
    4e1e:	49 81 c7 00 08 00 00 	add    $0x800,%r15
    4e25:	c5 f9 6f d0          	vmovdqa %xmm0,%xmm2
    4e29:	c5 f8 29 03          	vmovaps %xmm0,(%rbx)
    4e2d:	49 83 c6 10          	add    $0x10,%r14
    4e31:	49 39 ef             	cmp    %rbp,%r15
    4e34:	75 c2                	jne    4df8 <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x58>
    4e36:	48 81 c3 00 08 00 00 	add    $0x800,%rbx
    4e3d:	49 81 c4 00 08 00 00 	add    $0x800,%r12
    4e44:	48 3b 5c 24 18       	cmp    0x18(%rsp),%rbx
    4e49:	75 9c                	jne    4de7 <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x47>
    4e4b:	48 ff 44 24 20       	incq   0x20(%rsp)
    4e50:	48 8d 4b 10          	lea    0x10(%rbx),%rcx
    4e54:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
    4e59:	49 83 c5 10          	add    $0x10,%r13
    4e5d:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    4e62:	49 8d 6f 10          	lea    0x10(%r15),%rbp
    4e66:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    4e6c:	0f 85 64 ff ff ff    	jne    4dd6 <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x36>
    4e72:	48 83 c4 38          	add    $0x38,%rsp
    4e76:	5b                   	pop    %rbx
    4e77:	5d                   	pop    %rbp
    4e78:	41 5c                	pop    %r12
    4e7a:	41 5d                	pop    %r13
    4e7c:	41 5e                	pop    %r14
    4e7e:	41 5f                	pop    %r15
    4e80:	c3                   	retq   
    4e81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    4e88:	00 00 00 
    4e8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000004e90 <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    4e90:	f3 0f 1e fa          	endbr64 
    4e94:	41 57                	push   %r15
    4e96:	48 8d 87 00 08 00 00 	lea    0x800(%rdi),%rax
    4e9d:	41 56                	push   %r14
    4e9f:	41 55                	push   %r13
    4ea1:	49 89 fd             	mov    %rdi,%r13
    4ea4:	41 54                	push   %r12
    4ea6:	55                   	push   %rbp
    4ea7:	48 8d af 00 00 04 00 	lea    0x40000(%rdi),%rbp
    4eae:	53                   	push   %rbx
    4eaf:	48 83 ec 28          	sub    $0x28,%rsp
    4eb3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    4eb8:	48 8d 86 00 08 00 00 	lea    0x800(%rsi),%rax
    4ebf:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
    4ec4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    4ec9:	48 89 04 24          	mov    %rax,(%rsp)
    4ecd:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
    4ed2:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
    4ed7:	4d 89 e6             	mov    %r12,%r14
    4eda:	4d 89 ef             	mov    %r13,%r15
    4edd:	0f 1f 00             	nopl   (%rax)
    4ee0:	c5 f9 6f 0b          	vmovdqa (%rbx),%xmm1
    4ee4:	c4 c1 79 6f 06       	vmovdqa (%r14),%xmm0
    4ee9:	49 81 c7 00 08 00 00 	add    $0x800,%r15
    4ef0:	e8 8b d3 ff ff       	callq  2280 <__multf3@plt>
    4ef5:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    4ef9:	c4 c1 79 6f 87 00 f8 	vmovdqa -0x800(%r15),%xmm0
    4f00:	ff ff 
    4f02:	49 81 c6 00 08 00 00 	add    $0x800,%r14
    4f09:	e8 52 d4 ff ff       	callq  2360 <__addtf3@plt>
    4f0e:	c4 c1 78 29 87 00 f8 	vmovaps %xmm0,-0x800(%r15)
    4f15:	ff ff 
    4f17:	49 39 ef             	cmp    %rbp,%r15
    4f1a:	75 c4                	jne    4ee0 <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x50>
    4f1c:	49 83 c4 10          	add    $0x10,%r12
    4f20:	48 81 c3 00 08 00 00 	add    $0x800,%rbx
    4f27:	4c 3b 24 24          	cmp    (%rsp),%r12
    4f2b:	75 aa                	jne    4ed7 <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x47>
    4f2d:	49 83 c5 10          	add    $0x10,%r13
    4f31:	48 83 44 24 08 10    	addq   $0x10,0x8(%rsp)
    4f37:	49 8d 6f 10          	lea    0x10(%r15),%rbp
    4f3b:	4c 3b 6c 24 10       	cmp    0x10(%rsp),%r13
    4f40:	75 8b                	jne    4ecd <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x3d>
    4f42:	48 83 c4 28          	add    $0x28,%rsp
    4f46:	5b                   	pop    %rbx
    4f47:	5d                   	pop    %rbp
    4f48:	41 5c                	pop    %r12
    4f4a:	41 5d                	pop    %r13
    4f4c:	41 5e                	pop    %r14
    4f4e:	41 5f                	pop    %r15
    4f50:	c3                   	retq   
    4f51:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    4f58:	00 00 00 
    4f5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000004f60 <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    4f60:	f3 0f 1e fa          	endbr64 
    4f64:	41 57                	push   %r15
    4f66:	48 89 f0             	mov    %rsi,%rax
    4f69:	48 05 00 08 04 00    	add    $0x40800,%rax
    4f6f:	41 56                	push   %r14
    4f71:	49 89 fe             	mov    %rdi,%r14
    4f74:	41 55                	push   %r13
    4f76:	4c 8d ae 00 00 04 00 	lea    0x40000(%rsi),%r13
    4f7d:	41 54                	push   %r12
    4f7f:	49 89 d4             	mov    %rdx,%r12
    4f82:	55                   	push   %rbp
    4f83:	53                   	push   %rbx
    4f84:	48 83 ec 18          	sub    $0x18,%rsp
    4f88:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    4f8d:	4c 89 f3             	mov    %r14,%rbx
    4f90:	49 8d ad 00 00 fc ff 	lea    -0x40000(%r13),%rbp
    4f97:	45 31 ff             	xor    %r15d,%r15d
    4f9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4fa0:	c4 81 79 6f 0c 3c    	vmovdqa (%r12,%r15,1),%xmm1
    4fa6:	c5 f9 6f 45 00       	vmovdqa 0x0(%rbp),%xmm0
    4fab:	e8 d0 d2 ff ff       	callq  2280 <__multf3@plt>
    4fb0:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    4fb4:	c4 a1 79 6f 04 3b    	vmovdqa (%rbx,%r15,1),%xmm0
    4fba:	e8 a1 d3 ff ff       	callq  2360 <__addtf3@plt>
    4fbf:	c4 a1 78 29 04 3b    	vmovaps %xmm0,(%rbx,%r15,1)
    4fc5:	49 83 c7 10          	add    $0x10,%r15
    4fc9:	49 81 ff 00 08 00 00 	cmp    $0x800,%r15
    4fd0:	75 ce                	jne    4fa0 <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x40>
    4fd2:	48 81 c5 00 08 00 00 	add    $0x800,%rbp
    4fd9:	48 81 c3 00 08 00 00 	add    $0x800,%rbx
    4fe0:	49 39 ed             	cmp    %rbp,%r13
    4fe3:	75 b2                	jne    4f97 <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x37>
    4fe5:	49 83 c5 10          	add    $0x10,%r13
    4fe9:	49 81 c4 00 08 00 00 	add    $0x800,%r12
    4ff0:	4c 3b 6c 24 08       	cmp    0x8(%rsp),%r13
    4ff5:	75 96                	jne    4f8d <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x2d>
    4ff7:	48 83 c4 18          	add    $0x18,%rsp
    4ffb:	5b                   	pop    %rbx
    4ffc:	5d                   	pop    %rbp
    4ffd:	41 5c                	pop    %r12
    4fff:	41 5d                	pop    %r13
    5001:	41 5e                	pop    %r14
    5003:	41 5f                	pop    %r15
    5005:	c3                   	retq   
    5006:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    500d:	00 00 00 

0000000000005010 <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    5010:	f3 0f 1e fa          	endbr64 
    5014:	41 57                	push   %r15
    5016:	48 8d 8e 00 08 00 00 	lea    0x800(%rsi),%rcx
    501d:	41 56                	push   %r14
    501f:	41 55                	push   %r13
    5021:	4c 8d af 00 08 04 00 	lea    0x40800(%rdi),%r13
    5028:	41 54                	push   %r12
    502a:	49 89 f4             	mov    %rsi,%r12
    502d:	55                   	push   %rbp
    502e:	53                   	push   %rbx
    502f:	48 83 ec 28          	sub    $0x28,%rsp
    5033:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    5038:	48 8d 8f 00 00 04 00 	lea    0x40000(%rdi),%rcx
    503f:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    5044:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
    5049:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
    504e:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
    5053:	4c 8d b3 00 00 fc ff 	lea    -0x40000(%rbx),%r14
    505a:	4d 89 e7             	mov    %r12,%r15
    505d:	0f 1f 00             	nopl   (%rax)
    5060:	c5 f9 6f 4d 00       	vmovdqa 0x0(%rbp),%xmm1
    5065:	c4 c1 79 6f 07       	vmovdqa (%r15),%xmm0
    506a:	49 81 c6 00 08 00 00 	add    $0x800,%r14
    5071:	e8 0a d2 ff ff       	callq  2280 <__multf3@plt>
    5076:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    507a:	c4 c1 79 6f 86 00 f8 	vmovdqa -0x800(%r14),%xmm0
    5081:	ff ff 
    5083:	49 81 c7 00 08 00 00 	add    $0x800,%r15
    508a:	e8 d1 d2 ff ff       	callq  2360 <__addtf3@plt>
    508f:	c4 c1 78 29 86 00 f8 	vmovaps %xmm0,-0x800(%r14)
    5096:	ff ff 
    5098:	4c 39 f3             	cmp    %r14,%rbx
    509b:	75 c3                	jne    5060 <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x50>
    509d:	48 83 c3 10          	add    $0x10,%rbx
    50a1:	48 83 c5 10          	add    $0x10,%rbp
    50a5:	4c 39 eb             	cmp    %r13,%rbx
    50a8:	75 a9                	jne    5053 <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x43>
    50aa:	49 83 c4 10          	add    $0x10,%r12
    50ae:	48 81 44 24 08 00 08 	addq   $0x800,0x8(%rsp)
    50b5:	00 00 
    50b7:	4c 3b 64 24 10       	cmp    0x10(%rsp),%r12
    50bc:	75 8b                	jne    5049 <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x39>
    50be:	48 83 c4 28          	add    $0x28,%rsp
    50c2:	5b                   	pop    %rbx
    50c3:	5d                   	pop    %rbp
    50c4:	41 5c                	pop    %r12
    50c6:	41 5d                	pop    %r13
    50c8:	41 5e                	pop    %r14
    50ca:	41 5f                	pop    %r15
    50cc:	c3                   	retq   
    50cd:	0f 1f 00             	nopl   (%rax)

00000000000050d0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>:
    50d0:	f3 0f 1e fa          	endbr64 
    50d4:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
    50d8:	49 89 c2             	mov    %rax,%r10
    50db:	49 c1 ea 3f          	shr    $0x3f,%r10
    50df:	49 01 c2             	add    %rax,%r10
    50e2:	49 89 d3             	mov    %rdx,%r11
    50e5:	49 d1 fa             	sar    %r10
    50e8:	41 83 e3 01          	and    $0x1,%r11d
    50ec:	4c 39 d6             	cmp    %r10,%rsi
    50ef:	0f 8d bb 00 00 00    	jge    51b0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xe0>
    50f5:	49 89 f1             	mov    %rsi,%r9
    50f8:	eb 20                	jmp    511a <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x4a>
    50fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    5100:	48 ff c8             	dec    %rax
    5103:	4c 8d 04 c7          	lea    (%rdi,%rax,8),%r8
    5107:	c4 c1 7b 10 08       	vmovsd (%r8),%xmm1
    510c:	c4 a1 7b 11 0c cf    	vmovsd %xmm1,(%rdi,%r9,8)
    5112:	49 39 c2             	cmp    %rax,%r10
    5115:	7e 30                	jle    5147 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x77>
    5117:	49 89 c1             	mov    %rax,%r9
    511a:	49 8d 49 01          	lea    0x1(%r9),%rcx
    511e:	48 8d 04 09          	lea    (%rcx,%rcx,1),%rax
    5122:	48 c1 e1 04          	shl    $0x4,%rcx
    5126:	c5 fb 10 4c 0f f8    	vmovsd -0x8(%rdi,%rcx,1),%xmm1
    512c:	4c 8d 04 0f          	lea    (%rdi,%rcx,1),%r8
    5130:	c4 c1 79 2f 08       	vcomisd (%r8),%xmm1
    5135:	77 c9                	ja     5100 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x30>
    5137:	c4 c1 7b 10 08       	vmovsd (%r8),%xmm1
    513c:	c4 a1 7b 11 0c cf    	vmovsd %xmm1,(%rdi,%r9,8)
    5142:	49 39 c2             	cmp    %rax,%r10
    5145:	7f d0                	jg     5117 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x47>
    5147:	4d 85 db             	test   %r11,%r11
    514a:	74 74                	je     51c0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xf0>
    514c:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    5150:	48 89 d1             	mov    %rdx,%rcx
    5153:	48 c1 e9 3f          	shr    $0x3f,%rcx
    5157:	48 01 d1             	add    %rdx,%rcx
    515a:	48 d1 f9             	sar    %rcx
    515d:	48 39 f0             	cmp    %rsi,%rax
    5160:	7f 2f                	jg     5191 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xc1>
    5162:	eb 3c                	jmp    51a0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
    5164:	0f 1f 40 00          	nopl   0x0(%rax)
    5168:	48 8d 51 ff          	lea    -0x1(%rcx),%rdx
    516c:	48 89 d0             	mov    %rdx,%rax
    516f:	48 c1 e8 3f          	shr    $0x3f,%rax
    5173:	48 01 d0             	add    %rdx,%rax
    5176:	c4 c1 7b 10 09       	vmovsd (%r9),%xmm1
    517b:	48 d1 f8             	sar    %rax
    517e:	48 89 c2             	mov    %rax,%rdx
    5181:	c4 c1 7b 11 08       	vmovsd %xmm1,(%r8)
    5186:	48 89 c8             	mov    %rcx,%rax
    5189:	48 39 ce             	cmp    %rcx,%rsi
    518c:	7d 72                	jge    5200 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x130>
    518e:	48 89 d1             	mov    %rdx,%rcx
    5191:	4c 8d 0c cf          	lea    (%rdi,%rcx,8),%r9
    5195:	c4 c1 79 2f 01       	vcomisd (%r9),%xmm0
    519a:	4c 8d 04 c7          	lea    (%rdi,%rax,8),%r8
    519e:	77 c8                	ja     5168 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x98>
    51a0:	c4 c1 7b 11 00       	vmovsd %xmm0,(%r8)
    51a5:	c3                   	retq   
    51a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    51ad:	00 00 00 
    51b0:	4c 8d 04 f7          	lea    (%rdi,%rsi,8),%r8
    51b4:	4d 85 db             	test   %r11,%r11
    51b7:	75 e7                	jne    51a0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
    51b9:	48 89 f0             	mov    %rsi,%rax
    51bc:	0f 1f 40 00          	nopl   0x0(%rax)
    51c0:	48 83 ea 02          	sub    $0x2,%rdx
    51c4:	48 89 d1             	mov    %rdx,%rcx
    51c7:	48 c1 e9 3f          	shr    $0x3f,%rcx
    51cb:	48 01 ca             	add    %rcx,%rdx
    51ce:	48 d1 fa             	sar    %rdx
    51d1:	48 39 c2             	cmp    %rax,%rdx
    51d4:	0f 85 72 ff ff ff    	jne    514c <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x7c>
    51da:	48 8d 44 00 02       	lea    0x2(%rax,%rax,1),%rax
    51df:	c5 fb 10 4c c7 f8    	vmovsd -0x8(%rdi,%rax,8),%xmm1
    51e5:	48 ff c8             	dec    %rax
    51e8:	c4 c1 7b 11 08       	vmovsd %xmm1,(%r8)
    51ed:	4c 8d 04 c7          	lea    (%rdi,%rax,8),%r8
    51f1:	e9 56 ff ff ff       	jmpq   514c <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x7c>
    51f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    51fd:	00 00 00 
    5200:	4d 89 c8             	mov    %r9,%r8
    5203:	c4 c1 7b 11 00       	vmovsd %xmm0,(%r8)
    5208:	c3                   	retq   
    5209:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000005210 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>:
    5210:	f3 0f 1e fa          	endbr64 
    5214:	41 57                	push   %r15
    5216:	41 56                	push   %r14
    5218:	41 55                	push   %r13
    521a:	41 54                	push   %r12
    521c:	55                   	push   %rbp
    521d:	53                   	push   %rbx
    521e:	4c 8d 9c 24 00 00 f4 	lea    -0xc0000(%rsp),%r11
    5225:	ff 
    5226:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    522d:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    5232:	4c 39 dc             	cmp    %r11,%rsp
    5235:	75 ef                	jne    5226 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x16>
    5237:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
    523e:	ba 00 00 04 00       	mov    $0x40000,%edx
    5243:	31 f6                	xor    %esi,%esi
    5245:	4c 8d a4 24 20 01 00 	lea    0x120(%rsp),%r12
    524c:	00 
    524d:	48 89 fd             	mov    %rdi,%rbp
    5250:	4c 89 e7             	mov    %r12,%rdi
    5253:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    525a:	00 00 
    525c:	48 89 84 24 28 01 0c 	mov    %rax,0xc0128(%rsp)
    5263:	00 
    5264:	31 c0                	xor    %eax,%eax
    5266:	e8 f5 cf ff ff       	callq  2260 <memset@plt>
    526b:	c5 f9 6f 05 2d 32 00 	vmovdqa 0x322d(%rip),%xmm0        # 84a0 <_IO_stdin_used+0x4a0>
    5272:	00 
    5273:	48 8d 94 24 20 09 04 	lea    0x40920(%rsp),%rdx
    527a:	00 
    527b:	48 8d 8c 24 20 09 08 	lea    0x80920(%rsp),%rcx
    5282:	00 
    5283:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    528a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    5290:	c5 f8 29 00          	vmovaps %xmm0,(%rax)
    5294:	48 83 c0 10          	add    $0x10,%rax
    5298:	48 39 d0             	cmp    %rdx,%rax
    529b:	75 f3                	jne    5290 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x80>
    529d:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    52a4:	48 39 ca             	cmp    %rcx,%rdx
    52a7:	75 da                	jne    5283 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x73>
    52a9:	c5 f9 6f 05 ff 31 00 	vmovdqa 0x31ff(%rip),%xmm0        # 84b0 <_IO_stdin_used+0x4b0>
    52b0:	00 
    52b1:	48 8d 8c 24 20 09 0c 	lea    0xc0920(%rsp),%rcx
    52b8:	00 
    52b9:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    52c0:	c5 f8 29 00          	vmovaps %xmm0,(%rax)
    52c4:	48 83 c0 10          	add    $0x10,%rax
    52c8:	48 39 d0             	cmp    %rdx,%rax
    52cb:	75 f3                	jne    52c0 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0xb0>
    52cd:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    52d4:	48 39 ca             	cmp    %rcx,%rdx
    52d7:	75 e0                	jne    52b9 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0xa9>
    52d9:	4c 8d 7c 24 10       	lea    0x10(%rsp),%r15
    52de:	48 8d 84 24 18 01 00 	lea    0x118(%rsp),%rax
    52e5:	00 
    52e6:	4c 89 7c 24 08       	mov    %r15,0x8(%rsp)
    52eb:	48 89 04 24          	mov    %rax,(%rsp)
    52ef:	4c 8d b4 24 20 01 08 	lea    0x80120(%rsp),%r14
    52f6:	00 
    52f7:	4c 8d ac 24 20 01 04 	lea    0x40120(%rsp),%r13
    52fe:	00 
    52ff:	e8 1c cf ff ff       	callq  2220 <std::chrono::_V2::system_clock::now()@plt>
    5304:	4c 89 f2             	mov    %r14,%rdx
    5307:	4c 89 ee             	mov    %r13,%rsi
    530a:	4c 89 e7             	mov    %r12,%rdi
    530d:	48 89 c3             	mov    %rax,%rbx
    5310:	ff d5                	callq  *%rbp
    5312:	e8 09 cf ff ff       	callq  2220 <std::chrono::_V2::system_clock::now()@plt>
    5317:	48 29 d8             	sub    %rbx,%rax
    531a:	c5 e9 57 d2          	vxorpd %xmm2,%xmm2,%xmm2
    531e:	c4 e1 eb 2a c0       	vcvtsi2sd %rax,%xmm2,%xmm0
    5323:	49 83 c7 08          	add    $0x8,%r15
    5327:	c5 fb 5e 05 a1 31 00 	vdivsd 0x31a1(%rip),%xmm0,%xmm0        # 84d0 <_IO_stdin_used+0x4d0>
    532e:	00 
    532f:	c4 c1 7b 11 47 f8    	vmovsd %xmm0,-0x8(%r15)
    5335:	4c 3b 3c 24          	cmp    (%rsp),%r15
    5339:	75 c4                	jne    52ff <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0xef>
    533b:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    5340:	b9 0a 00 00 00       	mov    $0xa,%ecx
    5345:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
    534c:	00 
    534d:	4c 89 fa             	mov    %r15,%rdx
    5350:	e8 9b d4 ff ff       	callq  27f0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]>
    5355:	48 8d 35 90 2d 00 00 	lea    0x2d90(%rip),%rsi        # 80ec <_IO_stdin_used+0xec>
    535c:	ba 01 00 00 00       	mov    $0x1,%edx
    5361:	48 8d 3d d8 5c 00 00 	lea    0x5cd8(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    5368:	e8 b3 cf ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    536d:	48 8b 0d cc 5c 00 00 	mov    0x5ccc(%rip),%rcx        # b040 <std::cout@@GLIBCXX_3.4>
    5374:	48 8d 3d c5 5c 00 00 	lea    0x5cc5(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    537b:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    537f:	c5 fb 10 84 24 90 00 	vmovsd 0x90(%rsp),%xmm0
    5386:	00 00 
    5388:	48 01 fa             	add    %rdi,%rdx
    538b:	8b 42 18             	mov    0x18(%rdx),%eax
    538e:	48 c7 42 08 02 00 00 	movq   $0x2,0x8(%rdx)
    5395:	00 
    5396:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    539b:	83 c8 04             	or     $0x4,%eax
    539e:	89 42 18             	mov    %eax,0x18(%rdx)
    53a1:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    53a5:	48 c7 44 07 10 06 00 	movq   $0x6,0x10(%rdi,%rax,1)
    53ac:	00 00 
    53ae:	e8 cd cf ff ff       	callq  2380 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    53b3:	48 89 c7             	mov    %rax,%rdi
    53b6:	ba 02 00 00 00       	mov    $0x2,%edx
    53bb:	48 8d 35 2c 2d 00 00 	lea    0x2d2c(%rip),%rsi        # 80ee <_IO_stdin_used+0xee>
    53c2:	e8 59 cf ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    53c7:	c5 f9 6f 0d f1 30 00 	vmovdqa 0x30f1(%rip),%xmm1        # 84c0 <_IO_stdin_used+0x4c0>
    53ce:	00 
    53cf:	c5 f9 6f 84 24 10 01 	vmovdqa 0x40110(%rsp),%xmm0
    53d6:	04 00 
    53d8:	e8 c3 cf ff ff       	callq  23a0 <__eqtf2@plt>
    53dd:	48 85 c0             	test   %rax,%rax
    53e0:	75 25                	jne    5407 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x1f7>
    53e2:	48 8b 84 24 28 01 0c 	mov    0xc0128(%rsp),%rax
    53e9:	00 
    53ea:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    53f1:	00 00 
    53f3:	75 31                	jne    5426 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x216>
    53f5:	48 81 c4 38 01 0c 00 	add    $0xc0138,%rsp
    53fc:	5b                   	pop    %rbx
    53fd:	5d                   	pop    %rbp
    53fe:	41 5c                	pop    %r12
    5400:	41 5d                	pop    %r13
    5402:	41 5e                	pop    %r14
    5404:	41 5f                	pop    %r15
    5406:	c3                   	retq   
    5407:	48 8d 0d ea 2c 00 00 	lea    0x2cea(%rip),%rcx        # 80f8 <_IO_stdin_used+0xf8>
    540e:	ba 56 00 00 00       	mov    $0x56,%edx
    5413:	48 8d 35 d7 2c 00 00 	lea    0x2cd7(%rip),%rsi        # 80f1 <_IO_stdin_used+0xf1>
    541a:	48 8d 3d 4f 2d 00 00 	lea    0x2d4f(%rip),%rdi        # 8170 <_IO_stdin_used+0x170>
    5421:	e8 4a ce ff ff       	callq  2270 <__assert_fail@plt>
    5426:	e8 e5 ce ff ff       	callq  2310 <__stack_chk_fail@plt>
    542b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000005430 <void test_type<__float128>()>:
    5430:	f3 0f 1e fa          	endbr64 
    5434:	55                   	push   %rbp
    5435:	48 8d 2d 04 5c 00 00 	lea    0x5c04(%rip),%rbp        # b040 <std::cout@@GLIBCXX_3.4>
    543c:	48 83 ec 30          	sub    $0x30,%rsp
    5440:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5447:	00 00 
    5449:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    544e:	31 c0                	xor    %eax,%eax
    5450:	48 8b 05 e9 5b 00 00 	mov    0x5be9(%rip),%rax        # b040 <std::cout@@GLIBCXX_3.4>
    5457:	48 8b 35 da 57 00 00 	mov    0x57da(%rip),%rsi        # ac38 <typeinfo for __float128@@CXXABI_FLOAT128+0x8>
    545e:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    5462:	48 89 e7             	mov    %rsp,%rdi
    5465:	48 c7 44 05 10 0c 00 	movq   $0xc,0x10(%rbp,%rax,1)
    546c:	00 00 
    546e:	31 c0                	xor    %eax,%eax
    5470:	80 3e 2a             	cmpb   $0x2a,(%rsi)
    5473:	0f 94 c0             	sete   %al
    5476:	48 01 c6             	add    %rax,%rsi
    5479:	e8 72 d1 ff ff       	callq  25f0 <ec::demangle[abi:cxx11](char const*)>
    547e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    5483:	48 8b 34 24          	mov    (%rsp),%rsi
    5487:	48 89 ef             	mov    %rbp,%rdi
    548a:	e8 91 ce ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    548f:	48 8b 3c 24          	mov    (%rsp),%rdi
    5493:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
    5498:	48 39 c7             	cmp    %rax,%rdi
    549b:	74 05                	je     54a2 <void test_type<__float128>()+0x72>
    549d:	e8 4e ce ff ff       	callq  22f0 <operator delete(void*)@plt>
    54a2:	48 8d 3d 67 f7 ff ff 	lea    -0x899(%rip),%rdi        # 4c10 <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    54a9:	e8 62 fd ff ff       	callq  5210 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    54ae:	48 8d 3d 3b f8 ff ff 	lea    -0x7c5(%rip),%rdi        # 4cf0 <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    54b5:	e8 56 fd ff ff       	callq  5210 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    54ba:	48 8d 3d df f8 ff ff 	lea    -0x721(%rip),%rdi        # 4da0 <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    54c1:	e8 4a fd ff ff       	callq  5210 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    54c6:	48 8d 3d c3 f9 ff ff 	lea    -0x63d(%rip),%rdi        # 4e90 <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    54cd:	e8 3e fd ff ff       	callq  5210 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    54d2:	48 8d 3d 87 fa ff ff 	lea    -0x579(%rip),%rdi        # 4f60 <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    54d9:	e8 32 fd ff ff       	callq  5210 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    54de:	48 8d 3d 2b fb ff ff 	lea    -0x4d5(%rip),%rdi        # 5010 <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    54e5:	e8 26 fd ff ff       	callq  5210 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    54ea:	48 8b 05 4f 5b 00 00 	mov    0x5b4f(%rip),%rax        # b040 <std::cout@@GLIBCXX_3.4>
    54f1:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    54f5:	48 8b ac 05 f0 00 00 	mov    0xf0(%rbp,%rax,1),%rbp
    54fc:	00 
    54fd:	48 85 ed             	test   %rbp,%rbp
    5500:	74 6e                	je     5570 <void test_type<__float128>()+0x140>
    5502:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
    5506:	74 38                	je     5540 <void test_type<__float128>()+0x110>
    5508:	0f be 75 43          	movsbl 0x43(%rbp),%esi
    550c:	48 8d 3d 2d 5b 00 00 	lea    0x5b2d(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    5513:	e8 f8 cc ff ff       	callq  2210 <std::ostream::put(char)@plt>
    5518:	48 89 c7             	mov    %rax,%rdi
    551b:	e8 70 cd ff ff       	callq  2290 <std::ostream::flush()@plt>
    5520:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    5525:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    552c:	00 00 
    552e:	75 3b                	jne    556b <void test_type<__float128>()+0x13b>
    5530:	48 83 c4 30          	add    $0x30,%rsp
    5534:	5d                   	pop    %rbp
    5535:	c3                   	retq   
    5536:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    553d:	00 00 00 
    5540:	48 89 ef             	mov    %rbp,%rdi
    5543:	e8 e8 cd ff ff       	callq  2330 <std::ctype<char>::_M_widen_init() const@plt>
    5548:	48 8b 45 00          	mov    0x0(%rbp),%rax
    554c:	48 8d 15 7d d5 ff ff 	lea    -0x2a83(%rip),%rdx        # 2ad0 <std::ctype<char>::do_widen(char) const>
    5553:	48 8b 40 30          	mov    0x30(%rax),%rax
    5557:	be 0a 00 00 00       	mov    $0xa,%esi
    555c:	48 39 d0             	cmp    %rdx,%rax
    555f:	74 ab                	je     550c <void test_type<__float128>()+0xdc>
    5561:	48 89 ef             	mov    %rbp,%rdi
    5564:	ff d0                	callq  *%rax
    5566:	0f be f0             	movsbl %al,%esi
    5569:	eb a1                	jmp    550c <void test_type<__float128>()+0xdc>
    556b:	e8 a0 cd ff ff       	callq  2310 <__stack_chk_fail@plt>
    5570:	e8 db cd ff ff       	callq  2350 <std::__throw_bad_cast()@plt>
    5575:	f3 0f 1e fa          	endbr64 
    5579:	48 89 c5             	mov    %rax,%rbp
    557c:	48 8b 3c 24          	mov    (%rsp),%rdi
    5580:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
    5585:	48 39 c7             	cmp    %rax,%rdi
    5588:	74 10                	je     559a <void test_type<__float128>()+0x16a>
    558a:	c5 f8 77             	vzeroupper 
    558d:	e8 5e cd ff ff       	callq  22f0 <operator delete(void*)@plt>
    5592:	48 89 ef             	mov    %rbp,%rdi
    5595:	e8 26 ce ff ff       	callq  23c0 <_Unwind_Resume@plt>
    559a:	c5 f8 77             	vzeroupper 
    559d:	eb f3                	jmp    5592 <void test_type<__float128>()+0x162>
    559f:	90                   	nop

00000000000055a0 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>:
    55a0:	f3 0f 1e fa          	endbr64 
    55a4:	41 57                	push   %r15
    55a6:	41 56                	push   %r14
    55a8:	41 55                	push   %r13
    55aa:	41 54                	push   %r12
    55ac:	55                   	push   %rbp
    55ad:	53                   	push   %rbx
    55ae:	4c 8d 9c 24 00 00 f4 	lea    -0xc0000(%rsp),%r11
    55b5:	ff 
    55b6:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    55bd:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    55c2:	4c 39 dc             	cmp    %r11,%rsp
    55c5:	75 ef                	jne    55b6 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x16>
    55c7:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
    55ce:	ba 00 00 04 00       	mov    $0x40000,%edx
    55d3:	31 f6                	xor    %esi,%esi
    55d5:	4c 8d a4 24 20 01 00 	lea    0x120(%rsp),%r12
    55dc:	00 
    55dd:	48 89 fd             	mov    %rdi,%rbp
    55e0:	4c 89 e7             	mov    %r12,%rdi
    55e3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    55ea:	00 00 
    55ec:	48 89 84 24 28 01 0c 	mov    %rax,0xc0128(%rsp)
    55f3:	00 
    55f4:	31 c0                	xor    %eax,%eax
    55f6:	e8 65 cc ff ff       	callq  2260 <memset@plt>
    55fb:	48 8d 94 24 20 09 04 	lea    0x40920(%rsp),%rdx
    5602:	00 
    5603:	48 8d 8c 24 20 09 08 	lea    0x80920(%rsp),%rcx
    560a:	00 
    560b:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    5612:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    5618:	48 c7 00 02 00 00 00 	movq   $0x2,(%rax)
    561f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    5626:	00 
    5627:	48 83 c0 10          	add    $0x10,%rax
    562b:	48 39 d0             	cmp    %rdx,%rax
    562e:	75 e8                	jne    5618 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x78>
    5630:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    5637:	48 39 ca             	cmp    %rcx,%rdx
    563a:	75 cf                	jne    560b <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x6b>
    563c:	48 8d 8c 24 20 09 0c 	lea    0xc0920(%rsp),%rcx
    5643:	00 
    5644:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    564b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    5650:	48 c7 00 03 00 00 00 	movq   $0x3,(%rax)
    5657:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    565e:	00 
    565f:	48 83 c0 10          	add    $0x10,%rax
    5663:	48 39 d0             	cmp    %rdx,%rax
    5666:	75 e8                	jne    5650 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0xb0>
    5668:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    566f:	48 39 ca             	cmp    %rcx,%rdx
    5672:	75 d0                	jne    5644 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0xa4>
    5674:	4c 8d 7c 24 10       	lea    0x10(%rsp),%r15
    5679:	48 8d 84 24 18 01 00 	lea    0x118(%rsp),%rax
    5680:	00 
    5681:	4c 89 7c 24 08       	mov    %r15,0x8(%rsp)
    5686:	48 89 04 24          	mov    %rax,(%rsp)
    568a:	4c 8d b4 24 20 01 08 	lea    0x80120(%rsp),%r14
    5691:	00 
    5692:	4c 8d ac 24 20 01 04 	lea    0x40120(%rsp),%r13
    5699:	00 
    569a:	e8 81 cb ff ff       	callq  2220 <std::chrono::_V2::system_clock::now()@plt>
    569f:	4c 89 f2             	mov    %r14,%rdx
    56a2:	4c 89 ee             	mov    %r13,%rsi
    56a5:	4c 89 e7             	mov    %r12,%rdi
    56a8:	48 89 c3             	mov    %rax,%rbx
    56ab:	ff d5                	callq  *%rbp
    56ad:	e8 6e cb ff ff       	callq  2220 <std::chrono::_V2::system_clock::now()@plt>
    56b2:	48 29 d8             	sub    %rbx,%rax
    56b5:	c5 f1 57 c9          	vxorpd %xmm1,%xmm1,%xmm1
    56b9:	c4 e1 f3 2a c0       	vcvtsi2sd %rax,%xmm1,%xmm0
    56be:	49 83 c7 08          	add    $0x8,%r15
    56c2:	c5 fb 5e 05 06 2e 00 	vdivsd 0x2e06(%rip),%xmm0,%xmm0        # 84d0 <_IO_stdin_used+0x4d0>
    56c9:	00 
    56ca:	c4 c1 7b 11 47 f8    	vmovsd %xmm0,-0x8(%r15)
    56d0:	4c 3b 3c 24          	cmp    (%rsp),%r15
    56d4:	75 c4                	jne    569a <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0xfa>
    56d6:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    56db:	b9 0a 00 00 00       	mov    $0xa,%ecx
    56e0:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
    56e7:	00 
    56e8:	4c 89 fa             	mov    %r15,%rdx
    56eb:	e8 00 d1 ff ff       	callq  27f0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]>
    56f0:	48 8d 35 f5 29 00 00 	lea    0x29f5(%rip),%rsi        # 80ec <_IO_stdin_used+0xec>
    56f7:	ba 01 00 00 00       	mov    $0x1,%edx
    56fc:	48 8d 3d 3d 59 00 00 	lea    0x593d(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    5703:	e8 18 cc ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    5708:	48 8b 0d 31 59 00 00 	mov    0x5931(%rip),%rcx        # b040 <std::cout@@GLIBCXX_3.4>
    570f:	48 8d 3d 2a 59 00 00 	lea    0x592a(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    5716:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    571a:	c5 fb 10 84 24 90 00 	vmovsd 0x90(%rsp),%xmm0
    5721:	00 00 
    5723:	48 01 fa             	add    %rdi,%rdx
    5726:	8b 42 18             	mov    0x18(%rdx),%eax
    5729:	48 c7 42 08 02 00 00 	movq   $0x2,0x8(%rdx)
    5730:	00 
    5731:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    5736:	83 c8 04             	or     $0x4,%eax
    5739:	89 42 18             	mov    %eax,0x18(%rdx)
    573c:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    5740:	48 c7 44 07 10 06 00 	movq   $0x6,0x10(%rdi,%rax,1)
    5747:	00 00 
    5749:	e8 32 cc ff ff       	callq  2380 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    574e:	48 89 c7             	mov    %rax,%rdi
    5751:	ba 02 00 00 00       	mov    $0x2,%edx
    5756:	48 8d 35 91 29 00 00 	lea    0x2991(%rip),%rsi        # 80ee <_IO_stdin_used+0xee>
    575d:	e8 be cb ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    5762:	48 8b 84 24 10 01 04 	mov    0x40110(%rsp),%rax
    5769:	00 
    576a:	80 f4 63             	xor    $0x63,%ah
    576d:	48 0b 84 24 18 01 04 	or     0x40118(%rsp),%rax
    5774:	00 
    5775:	75 25                	jne    579c <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x1fc>
    5777:	48 8b 84 24 28 01 0c 	mov    0xc0128(%rsp),%rax
    577e:	00 
    577f:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5786:	00 00 
    5788:	75 31                	jne    57bb <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x21b>
    578a:	48 81 c4 38 01 0c 00 	add    $0xc0138,%rsp
    5791:	5b                   	pop    %rbx
    5792:	5d                   	pop    %rbp
    5793:	41 5c                	pop    %r12
    5795:	41 5d                	pop    %r13
    5797:	41 5e                	pop    %r14
    5799:	41 5f                	pop    %r15
    579b:	c3                   	retq   
    579c:	48 8d 0d f5 29 00 00 	lea    0x29f5(%rip),%rcx        # 8198 <_IO_stdin_used+0x198>
    57a3:	ba 56 00 00 00       	mov    $0x56,%edx
    57a8:	48 8d 35 42 29 00 00 	lea    0x2942(%rip),%rsi        # 80f1 <_IO_stdin_used+0xf1>
    57af:	48 8d 3d ba 29 00 00 	lea    0x29ba(%rip),%rdi        # 8170 <_IO_stdin_used+0x170>
    57b6:	e8 b5 ca ff ff       	callq  2270 <__assert_fail@plt>
    57bb:	e8 50 cb ff ff       	callq  2310 <__stack_chk_fail@plt>

00000000000057c0 <void test_type<__int128>()>:
    57c0:	f3 0f 1e fa          	endbr64 
    57c4:	55                   	push   %rbp
    57c5:	48 8d 2d 74 58 00 00 	lea    0x5874(%rip),%rbp        # b040 <std::cout@@GLIBCXX_3.4>
    57cc:	48 83 ec 30          	sub    $0x30,%rsp
    57d0:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    57d7:	00 00 
    57d9:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    57de:	31 c0                	xor    %eax,%eax
    57e0:	48 8b 05 59 58 00 00 	mov    0x5859(%rip),%rax        # b040 <std::cout@@GLIBCXX_3.4>
    57e7:	48 8b 35 6a 54 00 00 	mov    0x546a(%rip),%rsi        # ac58 <typeinfo for __int128@@CXXABI_1.3.5+0x8>
    57ee:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    57f2:	48 89 e7             	mov    %rsp,%rdi
    57f5:	48 c7 44 05 10 0c 00 	movq   $0xc,0x10(%rbp,%rax,1)
    57fc:	00 00 
    57fe:	31 c0                	xor    %eax,%eax
    5800:	80 3e 2a             	cmpb   $0x2a,(%rsi)
    5803:	0f 94 c0             	sete   %al
    5806:	48 01 c6             	add    %rax,%rsi
    5809:	e8 e2 cd ff ff       	callq  25f0 <ec::demangle[abi:cxx11](char const*)>
    580e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    5813:	48 8b 34 24          	mov    (%rsp),%rsi
    5817:	48 89 ef             	mov    %rbp,%rdi
    581a:	e8 01 cb ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    581f:	48 8b 3c 24          	mov    (%rsp),%rdi
    5823:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
    5828:	48 39 c7             	cmp    %rax,%rdi
    582b:	74 05                	je     5832 <void test_type<__int128>()+0x72>
    582d:	e8 be ca ff ff       	callq  22f0 <operator delete(void*)@plt>
    5832:	48 8d 3d 27 e2 ff ff 	lea    -0x1dd9(%rip),%rdi        # 3a60 <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    5839:	e8 62 fd ff ff       	callq  55a0 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    583e:	48 8d 3d cb e2 ff ff 	lea    -0x1d35(%rip),%rdi        # 3b10 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    5845:	e8 56 fd ff ff       	callq  55a0 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    584a:	48 8d 3d 4f e3 ff ff 	lea    -0x1cb1(%rip),%rdi        # 3ba0 <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    5851:	e8 4a fd ff ff       	callq  55a0 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    5856:	48 8d 3d 03 e4 ff ff 	lea    -0x1bfd(%rip),%rdi        # 3c60 <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    585d:	e8 3e fd ff ff       	callq  55a0 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    5862:	48 8d 3d a7 e4 ff ff 	lea    -0x1b59(%rip),%rdi        # 3d10 <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    5869:	e8 32 fd ff ff       	callq  55a0 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    586e:	48 8d 3d 2b e5 ff ff 	lea    -0x1ad5(%rip),%rdi        # 3da0 <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    5875:	e8 26 fd ff ff       	callq  55a0 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    587a:	48 8b 05 bf 57 00 00 	mov    0x57bf(%rip),%rax        # b040 <std::cout@@GLIBCXX_3.4>
    5881:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    5885:	48 8b ac 05 f0 00 00 	mov    0xf0(%rbp,%rax,1),%rbp
    588c:	00 
    588d:	48 85 ed             	test   %rbp,%rbp
    5890:	74 6e                	je     5900 <void test_type<__int128>()+0x140>
    5892:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
    5896:	74 38                	je     58d0 <void test_type<__int128>()+0x110>
    5898:	0f be 75 43          	movsbl 0x43(%rbp),%esi
    589c:	48 8d 3d 9d 57 00 00 	lea    0x579d(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    58a3:	e8 68 c9 ff ff       	callq  2210 <std::ostream::put(char)@plt>
    58a8:	48 89 c7             	mov    %rax,%rdi
    58ab:	e8 e0 c9 ff ff       	callq  2290 <std::ostream::flush()@plt>
    58b0:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    58b5:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    58bc:	00 00 
    58be:	75 3b                	jne    58fb <void test_type<__int128>()+0x13b>
    58c0:	48 83 c4 30          	add    $0x30,%rsp
    58c4:	5d                   	pop    %rbp
    58c5:	c3                   	retq   
    58c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    58cd:	00 00 00 
    58d0:	48 89 ef             	mov    %rbp,%rdi
    58d3:	e8 58 ca ff ff       	callq  2330 <std::ctype<char>::_M_widen_init() const@plt>
    58d8:	48 8b 45 00          	mov    0x0(%rbp),%rax
    58dc:	48 8d 15 ed d1 ff ff 	lea    -0x2e13(%rip),%rdx        # 2ad0 <std::ctype<char>::do_widen(char) const>
    58e3:	48 8b 40 30          	mov    0x30(%rax),%rax
    58e7:	be 0a 00 00 00       	mov    $0xa,%esi
    58ec:	48 39 d0             	cmp    %rdx,%rax
    58ef:	74 ab                	je     589c <void test_type<__int128>()+0xdc>
    58f1:	48 89 ef             	mov    %rbp,%rdi
    58f4:	ff d0                	callq  *%rax
    58f6:	0f be f0             	movsbl %al,%esi
    58f9:	eb a1                	jmp    589c <void test_type<__int128>()+0xdc>
    58fb:	e8 10 ca ff ff       	callq  2310 <__stack_chk_fail@plt>
    5900:	e8 4b ca ff ff       	callq  2350 <std::__throw_bad_cast()@plt>
    5905:	f3 0f 1e fa          	endbr64 
    5909:	48 89 c5             	mov    %rax,%rbp
    590c:	48 8b 3c 24          	mov    (%rsp),%rdi
    5910:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
    5915:	48 39 c7             	cmp    %rax,%rdi
    5918:	74 10                	je     592a <void test_type<__int128>()+0x16a>
    591a:	c5 f8 77             	vzeroupper 
    591d:	e8 ce c9 ff ff       	callq  22f0 <operator delete(void*)@plt>
    5922:	48 89 ef             	mov    %rbp,%rdi
    5925:	e8 96 ca ff ff       	callq  23c0 <_Unwind_Resume@plt>
    592a:	c5 f8 77             	vzeroupper 
    592d:	eb f3                	jmp    5922 <void test_type<__int128>()+0x162>
    592f:	90                   	nop

0000000000005930 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>:
    5930:	f3 0f 1e fa          	endbr64 
    5934:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    5939:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    593d:	41 ff 72 f8          	pushq  -0x8(%r10)
    5941:	55                   	push   %rbp
    5942:	48 89 e5             	mov    %rsp,%rbp
    5945:	41 57                	push   %r15
    5947:	41 56                	push   %r14
    5949:	41 55                	push   %r13
    594b:	41 54                	push   %r12
    594d:	41 52                	push   %r10
    594f:	53                   	push   %rbx
    5950:	4c 8d 9c 24 00 00 fa 	lea    -0x60000(%rsp),%r11
    5957:	ff 
    5958:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    595f:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    5964:	4c 39 dc             	cmp    %r11,%rsp
    5967:	75 ef                	jne    5958 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x28>
    5969:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
    5970:	ba 00 00 02 00       	mov    $0x20000,%edx
    5975:	31 f6                	xor    %esi,%esi
    5977:	48 89 bd 90 fe f9 ff 	mov    %rdi,-0x60170(%rbp)
    597e:	4c 8d bd c0 ff fd ff 	lea    -0x20040(%rbp),%r15
    5985:	4c 89 ff             	mov    %r15,%rdi
    5988:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    598f:	00 00 
    5991:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    5995:	31 c0                	xor    %eax,%eax
    5997:	4c 8d b5 b0 ff f9 ff 	lea    -0x60050(%rbp),%r14
    599e:	e8 bd c8 ff ff       	callq  2260 <memset@plt>
    59a3:	c5 fd 28 05 35 2b 00 	vmovapd 0x2b35(%rip),%ymm0        # 84e0 <_IO_stdin_used+0x4e0>
    59aa:	00 
    59ab:	4c 89 f1             	mov    %r14,%rcx
    59ae:	48 8d 95 b0 03 fa ff 	lea    -0x5fc50(%rbp),%rdx
    59b5:	48 8d b5 b0 03 fc ff 	lea    -0x3fc50(%rbp),%rsi
    59bc:	48 89 c8             	mov    %rcx,%rax
    59bf:	90                   	nop
    59c0:	c5 fd 29 00          	vmovapd %ymm0,(%rax)
    59c4:	48 83 c0 20          	add    $0x20,%rax
    59c8:	48 39 d0             	cmp    %rdx,%rax
    59cb:	75 f3                	jne    59c0 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x90>
    59cd:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
    59d4:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    59db:	48 39 f2             	cmp    %rsi,%rdx
    59de:	75 dc                	jne    59bc <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x8c>
    59e0:	4c 8d ad b0 ff fb ff 	lea    -0x40050(%rbp),%r13
    59e7:	c5 fd 28 05 11 2b 00 	vmovapd 0x2b11(%rip),%ymm0        # 8500 <_IO_stdin_used+0x500>
    59ee:	00 
    59ef:	4c 89 e9             	mov    %r13,%rcx
    59f2:	48 8d b5 b0 03 fe ff 	lea    -0x1fc50(%rbp),%rsi
    59f9:	48 89 c8             	mov    %rcx,%rax
    59fc:	0f 1f 40 00          	nopl   0x0(%rax)
    5a00:	c5 fd 29 00          	vmovapd %ymm0,(%rax)
    5a04:	48 83 c0 20          	add    $0x20,%rax
    5a08:	48 39 d0             	cmp    %rdx,%rax
    5a0b:	75 f3                	jne    5a00 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0xd0>
    5a0d:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
    5a14:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    5a1b:	48 39 f2             	cmp    %rsi,%rdx
    5a1e:	75 d9                	jne    59f9 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0xc9>
    5a20:	48 8d 85 a0 fe f9 ff 	lea    -0x60160(%rbp),%rax
    5a27:	48 89 c3             	mov    %rax,%rbx
    5a2a:	4c 8d a5 a8 ff f9 ff 	lea    -0x60058(%rbp),%r12
    5a31:	48 89 85 88 fe f9 ff 	mov    %rax,-0x60178(%rbp)
    5a38:	c5 f8 77             	vzeroupper 
    5a3b:	e8 e0 c7 ff ff       	callq  2220 <std::chrono::_V2::system_clock::now()@plt>
    5a40:	48 89 85 98 fe f9 ff 	mov    %rax,-0x60168(%rbp)
    5a47:	48 8b 8d 90 fe f9 ff 	mov    -0x60170(%rbp),%rcx
    5a4e:	4c 89 ea             	mov    %r13,%rdx
    5a51:	4c 89 f6             	mov    %r14,%rsi
    5a54:	4c 89 ff             	mov    %r15,%rdi
    5a57:	ff d1                	callq  *%rcx
    5a59:	e8 c2 c7 ff ff       	callq  2220 <std::chrono::_V2::system_clock::now()@plt>
    5a5e:	48 2b 85 98 fe f9 ff 	sub    -0x60168(%rbp),%rax
    5a65:	c5 f1 57 c9          	vxorpd %xmm1,%xmm1,%xmm1
    5a69:	c4 e1 f3 2a c0       	vcvtsi2sd %rax,%xmm1,%xmm0
    5a6e:	48 83 c3 08          	add    $0x8,%rbx
    5a72:	c5 fb 5e 05 56 2a 00 	vdivsd 0x2a56(%rip),%xmm0,%xmm0        # 84d0 <_IO_stdin_used+0x4d0>
    5a79:	00 
    5a7a:	c5 fb 11 43 f8       	vmovsd %xmm0,-0x8(%rbx)
    5a7f:	49 39 dc             	cmp    %rbx,%r12
    5a82:	75 b7                	jne    5a3b <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x10b>
    5a84:	48 8b bd 88 fe f9 ff 	mov    -0x60178(%rbp),%rdi
    5a8b:	b9 0a 00 00 00       	mov    $0xa,%ecx
    5a90:	48 8d b5 20 ff f9 ff 	lea    -0x600e0(%rbp),%rsi
    5a97:	4c 89 e2             	mov    %r12,%rdx
    5a9a:	e8 51 cd ff ff       	callq  27f0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]>
    5a9f:	48 8d 35 46 26 00 00 	lea    0x2646(%rip),%rsi        # 80ec <_IO_stdin_used+0xec>
    5aa6:	ba 01 00 00 00       	mov    $0x1,%edx
    5aab:	48 8d 3d 8e 55 00 00 	lea    0x558e(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    5ab2:	e8 69 c8 ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    5ab7:	48 8b 0d 82 55 00 00 	mov    0x5582(%rip),%rcx        # b040 <std::cout@@GLIBCXX_3.4>
    5abe:	48 8d 3d 7b 55 00 00 	lea    0x557b(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    5ac5:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    5ac9:	c5 fb 10 85 20 ff f9 	vmovsd -0x600e0(%rbp),%xmm0
    5ad0:	ff 
    5ad1:	48 01 fa             	add    %rdi,%rdx
    5ad4:	8b 42 18             	mov    0x18(%rdx),%eax
    5ad7:	48 c7 42 08 02 00 00 	movq   $0x2,0x8(%rdx)
    5ade:	00 
    5adf:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    5ae4:	83 c8 04             	or     $0x4,%eax
    5ae7:	89 42 18             	mov    %eax,0x18(%rdx)
    5aea:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    5aee:	48 c7 44 07 10 06 00 	movq   $0x6,0x10(%rdi,%rax,1)
    5af5:	00 00 
    5af7:	e8 84 c8 ff ff       	callq  2380 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    5afc:	48 89 c7             	mov    %rax,%rdi
    5aff:	ba 02 00 00 00       	mov    $0x2,%edx
    5b04:	48 8d 35 e3 25 00 00 	lea    0x25e3(%rip),%rsi        # 80ee <_IO_stdin_used+0xee>
    5b0b:	e8 10 c8 ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    5b10:	c5 fb 10 05 c0 29 00 	vmovsd 0x29c0(%rip),%xmm0        # 84d8 <_IO_stdin_used+0x4d8>
    5b17:	00 
    5b18:	c5 f9 2e 45 b8       	vucomisd -0x48(%rbp),%xmm0
    5b1d:	7a 29                	jp     5b48 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x218>
    5b1f:	75 27                	jne    5b48 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x218>
    5b21:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5b25:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5b2c:	00 00 
    5b2e:	75 37                	jne    5b67 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x237>
    5b30:	48 81 c4 60 01 06 00 	add    $0x60160,%rsp
    5b37:	5b                   	pop    %rbx
    5b38:	41 5a                	pop    %r10
    5b3a:	41 5c                	pop    %r12
    5b3c:	41 5d                	pop    %r13
    5b3e:	41 5e                	pop    %r14
    5b40:	41 5f                	pop    %r15
    5b42:	5d                   	pop    %rbp
    5b43:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    5b47:	c3                   	retq   
    5b48:	48 8d 0d b9 26 00 00 	lea    0x26b9(%rip),%rcx        # 8208 <_IO_stdin_used+0x208>
    5b4f:	ba 56 00 00 00       	mov    $0x56,%edx
    5b54:	48 8d 35 96 25 00 00 	lea    0x2596(%rip),%rsi        # 80f1 <_IO_stdin_used+0xf1>
    5b5b:	48 8d 3d 0e 26 00 00 	lea    0x260e(%rip),%rdi        # 8170 <_IO_stdin_used+0x170>
    5b62:	e8 09 c7 ff ff       	callq  2270 <__assert_fail@plt>
    5b67:	e8 a4 c7 ff ff       	callq  2310 <__stack_chk_fail@plt>
    5b6c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000005b70 <void test_type<double>()>:
    5b70:	f3 0f 1e fa          	endbr64 
    5b74:	55                   	push   %rbp
    5b75:	48 8d 2d c4 54 00 00 	lea    0x54c4(%rip),%rbp        # b040 <std::cout@@GLIBCXX_3.4>
    5b7c:	48 83 ec 30          	sub    $0x30,%rsp
    5b80:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5b87:	00 00 
    5b89:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    5b8e:	31 c0                	xor    %eax,%eax
    5b90:	48 8b 05 a9 54 00 00 	mov    0x54a9(%rip),%rax        # b040 <std::cout@@GLIBCXX_3.4>
    5b97:	48 8b 35 fa 50 00 00 	mov    0x50fa(%rip),%rsi        # ac98 <typeinfo for double@@CXXABI_1.3+0x8>
    5b9e:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    5ba2:	48 89 e7             	mov    %rsp,%rdi
    5ba5:	48 c7 44 05 10 0c 00 	movq   $0xc,0x10(%rbp,%rax,1)
    5bac:	00 00 
    5bae:	31 c0                	xor    %eax,%eax
    5bb0:	80 3e 2a             	cmpb   $0x2a,(%rsi)
    5bb3:	0f 94 c0             	sete   %al
    5bb6:	48 01 c6             	add    %rax,%rsi
    5bb9:	e8 32 ca ff ff       	callq  25f0 <ec::demangle[abi:cxx11](char const*)>
    5bbe:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    5bc3:	48 8b 34 24          	mov    (%rsp),%rsi
    5bc7:	48 89 ef             	mov    %rbp,%rdi
    5bca:	e8 51 c7 ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    5bcf:	48 8b 3c 24          	mov    (%rsp),%rdi
    5bd3:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
    5bd8:	48 39 c7             	cmp    %rax,%rdi
    5bdb:	74 05                	je     5be2 <void test_type<double>()+0x72>
    5bdd:	e8 0e c7 ff ff       	callq  22f0 <operator delete(void*)@plt>
    5be2:	48 8d 3d 17 e9 ff ff 	lea    -0x16e9(%rip),%rdi        # 4500 <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])>
    5be9:	e8 42 fd ff ff       	callq  5930 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    5bee:	48 8d 3d 8b e9 ff ff 	lea    -0x1675(%rip),%rdi        # 4580 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])>
    5bf5:	e8 36 fd ff ff       	callq  5930 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    5bfa:	48 8d 3d 9f ea ff ff 	lea    -0x1561(%rip),%rdi        # 46a0 <void jik<double>(double (*) [128], double (*) [128], double (*) [128])>
    5c01:	e8 2a fd ff ff       	callq  5930 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    5c06:	48 8d 3d 13 eb ff ff 	lea    -0x14ed(%rip),%rdi        # 4720 <void jki<double>(double (*) [128], double (*) [128], double (*) [128])>
    5c0d:	e8 1e fd ff ff       	callq  5930 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    5c12:	48 8d 3d 87 eb ff ff 	lea    -0x1479(%rip),%rdi        # 47a0 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])>
    5c19:	e8 12 fd ff ff       	callq  5930 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    5c1e:	48 8d 3d 8b ec ff ff 	lea    -0x1375(%rip),%rdi        # 48b0 <void kji<double>(double (*) [128], double (*) [128], double (*) [128])>
    5c25:	e8 06 fd ff ff       	callq  5930 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    5c2a:	48 8b 05 0f 54 00 00 	mov    0x540f(%rip),%rax        # b040 <std::cout@@GLIBCXX_3.4>
    5c31:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    5c35:	48 8b ac 05 f0 00 00 	mov    0xf0(%rbp,%rax,1),%rbp
    5c3c:	00 
    5c3d:	48 85 ed             	test   %rbp,%rbp
    5c40:	74 6e                	je     5cb0 <void test_type<double>()+0x140>
    5c42:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
    5c46:	74 38                	je     5c80 <void test_type<double>()+0x110>
    5c48:	0f be 75 43          	movsbl 0x43(%rbp),%esi
    5c4c:	48 8d 3d ed 53 00 00 	lea    0x53ed(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    5c53:	e8 b8 c5 ff ff       	callq  2210 <std::ostream::put(char)@plt>
    5c58:	48 89 c7             	mov    %rax,%rdi
    5c5b:	e8 30 c6 ff ff       	callq  2290 <std::ostream::flush()@plt>
    5c60:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    5c65:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5c6c:	00 00 
    5c6e:	75 3b                	jne    5cab <void test_type<double>()+0x13b>
    5c70:	48 83 c4 30          	add    $0x30,%rsp
    5c74:	5d                   	pop    %rbp
    5c75:	c3                   	retq   
    5c76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    5c7d:	00 00 00 
    5c80:	48 89 ef             	mov    %rbp,%rdi
    5c83:	e8 a8 c6 ff ff       	callq  2330 <std::ctype<char>::_M_widen_init() const@plt>
    5c88:	48 8b 45 00          	mov    0x0(%rbp),%rax
    5c8c:	48 8d 15 3d ce ff ff 	lea    -0x31c3(%rip),%rdx        # 2ad0 <std::ctype<char>::do_widen(char) const>
    5c93:	48 8b 40 30          	mov    0x30(%rax),%rax
    5c97:	be 0a 00 00 00       	mov    $0xa,%esi
    5c9c:	48 39 d0             	cmp    %rdx,%rax
    5c9f:	74 ab                	je     5c4c <void test_type<double>()+0xdc>
    5ca1:	48 89 ef             	mov    %rbp,%rdi
    5ca4:	ff d0                	callq  *%rax
    5ca6:	0f be f0             	movsbl %al,%esi
    5ca9:	eb a1                	jmp    5c4c <void test_type<double>()+0xdc>
    5cab:	e8 60 c6 ff ff       	callq  2310 <__stack_chk_fail@plt>
    5cb0:	e8 9b c6 ff ff       	callq  2350 <std::__throw_bad_cast()@plt>
    5cb5:	f3 0f 1e fa          	endbr64 
    5cb9:	48 89 c5             	mov    %rax,%rbp
    5cbc:	48 8b 3c 24          	mov    (%rsp),%rdi
    5cc0:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
    5cc5:	48 39 c7             	cmp    %rax,%rdi
    5cc8:	74 10                	je     5cda <void test_type<double>()+0x16a>
    5cca:	c5 f8 77             	vzeroupper 
    5ccd:	e8 1e c6 ff ff       	callq  22f0 <operator delete(void*)@plt>
    5cd2:	48 89 ef             	mov    %rbp,%rdi
    5cd5:	e8 e6 c6 ff ff       	callq  23c0 <_Unwind_Resume@plt>
    5cda:	c5 f8 77             	vzeroupper 
    5cdd:	eb f3                	jmp    5cd2 <void test_type<double>()+0x162>
    5cdf:	90                   	nop

0000000000005ce0 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>:
    5ce0:	f3 0f 1e fa          	endbr64 
    5ce4:	41 57                	push   %r15
    5ce6:	41 56                	push   %r14
    5ce8:	41 55                	push   %r13
    5cea:	41 54                	push   %r12
    5cec:	55                   	push   %rbp
    5ced:	53                   	push   %rbx
    5cee:	4c 8d 9c 24 00 00 f4 	lea    -0xc0000(%rsp),%r11
    5cf5:	ff 
    5cf6:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    5cfd:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    5d02:	4c 39 dc             	cmp    %r11,%rsp
    5d05:	75 ef                	jne    5cf6 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x16>
    5d07:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
    5d0e:	ba 00 00 04 00       	mov    $0x40000,%edx
    5d13:	31 f6                	xor    %esi,%esi
    5d15:	4c 8d a4 24 20 01 00 	lea    0x120(%rsp),%r12
    5d1c:	00 
    5d1d:	48 89 fd             	mov    %rdi,%rbp
    5d20:	4c 89 e7             	mov    %r12,%rdi
    5d23:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5d2a:	00 00 
    5d2c:	48 89 84 24 28 01 0c 	mov    %rax,0xc0128(%rsp)
    5d33:	00 
    5d34:	31 c0                	xor    %eax,%eax
    5d36:	e8 25 c5 ff ff       	callq  2260 <memset@plt>
    5d3b:	d9 05 9f 28 00 00    	flds   0x289f(%rip)        # 85e0 <_IO_stdin_used+0x5e0>
    5d41:	48 8d 94 24 20 09 04 	lea    0x40920(%rsp),%rdx
    5d48:	00 
    5d49:	48 8d 8c 24 20 09 08 	lea    0x80920(%rsp),%rcx
    5d50:	00 
    5d51:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    5d58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    5d5f:	00 
    5d60:	db 38                	fstpt  (%rax)
    5d62:	db 28                	fldt   (%rax)
    5d64:	48 83 c0 10          	add    $0x10,%rax
    5d68:	48 39 d0             	cmp    %rdx,%rax
    5d6b:	75 f3                	jne    5d60 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x80>
    5d6d:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    5d74:	48 39 ca             	cmp    %rcx,%rdx
    5d77:	75 d8                	jne    5d51 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x71>
    5d79:	dd d8                	fstp   %st(0)
    5d7b:	d9 05 63 28 00 00    	flds   0x2863(%rip)        # 85e4 <_IO_stdin_used+0x5e4>
    5d81:	48 8d 8c 24 20 09 0c 	lea    0xc0920(%rsp),%rcx
    5d88:	00 
    5d89:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    5d90:	db 38                	fstpt  (%rax)
    5d92:	db 28                	fldt   (%rax)
    5d94:	48 83 c0 10          	add    $0x10,%rax
    5d98:	48 39 d0             	cmp    %rdx,%rax
    5d9b:	75 f3                	jne    5d90 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0xb0>
    5d9d:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    5da4:	48 39 ca             	cmp    %rcx,%rdx
    5da7:	75 e0                	jne    5d89 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0xa9>
    5da9:	dd d8                	fstp   %st(0)
    5dab:	4c 8d 7c 24 10       	lea    0x10(%rsp),%r15
    5db0:	48 8d 84 24 18 01 00 	lea    0x118(%rsp),%rax
    5db7:	00 
    5db8:	4c 89 7c 24 08       	mov    %r15,0x8(%rsp)
    5dbd:	48 89 04 24          	mov    %rax,(%rsp)
    5dc1:	4c 8d b4 24 20 01 08 	lea    0x80120(%rsp),%r14
    5dc8:	00 
    5dc9:	4c 8d ac 24 20 01 04 	lea    0x40120(%rsp),%r13
    5dd0:	00 
    5dd1:	e8 4a c4 ff ff       	callq  2220 <std::chrono::_V2::system_clock::now()@plt>
    5dd6:	4c 89 f2             	mov    %r14,%rdx
    5dd9:	4c 89 ee             	mov    %r13,%rsi
    5ddc:	4c 89 e7             	mov    %r12,%rdi
    5ddf:	48 89 c3             	mov    %rax,%rbx
    5de2:	ff d5                	callq  *%rbp
    5de4:	e8 37 c4 ff ff       	callq  2220 <std::chrono::_V2::system_clock::now()@plt>
    5de9:	48 29 d8             	sub    %rbx,%rax
    5dec:	c5 f1 57 c9          	vxorpd %xmm1,%xmm1,%xmm1
    5df0:	c4 e1 f3 2a c0       	vcvtsi2sd %rax,%xmm1,%xmm0
    5df5:	49 83 c7 08          	add    $0x8,%r15
    5df9:	c5 fb 5e 05 cf 26 00 	vdivsd 0x26cf(%rip),%xmm0,%xmm0        # 84d0 <_IO_stdin_used+0x4d0>
    5e00:	00 
    5e01:	c4 c1 7b 11 47 f8    	vmovsd %xmm0,-0x8(%r15)
    5e07:	4c 3b 3c 24          	cmp    (%rsp),%r15
    5e0b:	75 c4                	jne    5dd1 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0xf1>
    5e0d:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    5e12:	b9 0a 00 00 00       	mov    $0xa,%ecx
    5e17:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
    5e1e:	00 
    5e1f:	4c 89 fa             	mov    %r15,%rdx
    5e22:	e8 c9 c9 ff ff       	callq  27f0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]>
    5e27:	48 8d 35 be 22 00 00 	lea    0x22be(%rip),%rsi        # 80ec <_IO_stdin_used+0xec>
    5e2e:	ba 01 00 00 00       	mov    $0x1,%edx
    5e33:	48 8d 3d 06 52 00 00 	lea    0x5206(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    5e3a:	e8 e1 c4 ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    5e3f:	48 8b 0d fa 51 00 00 	mov    0x51fa(%rip),%rcx        # b040 <std::cout@@GLIBCXX_3.4>
    5e46:	48 8d 3d f3 51 00 00 	lea    0x51f3(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    5e4d:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    5e51:	c5 fb 10 84 24 90 00 	vmovsd 0x90(%rsp),%xmm0
    5e58:	00 00 
    5e5a:	48 01 fa             	add    %rdi,%rdx
    5e5d:	8b 42 18             	mov    0x18(%rdx),%eax
    5e60:	48 c7 42 08 02 00 00 	movq   $0x2,0x8(%rdx)
    5e67:	00 
    5e68:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    5e6d:	83 c8 04             	or     $0x4,%eax
    5e70:	89 42 18             	mov    %eax,0x18(%rdx)
    5e73:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    5e77:	48 c7 44 07 10 06 00 	movq   $0x6,0x10(%rdi,%rax,1)
    5e7e:	00 00 
    5e80:	e8 fb c4 ff ff       	callq  2380 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    5e85:	48 89 c7             	mov    %rax,%rdi
    5e88:	ba 02 00 00 00       	mov    $0x2,%edx
    5e8d:	48 8d 35 5a 22 00 00 	lea    0x225a(%rip),%rsi        # 80ee <_IO_stdin_used+0xee>
    5e94:	e8 87 c4 ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    5e99:	d9 05 49 27 00 00    	flds   0x2749(%rip)        # 85e8 <_IO_stdin_used+0x5e8>
    5e9f:	db ac 24 10 01 04 00 	fldt   0x40110(%rsp)
    5ea6:	df e9                	fucomip %st(1),%st
    5ea8:	dd d8                	fstp   %st(0)
    5eaa:	7a 27                	jp     5ed3 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x1f3>
    5eac:	75 25                	jne    5ed3 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x1f3>
    5eae:	48 8b 84 24 28 01 0c 	mov    0xc0128(%rsp),%rax
    5eb5:	00 
    5eb6:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5ebd:	00 00 
    5ebf:	75 31                	jne    5ef2 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x212>
    5ec1:	48 81 c4 38 01 0c 00 	add    $0xc0138,%rsp
    5ec8:	5b                   	pop    %rbx
    5ec9:	5d                   	pop    %rbp
    5eca:	41 5c                	pop    %r12
    5ecc:	41 5d                	pop    %r13
    5ece:	41 5e                	pop    %r14
    5ed0:	41 5f                	pop    %r15
    5ed2:	c3                   	retq   
    5ed3:	48 8d 0d 96 23 00 00 	lea    0x2396(%rip),%rcx        # 8270 <_IO_stdin_used+0x270>
    5eda:	ba 56 00 00 00       	mov    $0x56,%edx
    5edf:	48 8d 35 0b 22 00 00 	lea    0x220b(%rip),%rsi        # 80f1 <_IO_stdin_used+0xf1>
    5ee6:	48 8d 3d 83 22 00 00 	lea    0x2283(%rip),%rdi        # 8170 <_IO_stdin_used+0x170>
    5eed:	e8 7e c3 ff ff       	callq  2270 <__assert_fail@plt>
    5ef2:	e8 19 c4 ff ff       	callq  2310 <__stack_chk_fail@plt>
    5ef7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    5efe:	00 00 

0000000000005f00 <void test_type<long double>()>:
    5f00:	f3 0f 1e fa          	endbr64 
    5f04:	55                   	push   %rbp
    5f05:	48 8d 2d 34 51 00 00 	lea    0x5134(%rip),%rbp        # b040 <std::cout@@GLIBCXX_3.4>
    5f0c:	48 83 ec 30          	sub    $0x30,%rsp
    5f10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5f17:	00 00 
    5f19:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    5f1e:	31 c0                	xor    %eax,%eax
    5f20:	48 8b 05 19 51 00 00 	mov    0x5119(%rip),%rax        # b040 <std::cout@@GLIBCXX_3.4>
    5f27:	48 8b 35 5a 4d 00 00 	mov    0x4d5a(%rip),%rsi        # ac88 <typeinfo for long double@@CXXABI_1.3+0x8>
    5f2e:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    5f32:	48 89 e7             	mov    %rsp,%rdi
    5f35:	48 c7 44 05 10 0c 00 	movq   $0xc,0x10(%rbp,%rax,1)
    5f3c:	00 00 
    5f3e:	31 c0                	xor    %eax,%eax
    5f40:	80 3e 2a             	cmpb   $0x2a,(%rsi)
    5f43:	0f 94 c0             	sete   %al
    5f46:	48 01 c6             	add    %rax,%rsi
    5f49:	e8 a2 c6 ff ff       	callq  25f0 <ec::demangle[abi:cxx11](char const*)>
    5f4e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    5f53:	48 8b 34 24          	mov    (%rsp),%rsi
    5f57:	48 89 ef             	mov    %rbp,%rdi
    5f5a:	e8 c1 c3 ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    5f5f:	48 8b 3c 24          	mov    (%rsp),%rdi
    5f63:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
    5f68:	48 39 c7             	cmp    %rax,%rdi
    5f6b:	74 05                	je     5f72 <void test_type<long double>()+0x72>
    5f6d:	e8 7e c3 ff ff       	callq  22f0 <operator delete(void*)@plt>
    5f72:	48 8d 3d b7 e9 ff ff 	lea    -0x1649(%rip),%rdi        # 4930 <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    5f79:	e8 62 fd ff ff       	callq  5ce0 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    5f7e:	48 8d 3d 2b ea ff ff 	lea    -0x15d5(%rip),%rdi        # 49b0 <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    5f85:	e8 56 fd ff ff       	callq  5ce0 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    5f8a:	48 8d 3d 8f ea ff ff 	lea    -0x1571(%rip),%rdi        # 4a20 <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    5f91:	e8 4a fd ff ff       	callq  5ce0 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    5f96:	48 8d 3d 03 eb ff ff 	lea    -0x14fd(%rip),%rdi        # 4aa0 <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    5f9d:	e8 3e fd ff ff       	callq  5ce0 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    5fa2:	48 8d 3d 77 eb ff ff 	lea    -0x1489(%rip),%rdi        # 4b20 <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    5fa9:	e8 32 fd ff ff       	callq  5ce0 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    5fae:	48 8d 3d db eb ff ff 	lea    -0x1425(%rip),%rdi        # 4b90 <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    5fb5:	e8 26 fd ff ff       	callq  5ce0 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    5fba:	48 8b 05 7f 50 00 00 	mov    0x507f(%rip),%rax        # b040 <std::cout@@GLIBCXX_3.4>
    5fc1:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    5fc5:	48 8b ac 05 f0 00 00 	mov    0xf0(%rbp,%rax,1),%rbp
    5fcc:	00 
    5fcd:	48 85 ed             	test   %rbp,%rbp
    5fd0:	74 6e                	je     6040 <void test_type<long double>()+0x140>
    5fd2:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
    5fd6:	74 38                	je     6010 <void test_type<long double>()+0x110>
    5fd8:	0f be 75 43          	movsbl 0x43(%rbp),%esi
    5fdc:	48 8d 3d 5d 50 00 00 	lea    0x505d(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    5fe3:	e8 28 c2 ff ff       	callq  2210 <std::ostream::put(char)@plt>
    5fe8:	48 89 c7             	mov    %rax,%rdi
    5feb:	e8 a0 c2 ff ff       	callq  2290 <std::ostream::flush()@plt>
    5ff0:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    5ff5:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5ffc:	00 00 
    5ffe:	75 3b                	jne    603b <void test_type<long double>()+0x13b>
    6000:	48 83 c4 30          	add    $0x30,%rsp
    6004:	5d                   	pop    %rbp
    6005:	c3                   	retq   
    6006:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    600d:	00 00 00 
    6010:	48 89 ef             	mov    %rbp,%rdi
    6013:	e8 18 c3 ff ff       	callq  2330 <std::ctype<char>::_M_widen_init() const@plt>
    6018:	48 8b 45 00          	mov    0x0(%rbp),%rax
    601c:	48 8d 15 ad ca ff ff 	lea    -0x3553(%rip),%rdx        # 2ad0 <std::ctype<char>::do_widen(char) const>
    6023:	48 8b 40 30          	mov    0x30(%rax),%rax
    6027:	be 0a 00 00 00       	mov    $0xa,%esi
    602c:	48 39 d0             	cmp    %rdx,%rax
    602f:	74 ab                	je     5fdc <void test_type<long double>()+0xdc>
    6031:	48 89 ef             	mov    %rbp,%rdi
    6034:	ff d0                	callq  *%rax
    6036:	0f be f0             	movsbl %al,%esi
    6039:	eb a1                	jmp    5fdc <void test_type<long double>()+0xdc>
    603b:	e8 d0 c2 ff ff       	callq  2310 <__stack_chk_fail@plt>
    6040:	e8 0b c3 ff ff       	callq  2350 <std::__throw_bad_cast()@plt>
    6045:	f3 0f 1e fa          	endbr64 
    6049:	48 89 c5             	mov    %rax,%rbp
    604c:	48 8b 3c 24          	mov    (%rsp),%rdi
    6050:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
    6055:	48 39 c7             	cmp    %rax,%rdi
    6058:	74 10                	je     606a <void test_type<long double>()+0x16a>
    605a:	c5 f8 77             	vzeroupper 
    605d:	e8 8e c2 ff ff       	callq  22f0 <operator delete(void*)@plt>
    6062:	48 89 ef             	mov    %rbp,%rdi
    6065:	e8 56 c3 ff ff       	callq  23c0 <_Unwind_Resume@plt>
    606a:	c5 f8 77             	vzeroupper 
    606d:	eb f3                	jmp    6062 <void test_type<long double>()+0x162>
    606f:	90                   	nop

0000000000006070 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>:
    6070:	f3 0f 1e fa          	endbr64 
    6074:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    6079:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    607d:	41 ff 72 f8          	pushq  -0x8(%r10)
    6081:	55                   	push   %rbp
    6082:	48 89 e5             	mov    %rsp,%rbp
    6085:	41 57                	push   %r15
    6087:	41 56                	push   %r14
    6089:	41 55                	push   %r13
    608b:	41 54                	push   %r12
    608d:	41 52                	push   %r10
    608f:	53                   	push   %rbx
    6090:	4c 8d 9c 24 00 80 fe 	lea    -0x18000(%rsp),%r11
    6097:	ff 
    6098:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    609f:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    60a4:	4c 39 dc             	cmp    %r11,%rsp
    60a7:	75 ef                	jne    6098 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x28>
    60a9:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
    60b0:	ba 00 80 00 00       	mov    $0x8000,%edx
    60b5:	31 f6                	xor    %esi,%esi
    60b7:	48 89 bd 90 7e fe ff 	mov    %rdi,-0x18170(%rbp)
    60be:	4c 8d b5 c0 7f ff ff 	lea    -0x8040(%rbp),%r14
    60c5:	4c 89 f7             	mov    %r14,%rdi
    60c8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    60cf:	00 00 
    60d1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    60d5:	31 c0                	xor    %eax,%eax
    60d7:	4c 8d bd b0 7f fe ff 	lea    -0x18050(%rbp),%r15
    60de:	e8 7d c1 ff ff       	callq  2260 <memset@plt>
    60e3:	c5 fd 6f 05 35 24 00 	vmovdqa 0x2435(%rip),%ymm0        # 8520 <_IO_stdin_used+0x520>
    60ea:	00 
    60eb:	4c 89 f8             	mov    %r15,%rax
    60ee:	48 8d 9d b0 ff fe ff 	lea    -0x10050(%rbp),%rbx
    60f5:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    60f9:	c5 fd 7f 40 20       	vmovdqa %ymm0,0x20(%rax)
    60fe:	c5 fd 7f 40 40       	vmovdqa %ymm0,0x40(%rax)
    6103:	c5 fd 7f 40 60       	vmovdqa %ymm0,0x60(%rax)
    6108:	c5 fd 7f 80 80 00 00 	vmovdqa %ymm0,0x80(%rax)
    610f:	00 
    6110:	c5 fd 7f 80 a0 00 00 	vmovdqa %ymm0,0xa0(%rax)
    6117:	00 
    6118:	c5 fd 7f 80 c0 00 00 	vmovdqa %ymm0,0xc0(%rax)
    611f:	00 
    6120:	c5 fd 7f 80 e0 00 00 	vmovdqa %ymm0,0xe0(%rax)
    6127:	00 
    6128:	48 05 00 01 00 00    	add    $0x100,%rax
    612e:	48 39 d8             	cmp    %rbx,%rax
    6131:	75 c2                	jne    60f5 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x85>
    6133:	c5 fd 6f 05 05 24 00 	vmovdqa 0x2405(%rip),%ymm0        # 8540 <_IO_stdin_used+0x540>
    613a:	00 
    613b:	48 89 d8             	mov    %rbx,%rax
    613e:	48 8d 8d b0 7f ff ff 	lea    -0x8050(%rbp),%rcx
    6145:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    6149:	c5 fd 7f 40 20       	vmovdqa %ymm0,0x20(%rax)
    614e:	c5 fd 7f 40 40       	vmovdqa %ymm0,0x40(%rax)
    6153:	c5 fd 7f 40 60       	vmovdqa %ymm0,0x60(%rax)
    6158:	c5 fd 7f 80 80 00 00 	vmovdqa %ymm0,0x80(%rax)
    615f:	00 
    6160:	c5 fd 7f 80 a0 00 00 	vmovdqa %ymm0,0xa0(%rax)
    6167:	00 
    6168:	c5 fd 7f 80 c0 00 00 	vmovdqa %ymm0,0xc0(%rax)
    616f:	00 
    6170:	c5 fd 7f 80 e0 00 00 	vmovdqa %ymm0,0xe0(%rax)
    6177:	00 
    6178:	48 05 00 01 00 00    	add    $0x100,%rax
    617e:	48 39 c8             	cmp    %rcx,%rax
    6181:	75 c2                	jne    6145 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0xd5>
    6183:	48 8d 85 a0 7e fe ff 	lea    -0x18160(%rbp),%rax
    618a:	49 89 c4             	mov    %rax,%r12
    618d:	4c 8d ad a8 7f fe ff 	lea    -0x18058(%rbp),%r13
    6194:	48 89 85 88 7e fe ff 	mov    %rax,-0x18178(%rbp)
    619b:	c5 f8 77             	vzeroupper 
    619e:	e8 7d c0 ff ff       	callq  2220 <std::chrono::_V2::system_clock::now()@plt>
    61a3:	48 89 85 98 7e fe ff 	mov    %rax,-0x18168(%rbp)
    61aa:	48 8b 8d 90 7e fe ff 	mov    -0x18170(%rbp),%rcx
    61b1:	48 89 da             	mov    %rbx,%rdx
    61b4:	4c 89 fe             	mov    %r15,%rsi
    61b7:	4c 89 f7             	mov    %r14,%rdi
    61ba:	ff d1                	callq  *%rcx
    61bc:	e8 5f c0 ff ff       	callq  2220 <std::chrono::_V2::system_clock::now()@plt>
    61c1:	48 2b 85 98 7e fe ff 	sub    -0x18168(%rbp),%rax
    61c8:	c5 f1 57 c9          	vxorpd %xmm1,%xmm1,%xmm1
    61cc:	c4 e1 f3 2a c0       	vcvtsi2sd %rax,%xmm1,%xmm0
    61d1:	49 83 c4 08          	add    $0x8,%r12
    61d5:	c5 fb 5e 05 f3 22 00 	vdivsd 0x22f3(%rip),%xmm0,%xmm0        # 84d0 <_IO_stdin_used+0x4d0>
    61dc:	00 
    61dd:	c4 c1 7b 11 44 24 f8 	vmovsd %xmm0,-0x8(%r12)
    61e4:	4d 39 e5             	cmp    %r12,%r13
    61e7:	75 b5                	jne    619e <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x12e>
    61e9:	48 8b bd 88 7e fe ff 	mov    -0x18178(%rbp),%rdi
    61f0:	b9 0a 00 00 00       	mov    $0xa,%ecx
    61f5:	48 8d b5 20 7f fe ff 	lea    -0x180e0(%rbp),%rsi
    61fc:	4c 89 ea             	mov    %r13,%rdx
    61ff:	e8 ec c5 ff ff       	callq  27f0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]>
    6204:	48 8d 35 e1 1e 00 00 	lea    0x1ee1(%rip),%rsi        # 80ec <_IO_stdin_used+0xec>
    620b:	ba 01 00 00 00       	mov    $0x1,%edx
    6210:	48 8d 3d 29 4e 00 00 	lea    0x4e29(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    6217:	e8 04 c1 ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    621c:	48 8b 0d 1d 4e 00 00 	mov    0x4e1d(%rip),%rcx        # b040 <std::cout@@GLIBCXX_3.4>
    6223:	48 8d 3d 16 4e 00 00 	lea    0x4e16(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    622a:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    622e:	c5 fb 10 85 20 7f fe 	vmovsd -0x180e0(%rbp),%xmm0
    6235:	ff 
    6236:	48 01 fa             	add    %rdi,%rdx
    6239:	8b 42 18             	mov    0x18(%rdx),%eax
    623c:	48 c7 42 08 02 00 00 	movq   $0x2,0x8(%rdx)
    6243:	00 
    6244:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    6249:	83 c8 04             	or     $0x4,%eax
    624c:	89 42 18             	mov    %eax,0x18(%rdx)
    624f:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    6253:	48 c7 44 07 10 06 00 	movq   $0x6,0x10(%rdi,%rax,1)
    625a:	00 00 
    625c:	e8 1f c1 ff ff       	callq  2380 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    6261:	48 89 c7             	mov    %rax,%rdi
    6264:	ba 02 00 00 00       	mov    $0x2,%edx
    6269:	48 8d 35 7e 1e 00 00 	lea    0x1e7e(%rip),%rsi        # 80ee <_IO_stdin_used+0xee>
    6270:	e8 ab c0 ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    6275:	66 81 7d be 00 63    	cmpw   $0x6300,-0x42(%rbp)
    627b:	75 27                	jne    62a4 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x234>
    627d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6281:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6288:	00 00 
    628a:	75 37                	jne    62c3 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x253>
    628c:	48 81 c4 60 81 01 00 	add    $0x18160,%rsp
    6293:	5b                   	pop    %rbx
    6294:	41 5a                	pop    %r10
    6296:	41 5c                	pop    %r12
    6298:	41 5d                	pop    %r13
    629a:	41 5e                	pop    %r14
    629c:	41 5f                	pop    %r15
    629e:	5d                   	pop    %rbp
    629f:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    62a3:	c3                   	retq   
    62a4:	48 8d 0d 45 20 00 00 	lea    0x2045(%rip),%rcx        # 82f0 <_IO_stdin_used+0x2f0>
    62ab:	ba 56 00 00 00       	mov    $0x56,%edx
    62b0:	48 8d 35 3a 1e 00 00 	lea    0x1e3a(%rip),%rsi        # 80f1 <_IO_stdin_used+0xf1>
    62b7:	48 8d 3d b2 1e 00 00 	lea    0x1eb2(%rip),%rdi        # 8170 <_IO_stdin_used+0x170>
    62be:	e8 ad bf ff ff       	callq  2270 <__assert_fail@plt>
    62c3:	e8 48 c0 ff ff       	callq  2310 <__stack_chk_fail@plt>
    62c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    62cf:	00 

00000000000062d0 <void test_type<short>()>:
    62d0:	f3 0f 1e fa          	endbr64 
    62d4:	55                   	push   %rbp
    62d5:	48 8d 2d 64 4d 00 00 	lea    0x4d64(%rip),%rbp        # b040 <std::cout@@GLIBCXX_3.4>
    62dc:	48 83 ec 30          	sub    $0x30,%rsp
    62e0:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    62e7:	00 00 
    62e9:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    62ee:	31 c0                	xor    %eax,%eax
    62f0:	48 8b 05 49 4d 00 00 	mov    0x4d49(%rip),%rax        # b040 <std::cout@@GLIBCXX_3.4>
    62f7:	48 8b 35 2a 49 00 00 	mov    0x492a(%rip),%rsi        # ac28 <typeinfo for short@@CXXABI_1.3+0x8>
    62fe:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    6302:	48 89 e7             	mov    %rsp,%rdi
    6305:	48 c7 44 05 10 0c 00 	movq   $0xc,0x10(%rbp,%rax,1)
    630c:	00 00 
    630e:	31 c0                	xor    %eax,%eax
    6310:	80 3e 2a             	cmpb   $0x2a,(%rsi)
    6313:	0f 94 c0             	sete   %al
    6316:	48 01 c6             	add    %rax,%rsi
    6319:	e8 d2 c2 ff ff       	callq  25f0 <ec::demangle[abi:cxx11](char const*)>
    631e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    6323:	48 8b 34 24          	mov    (%rsp),%rsi
    6327:	48 89 ef             	mov    %rbp,%rdi
    632a:	e8 f1 bf ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    632f:	48 8b 3c 24          	mov    (%rsp),%rdi
    6333:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
    6338:	48 39 c7             	cmp    %rax,%rdi
    633b:	74 05                	je     6342 <void test_type<short>()+0x72>
    633d:	e8 ae bf ff ff       	callq  22f0 <operator delete(void*)@plt>
    6342:	48 8d 3d 97 c7 ff ff 	lea    -0x3869(%rip),%rdi        # 2ae0 <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])>
    6349:	e8 22 fd ff ff       	callq  6070 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    634e:	48 8d 3d 0b c8 ff ff 	lea    -0x37f5(%rip),%rdi        # 2b60 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])>
    6355:	e8 16 fd ff ff       	callq  6070 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    635a:	48 8d 3d 7f c9 ff ff 	lea    -0x3681(%rip),%rdi        # 2ce0 <void jik<short>(short (*) [128], short (*) [128], short (*) [128])>
    6361:	e8 0a fd ff ff       	callq  6070 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    6366:	48 8d 3d f3 c9 ff ff 	lea    -0x360d(%rip),%rdi        # 2d60 <void jki<short>(short (*) [128], short (*) [128], short (*) [128])>
    636d:	e8 fe fc ff ff       	callq  6070 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    6372:	48 8d 3d 57 ca ff ff 	lea    -0x35a9(%rip),%rdi        # 2dd0 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])>
    6379:	e8 f2 fc ff ff       	callq  6070 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    637e:	48 8d 3d bb cb ff ff 	lea    -0x3445(%rip),%rdi        # 2f40 <void kji<short>(short (*) [128], short (*) [128], short (*) [128])>
    6385:	e8 e6 fc ff ff       	callq  6070 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    638a:	48 8b 05 af 4c 00 00 	mov    0x4caf(%rip),%rax        # b040 <std::cout@@GLIBCXX_3.4>
    6391:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    6395:	48 8b ac 05 f0 00 00 	mov    0xf0(%rbp,%rax,1),%rbp
    639c:	00 
    639d:	48 85 ed             	test   %rbp,%rbp
    63a0:	74 6e                	je     6410 <void test_type<short>()+0x140>
    63a2:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
    63a6:	74 38                	je     63e0 <void test_type<short>()+0x110>
    63a8:	0f be 75 43          	movsbl 0x43(%rbp),%esi
    63ac:	48 8d 3d 8d 4c 00 00 	lea    0x4c8d(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    63b3:	e8 58 be ff ff       	callq  2210 <std::ostream::put(char)@plt>
    63b8:	48 89 c7             	mov    %rax,%rdi
    63bb:	e8 d0 be ff ff       	callq  2290 <std::ostream::flush()@plt>
    63c0:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    63c5:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    63cc:	00 00 
    63ce:	75 3b                	jne    640b <void test_type<short>()+0x13b>
    63d0:	48 83 c4 30          	add    $0x30,%rsp
    63d4:	5d                   	pop    %rbp
    63d5:	c3                   	retq   
    63d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    63dd:	00 00 00 
    63e0:	48 89 ef             	mov    %rbp,%rdi
    63e3:	e8 48 bf ff ff       	callq  2330 <std::ctype<char>::_M_widen_init() const@plt>
    63e8:	48 8b 45 00          	mov    0x0(%rbp),%rax
    63ec:	48 8d 15 dd c6 ff ff 	lea    -0x3923(%rip),%rdx        # 2ad0 <std::ctype<char>::do_widen(char) const>
    63f3:	48 8b 40 30          	mov    0x30(%rax),%rax
    63f7:	be 0a 00 00 00       	mov    $0xa,%esi
    63fc:	48 39 d0             	cmp    %rdx,%rax
    63ff:	74 ab                	je     63ac <void test_type<short>()+0xdc>
    6401:	48 89 ef             	mov    %rbp,%rdi
    6404:	ff d0                	callq  *%rax
    6406:	0f be f0             	movsbl %al,%esi
    6409:	eb a1                	jmp    63ac <void test_type<short>()+0xdc>
    640b:	e8 00 bf ff ff       	callq  2310 <__stack_chk_fail@plt>
    6410:	e8 3b bf ff ff       	callq  2350 <std::__throw_bad_cast()@plt>
    6415:	f3 0f 1e fa          	endbr64 
    6419:	48 89 c5             	mov    %rax,%rbp
    641c:	48 8b 3c 24          	mov    (%rsp),%rdi
    6420:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
    6425:	48 39 c7             	cmp    %rax,%rdi
    6428:	74 10                	je     643a <void test_type<short>()+0x16a>
    642a:	c5 f8 77             	vzeroupper 
    642d:	e8 be be ff ff       	callq  22f0 <operator delete(void*)@plt>
    6432:	48 89 ef             	mov    %rbp,%rdi
    6435:	e8 86 bf ff ff       	callq  23c0 <_Unwind_Resume@plt>
    643a:	c5 f8 77             	vzeroupper 
    643d:	eb f3                	jmp    6432 <void test_type<short>()+0x162>
    643f:	90                   	nop

0000000000006440 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>:
    6440:	f3 0f 1e fa          	endbr64 
    6444:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    6449:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    644d:	41 ff 72 f8          	pushq  -0x8(%r10)
    6451:	55                   	push   %rbp
    6452:	48 89 e5             	mov    %rsp,%rbp
    6455:	41 57                	push   %r15
    6457:	41 56                	push   %r14
    6459:	41 55                	push   %r13
    645b:	41 54                	push   %r12
    645d:	41 52                	push   %r10
    645f:	53                   	push   %rbx
    6460:	4c 8d 9c 24 00 00 fd 	lea    -0x30000(%rsp),%r11
    6467:	ff 
    6468:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    646f:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    6474:	4c 39 dc             	cmp    %r11,%rsp
    6477:	75 ef                	jne    6468 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x28>
    6479:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
    6480:	ba 00 00 01 00       	mov    $0x10000,%edx
    6485:	31 f6                	xor    %esi,%esi
    6487:	48 89 bd 90 fe fc ff 	mov    %rdi,-0x30170(%rbp)
    648e:	4c 8d b5 c0 ff fe ff 	lea    -0x10040(%rbp),%r14
    6495:	4c 89 f7             	mov    %r14,%rdi
    6498:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    649f:	00 00 
    64a1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    64a5:	31 c0                	xor    %eax,%eax
    64a7:	4c 8d bd b0 ff fc ff 	lea    -0x30050(%rbp),%r15
    64ae:	e8 ad bd ff ff       	callq  2260 <memset@plt>
    64b3:	c5 fd 6f 05 a5 20 00 	vmovdqa 0x20a5(%rip),%ymm0        # 8560 <_IO_stdin_used+0x560>
    64ba:	00 
    64bb:	4c 89 f8             	mov    %r15,%rax
    64be:	48 8d 9d b0 ff fd ff 	lea    -0x20050(%rbp),%rbx
    64c5:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    64c9:	c5 fd 7f 40 20       	vmovdqa %ymm0,0x20(%rax)
    64ce:	c5 fd 7f 40 40       	vmovdqa %ymm0,0x40(%rax)
    64d3:	c5 fd 7f 40 60       	vmovdqa %ymm0,0x60(%rax)
    64d8:	c5 fd 7f 80 80 00 00 	vmovdqa %ymm0,0x80(%rax)
    64df:	00 
    64e0:	c5 fd 7f 80 a0 00 00 	vmovdqa %ymm0,0xa0(%rax)
    64e7:	00 
    64e8:	c5 fd 7f 80 c0 00 00 	vmovdqa %ymm0,0xc0(%rax)
    64ef:	00 
    64f0:	c5 fd 7f 80 e0 00 00 	vmovdqa %ymm0,0xe0(%rax)
    64f7:	00 
    64f8:	c5 fd 7f 80 00 01 00 	vmovdqa %ymm0,0x100(%rax)
    64ff:	00 
    6500:	c5 fd 7f 80 20 01 00 	vmovdqa %ymm0,0x120(%rax)
    6507:	00 
    6508:	c5 fd 7f 80 40 01 00 	vmovdqa %ymm0,0x140(%rax)
    650f:	00 
    6510:	c5 fd 7f 80 60 01 00 	vmovdqa %ymm0,0x160(%rax)
    6517:	00 
    6518:	c5 fd 7f 80 80 01 00 	vmovdqa %ymm0,0x180(%rax)
    651f:	00 
    6520:	c5 fd 7f 80 a0 01 00 	vmovdqa %ymm0,0x1a0(%rax)
    6527:	00 
    6528:	c5 fd 7f 80 c0 01 00 	vmovdqa %ymm0,0x1c0(%rax)
    652f:	00 
    6530:	c5 fd 7f 80 e0 01 00 	vmovdqa %ymm0,0x1e0(%rax)
    6537:	00 
    6538:	48 05 00 02 00 00    	add    $0x200,%rax
    653e:	48 39 d8             	cmp    %rbx,%rax
    6541:	75 82                	jne    64c5 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x85>
    6543:	c5 fd 6f 05 35 20 00 	vmovdqa 0x2035(%rip),%ymm0        # 8580 <_IO_stdin_used+0x580>
    654a:	00 
    654b:	48 89 d8             	mov    %rbx,%rax
    654e:	48 8d 8d b0 ff fe ff 	lea    -0x10050(%rbp),%rcx
    6555:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    6559:	c5 fd 7f 40 20       	vmovdqa %ymm0,0x20(%rax)
    655e:	c5 fd 7f 40 40       	vmovdqa %ymm0,0x40(%rax)
    6563:	c5 fd 7f 40 60       	vmovdqa %ymm0,0x60(%rax)
    6568:	c5 fd 7f 80 80 00 00 	vmovdqa %ymm0,0x80(%rax)
    656f:	00 
    6570:	c5 fd 7f 80 a0 00 00 	vmovdqa %ymm0,0xa0(%rax)
    6577:	00 
    6578:	c5 fd 7f 80 c0 00 00 	vmovdqa %ymm0,0xc0(%rax)
    657f:	00 
    6580:	c5 fd 7f 80 e0 00 00 	vmovdqa %ymm0,0xe0(%rax)
    6587:	00 
    6588:	c5 fd 7f 80 00 01 00 	vmovdqa %ymm0,0x100(%rax)
    658f:	00 
    6590:	c5 fd 7f 80 20 01 00 	vmovdqa %ymm0,0x120(%rax)
    6597:	00 
    6598:	c5 fd 7f 80 40 01 00 	vmovdqa %ymm0,0x140(%rax)
    659f:	00 
    65a0:	c5 fd 7f 80 60 01 00 	vmovdqa %ymm0,0x160(%rax)
    65a7:	00 
    65a8:	c5 fd 7f 80 80 01 00 	vmovdqa %ymm0,0x180(%rax)
    65af:	00 
    65b0:	c5 fd 7f 80 a0 01 00 	vmovdqa %ymm0,0x1a0(%rax)
    65b7:	00 
    65b8:	c5 fd 7f 80 c0 01 00 	vmovdqa %ymm0,0x1c0(%rax)
    65bf:	00 
    65c0:	c5 fd 7f 80 e0 01 00 	vmovdqa %ymm0,0x1e0(%rax)
    65c7:	00 
    65c8:	48 05 00 02 00 00    	add    $0x200,%rax
    65ce:	48 39 c1             	cmp    %rax,%rcx
    65d1:	75 82                	jne    6555 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x115>
    65d3:	48 8d 85 a0 fe fc ff 	lea    -0x30160(%rbp),%rax
    65da:	49 89 c4             	mov    %rax,%r12
    65dd:	4c 8d ad a8 ff fc ff 	lea    -0x30058(%rbp),%r13
    65e4:	48 89 85 88 fe fc ff 	mov    %rax,-0x30178(%rbp)
    65eb:	c5 f8 77             	vzeroupper 
    65ee:	e8 2d bc ff ff       	callq  2220 <std::chrono::_V2::system_clock::now()@plt>
    65f3:	48 89 85 98 fe fc ff 	mov    %rax,-0x30168(%rbp)
    65fa:	48 8b 8d 90 fe fc ff 	mov    -0x30170(%rbp),%rcx
    6601:	48 89 da             	mov    %rbx,%rdx
    6604:	4c 89 fe             	mov    %r15,%rsi
    6607:	4c 89 f7             	mov    %r14,%rdi
    660a:	ff d1                	callq  *%rcx
    660c:	e8 0f bc ff ff       	callq  2220 <std::chrono::_V2::system_clock::now()@plt>
    6611:	48 2b 85 98 fe fc ff 	sub    -0x30168(%rbp),%rax
    6618:	c5 f1 57 c9          	vxorpd %xmm1,%xmm1,%xmm1
    661c:	c4 e1 f3 2a c0       	vcvtsi2sd %rax,%xmm1,%xmm0
    6621:	49 83 c4 08          	add    $0x8,%r12
    6625:	c5 fb 5e 05 a3 1e 00 	vdivsd 0x1ea3(%rip),%xmm0,%xmm0        # 84d0 <_IO_stdin_used+0x4d0>
    662c:	00 
    662d:	c4 c1 7b 11 44 24 f8 	vmovsd %xmm0,-0x8(%r12)
    6634:	4d 39 e5             	cmp    %r12,%r13
    6637:	75 b5                	jne    65ee <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x1ae>
    6639:	48 8b bd 88 fe fc ff 	mov    -0x30178(%rbp),%rdi
    6640:	b9 0a 00 00 00       	mov    $0xa,%ecx
    6645:	48 8d b5 20 ff fc ff 	lea    -0x300e0(%rbp),%rsi
    664c:	4c 89 ea             	mov    %r13,%rdx
    664f:	e8 9c c1 ff ff       	callq  27f0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]>
    6654:	48 8d 35 91 1a 00 00 	lea    0x1a91(%rip),%rsi        # 80ec <_IO_stdin_used+0xec>
    665b:	ba 01 00 00 00       	mov    $0x1,%edx
    6660:	48 8d 3d d9 49 00 00 	lea    0x49d9(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    6667:	e8 b4 bc ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    666c:	48 8b 0d cd 49 00 00 	mov    0x49cd(%rip),%rcx        # b040 <std::cout@@GLIBCXX_3.4>
    6673:	48 8d 3d c6 49 00 00 	lea    0x49c6(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    667a:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    667e:	c5 fb 10 85 20 ff fc 	vmovsd -0x300e0(%rbp),%xmm0
    6685:	ff 
    6686:	48 01 fa             	add    %rdi,%rdx
    6689:	8b 42 18             	mov    0x18(%rdx),%eax
    668c:	48 c7 42 08 02 00 00 	movq   $0x2,0x8(%rdx)
    6693:	00 
    6694:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    6699:	83 c8 04             	or     $0x4,%eax
    669c:	89 42 18             	mov    %eax,0x18(%rdx)
    669f:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    66a3:	48 c7 44 07 10 06 00 	movq   $0x6,0x10(%rdi,%rax,1)
    66aa:	00 00 
    66ac:	e8 cf bc ff ff       	callq  2380 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    66b1:	48 89 c7             	mov    %rax,%rdi
    66b4:	ba 02 00 00 00       	mov    $0x2,%edx
    66b9:	48 8d 35 2e 1a 00 00 	lea    0x1a2e(%rip),%rsi        # 80ee <_IO_stdin_used+0xee>
    66c0:	e8 5b bc ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    66c5:	81 7d bc 00 63 00 00 	cmpl   $0x6300,-0x44(%rbp)
    66cc:	75 27                	jne    66f5 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x2b5>
    66ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    66d2:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    66d9:	00 00 
    66db:	75 37                	jne    6714 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x2d4>
    66dd:	48 81 c4 60 01 03 00 	add    $0x30160,%rsp
    66e4:	5b                   	pop    %rbx
    66e5:	41 5a                	pop    %r10
    66e7:	41 5c                	pop    %r12
    66e9:	41 5d                	pop    %r13
    66eb:	41 5e                	pop    %r14
    66ed:	41 5f                	pop    %r15
    66ef:	5d                   	pop    %rbp
    66f0:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    66f4:	c3                   	retq   
    66f5:	48 8d 0d 6c 1c 00 00 	lea    0x1c6c(%rip),%rcx        # 8368 <_IO_stdin_used+0x368>
    66fc:	ba 56 00 00 00       	mov    $0x56,%edx
    6701:	48 8d 35 e9 19 00 00 	lea    0x19e9(%rip),%rsi        # 80f1 <_IO_stdin_used+0xf1>
    6708:	48 8d 3d 61 1a 00 00 	lea    0x1a61(%rip),%rdi        # 8170 <_IO_stdin_used+0x170>
    670f:	e8 5c bb ff ff       	callq  2270 <__assert_fail@plt>
    6714:	e8 f7 bb ff ff       	callq  2310 <__stack_chk_fail@plt>
    6719:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000006720 <void test_type<int>()>:
    6720:	f3 0f 1e fa          	endbr64 
    6724:	55                   	push   %rbp
    6725:	48 8d 2d 14 49 00 00 	lea    0x4914(%rip),%rbp        # b040 <std::cout@@GLIBCXX_3.4>
    672c:	48 83 ec 30          	sub    $0x30,%rsp
    6730:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6737:	00 00 
    6739:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    673e:	31 c0                	xor    %eax,%eax
    6740:	48 8b 05 f9 48 00 00 	mov    0x48f9(%rip),%rax        # b040 <std::cout@@GLIBCXX_3.4>
    6747:	48 8b 35 ba 44 00 00 	mov    0x44ba(%rip),%rsi        # ac08 <typeinfo for int@@CXXABI_1.3+0x8>
    674e:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    6752:	48 89 e7             	mov    %rsp,%rdi
    6755:	48 c7 44 05 10 0c 00 	movq   $0xc,0x10(%rbp,%rax,1)
    675c:	00 00 
    675e:	31 c0                	xor    %eax,%eax
    6760:	80 3e 2a             	cmpb   $0x2a,(%rsi)
    6763:	0f 94 c0             	sete   %al
    6766:	48 01 c6             	add    %rax,%rsi
    6769:	e8 82 be ff ff       	callq  25f0 <ec::demangle[abi:cxx11](char const*)>
    676e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    6773:	48 8b 34 24          	mov    (%rsp),%rsi
    6777:	48 89 ef             	mov    %rbp,%rdi
    677a:	e8 a1 bb ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    677f:	48 8b 3c 24          	mov    (%rsp),%rdi
    6783:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
    6788:	48 39 c7             	cmp    %rax,%rdi
    678b:	74 05                	je     6792 <void test_type<int>()+0x72>
    678d:	e8 5e bb ff ff       	callq  22f0 <operator delete(void*)@plt>
    6792:	48 8d 3d 17 c8 ff ff 	lea    -0x37e9(%rip),%rdi        # 2fb0 <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])>
    6799:	e8 a2 fc ff ff       	callq  6440 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    679e:	48 8d 3d 8b c8 ff ff 	lea    -0x3775(%rip),%rdi        # 3030 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])>
    67a5:	e8 96 fc ff ff       	callq  6440 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    67aa:	48 8d 3d cf ca ff ff 	lea    -0x3531(%rip),%rdi        # 3280 <void jik<int>(int (*) [128], int (*) [128], int (*) [128])>
    67b1:	e8 8a fc ff ff       	callq  6440 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    67b6:	48 8d 3d 43 cb ff ff 	lea    -0x34bd(%rip),%rdi        # 3300 <void jki<int>(int (*) [128], int (*) [128], int (*) [128])>
    67bd:	e8 7e fc ff ff       	callq  6440 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    67c2:	48 8d 3d a7 cb ff ff 	lea    -0x3459(%rip),%rdi        # 3370 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])>
    67c9:	e8 72 fc ff ff       	callq  6440 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    67ce:	48 8d 3d db cd ff ff 	lea    -0x3225(%rip),%rdi        # 35b0 <void kji<int>(int (*) [128], int (*) [128], int (*) [128])>
    67d5:	e8 66 fc ff ff       	callq  6440 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    67da:	48 8b 05 5f 48 00 00 	mov    0x485f(%rip),%rax        # b040 <std::cout@@GLIBCXX_3.4>
    67e1:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    67e5:	48 8b ac 05 f0 00 00 	mov    0xf0(%rbp,%rax,1),%rbp
    67ec:	00 
    67ed:	48 85 ed             	test   %rbp,%rbp
    67f0:	74 6e                	je     6860 <void test_type<int>()+0x140>
    67f2:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
    67f6:	74 38                	je     6830 <void test_type<int>()+0x110>
    67f8:	0f be 75 43          	movsbl 0x43(%rbp),%esi
    67fc:	48 8d 3d 3d 48 00 00 	lea    0x483d(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    6803:	e8 08 ba ff ff       	callq  2210 <std::ostream::put(char)@plt>
    6808:	48 89 c7             	mov    %rax,%rdi
    680b:	e8 80 ba ff ff       	callq  2290 <std::ostream::flush()@plt>
    6810:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    6815:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    681c:	00 00 
    681e:	75 3b                	jne    685b <void test_type<int>()+0x13b>
    6820:	48 83 c4 30          	add    $0x30,%rsp
    6824:	5d                   	pop    %rbp
    6825:	c3                   	retq   
    6826:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    682d:	00 00 00 
    6830:	48 89 ef             	mov    %rbp,%rdi
    6833:	e8 f8 ba ff ff       	callq  2330 <std::ctype<char>::_M_widen_init() const@plt>
    6838:	48 8b 45 00          	mov    0x0(%rbp),%rax
    683c:	48 8d 15 8d c2 ff ff 	lea    -0x3d73(%rip),%rdx        # 2ad0 <std::ctype<char>::do_widen(char) const>
    6843:	48 8b 40 30          	mov    0x30(%rax),%rax
    6847:	be 0a 00 00 00       	mov    $0xa,%esi
    684c:	48 39 d0             	cmp    %rdx,%rax
    684f:	74 ab                	je     67fc <void test_type<int>()+0xdc>
    6851:	48 89 ef             	mov    %rbp,%rdi
    6854:	ff d0                	callq  *%rax
    6856:	0f be f0             	movsbl %al,%esi
    6859:	eb a1                	jmp    67fc <void test_type<int>()+0xdc>
    685b:	e8 b0 ba ff ff       	callq  2310 <__stack_chk_fail@plt>
    6860:	e8 eb ba ff ff       	callq  2350 <std::__throw_bad_cast()@plt>
    6865:	f3 0f 1e fa          	endbr64 
    6869:	48 89 c5             	mov    %rax,%rbp
    686c:	48 8b 3c 24          	mov    (%rsp),%rdi
    6870:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
    6875:	48 39 c7             	cmp    %rax,%rdi
    6878:	74 10                	je     688a <void test_type<int>()+0x16a>
    687a:	c5 f8 77             	vzeroupper 
    687d:	e8 6e ba ff ff       	callq  22f0 <operator delete(void*)@plt>
    6882:	48 89 ef             	mov    %rbp,%rdi
    6885:	e8 36 bb ff ff       	callq  23c0 <_Unwind_Resume@plt>
    688a:	c5 f8 77             	vzeroupper 
    688d:	eb f3                	jmp    6882 <void test_type<int>()+0x162>
    688f:	90                   	nop

0000000000006890 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>:
    6890:	f3 0f 1e fa          	endbr64 
    6894:	41 57                	push   %r15
    6896:	41 56                	push   %r14
    6898:	41 55                	push   %r13
    689a:	41 54                	push   %r12
    689c:	55                   	push   %rbp
    689d:	53                   	push   %rbx
    689e:	4c 8d 9c 24 00 00 fa 	lea    -0x60000(%rsp),%r11
    68a5:	ff 
    68a6:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    68ad:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    68b2:	4c 39 dc             	cmp    %r11,%rsp
    68b5:	75 ef                	jne    68a6 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x16>
    68b7:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
    68be:	ba 00 00 02 00       	mov    $0x20000,%edx
    68c3:	31 f6                	xor    %esi,%esi
    68c5:	4c 8d a4 24 20 01 00 	lea    0x120(%rsp),%r12
    68cc:	00 
    68cd:	48 89 fd             	mov    %rdi,%rbp
    68d0:	4c 89 e7             	mov    %r12,%rdi
    68d3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    68da:	00 00 
    68dc:	48 89 84 24 28 01 06 	mov    %rax,0x60128(%rsp)
    68e3:	00 
    68e4:	31 c0                	xor    %eax,%eax
    68e6:	e8 75 b9 ff ff       	callq  2260 <memset@plt>
    68eb:	48 8d 94 24 20 05 02 	lea    0x20520(%rsp),%rdx
    68f2:	00 
    68f3:	48 8d 8c 24 20 05 04 	lea    0x40520(%rsp),%rcx
    68fa:	00 
    68fb:	48 8d 82 00 fc ff ff 	lea    -0x400(%rdx),%rax
    6902:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    6908:	48 c7 00 02 00 00 00 	movq   $0x2,(%rax)
    690f:	48 83 c0 08          	add    $0x8,%rax
    6913:	48 39 d0             	cmp    %rdx,%rax
    6916:	75 f0                	jne    6908 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x78>
    6918:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
    691f:	48 39 ca             	cmp    %rcx,%rdx
    6922:	75 d7                	jne    68fb <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x6b>
    6924:	48 8d 8c 24 20 05 06 	lea    0x60520(%rsp),%rcx
    692b:	00 
    692c:	48 8d 82 00 fc ff ff 	lea    -0x400(%rdx),%rax
    6933:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    6938:	48 c7 00 03 00 00 00 	movq   $0x3,(%rax)
    693f:	48 83 c0 08          	add    $0x8,%rax
    6943:	48 39 d0             	cmp    %rdx,%rax
    6946:	75 f0                	jne    6938 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0xa8>
    6948:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
    694f:	48 39 ca             	cmp    %rcx,%rdx
    6952:	75 d8                	jne    692c <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x9c>
    6954:	4c 8d 7c 24 10       	lea    0x10(%rsp),%r15
    6959:	48 8d 84 24 18 01 00 	lea    0x118(%rsp),%rax
    6960:	00 
    6961:	4c 89 7c 24 08       	mov    %r15,0x8(%rsp)
    6966:	48 89 04 24          	mov    %rax,(%rsp)
    696a:	4c 8d b4 24 20 01 04 	lea    0x40120(%rsp),%r14
    6971:	00 
    6972:	4c 8d ac 24 20 01 02 	lea    0x20120(%rsp),%r13
    6979:	00 
    697a:	e8 a1 b8 ff ff       	callq  2220 <std::chrono::_V2::system_clock::now()@plt>
    697f:	4c 89 f2             	mov    %r14,%rdx
    6982:	4c 89 ee             	mov    %r13,%rsi
    6985:	4c 89 e7             	mov    %r12,%rdi
    6988:	48 89 c3             	mov    %rax,%rbx
    698b:	ff d5                	callq  *%rbp
    698d:	e8 8e b8 ff ff       	callq  2220 <std::chrono::_V2::system_clock::now()@plt>
    6992:	48 29 d8             	sub    %rbx,%rax
    6995:	c5 f1 57 c9          	vxorpd %xmm1,%xmm1,%xmm1
    6999:	c4 e1 f3 2a c0       	vcvtsi2sd %rax,%xmm1,%xmm0
    699e:	49 83 c7 08          	add    $0x8,%r15
    69a2:	c5 fb 5e 05 26 1b 00 	vdivsd 0x1b26(%rip),%xmm0,%xmm0        # 84d0 <_IO_stdin_used+0x4d0>
    69a9:	00 
    69aa:	c4 c1 7b 11 47 f8    	vmovsd %xmm0,-0x8(%r15)
    69b0:	4c 3b 3c 24          	cmp    (%rsp),%r15
    69b4:	75 c4                	jne    697a <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0xea>
    69b6:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    69bb:	b9 0a 00 00 00       	mov    $0xa,%ecx
    69c0:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
    69c7:	00 
    69c8:	4c 89 fa             	mov    %r15,%rdx
    69cb:	e8 20 be ff ff       	callq  27f0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]>
    69d0:	48 8d 35 15 17 00 00 	lea    0x1715(%rip),%rsi        # 80ec <_IO_stdin_used+0xec>
    69d7:	ba 01 00 00 00       	mov    $0x1,%edx
    69dc:	48 8d 3d 5d 46 00 00 	lea    0x465d(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    69e3:	e8 38 b9 ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    69e8:	48 8b 0d 51 46 00 00 	mov    0x4651(%rip),%rcx        # b040 <std::cout@@GLIBCXX_3.4>
    69ef:	48 8d 3d 4a 46 00 00 	lea    0x464a(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    69f6:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    69fa:	c5 fb 10 84 24 90 00 	vmovsd 0x90(%rsp),%xmm0
    6a01:	00 00 
    6a03:	48 01 fa             	add    %rdi,%rdx
    6a06:	8b 42 18             	mov    0x18(%rdx),%eax
    6a09:	48 c7 42 08 02 00 00 	movq   $0x2,0x8(%rdx)
    6a10:	00 
    6a11:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    6a16:	83 c8 04             	or     $0x4,%eax
    6a19:	89 42 18             	mov    %eax,0x18(%rdx)
    6a1c:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    6a20:	48 c7 44 07 10 06 00 	movq   $0x6,0x10(%rdi,%rax,1)
    6a27:	00 00 
    6a29:	e8 52 b9 ff ff       	callq  2380 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    6a2e:	48 89 c7             	mov    %rax,%rdi
    6a31:	ba 02 00 00 00       	mov    $0x2,%edx
    6a36:	48 8d 35 b1 16 00 00 	lea    0x16b1(%rip),%rsi        # 80ee <_IO_stdin_used+0xee>
    6a3d:	e8 de b8 ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    6a42:	48 81 bc 24 18 01 02 	cmpq   $0x6300,0x20118(%rsp)
    6a49:	00 00 63 00 00 
    6a4e:	75 25                	jne    6a75 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x1e5>
    6a50:	48 8b 84 24 28 01 06 	mov    0x60128(%rsp),%rax
    6a57:	00 
    6a58:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6a5f:	00 00 
    6a61:	75 31                	jne    6a94 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x204>
    6a63:	48 81 c4 38 01 06 00 	add    $0x60138,%rsp
    6a6a:	5b                   	pop    %rbx
    6a6b:	5d                   	pop    %rbp
    6a6c:	41 5c                	pop    %r12
    6a6e:	41 5d                	pop    %r13
    6a70:	41 5e                	pop    %r14
    6a72:	41 5f                	pop    %r15
    6a74:	c3                   	retq   
    6a75:	48 8d 0d 4c 19 00 00 	lea    0x194c(%rip),%rcx        # 83c8 <_IO_stdin_used+0x3c8>
    6a7c:	ba 56 00 00 00       	mov    $0x56,%edx
    6a81:	48 8d 35 69 16 00 00 	lea    0x1669(%rip),%rsi        # 80f1 <_IO_stdin_used+0xf1>
    6a88:	48 8d 3d e1 16 00 00 	lea    0x16e1(%rip),%rdi        # 8170 <_IO_stdin_used+0x170>
    6a8f:	e8 dc b7 ff ff       	callq  2270 <__assert_fail@plt>
    6a94:	e8 77 b8 ff ff       	callq  2310 <__stack_chk_fail@plt>
    6a99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000006aa0 <void test_type<long>()>:
    6aa0:	f3 0f 1e fa          	endbr64 
    6aa4:	55                   	push   %rbp
    6aa5:	48 8d 2d 94 45 00 00 	lea    0x4594(%rip),%rbp        # b040 <std::cout@@GLIBCXX_3.4>
    6aac:	48 83 ec 30          	sub    $0x30,%rsp
    6ab0:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6ab7:	00 00 
    6ab9:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    6abe:	31 c0                	xor    %eax,%eax
    6ac0:	48 8b 05 79 45 00 00 	mov    0x4579(%rip),%rax        # b040 <std::cout@@GLIBCXX_3.4>
    6ac7:	48 8b 35 9a 41 00 00 	mov    0x419a(%rip),%rsi        # ac68 <typeinfo for long@@CXXABI_1.3+0x8>
    6ace:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    6ad2:	48 89 e7             	mov    %rsp,%rdi
    6ad5:	48 c7 44 05 10 0c 00 	movq   $0xc,0x10(%rbp,%rax,1)
    6adc:	00 00 
    6ade:	31 c0                	xor    %eax,%eax
    6ae0:	80 3e 2a             	cmpb   $0x2a,(%rsi)
    6ae3:	0f 94 c0             	sete   %al
    6ae6:	48 01 c6             	add    %rax,%rsi
    6ae9:	e8 02 bb ff ff       	callq  25f0 <ec::demangle[abi:cxx11](char const*)>
    6aee:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    6af3:	48 8b 34 24          	mov    (%rsp),%rsi
    6af7:	48 89 ef             	mov    %rbp,%rdi
    6afa:	e8 21 b8 ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    6aff:	48 8b 3c 24          	mov    (%rsp),%rdi
    6b03:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
    6b08:	48 39 c7             	cmp    %rax,%rdi
    6b0b:	74 05                	je     6b12 <void test_type<long>()+0x72>
    6b0d:	e8 de b7 ff ff       	callq  22f0 <operator delete(void*)@plt>
    6b12:	48 8d 3d 07 cb ff ff 	lea    -0x34f9(%rip),%rdi        # 3620 <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])>
    6b19:	e8 72 fd ff ff       	callq  6890 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    6b1e:	48 8d 3d 7b cb ff ff 	lea    -0x3485(%rip),%rdi        # 36a0 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])>
    6b25:	e8 66 fd ff ff       	callq  6890 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    6b2a:	48 8d 3d 9f cc ff ff 	lea    -0x3361(%rip),%rdi        # 37d0 <void jik<long>(long (*) [128], long (*) [128], long (*) [128])>
    6b31:	e8 5a fd ff ff       	callq  6890 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    6b36:	48 8d 3d 13 cd ff ff 	lea    -0x32ed(%rip),%rdi        # 3850 <void jki<long>(long (*) [128], long (*) [128], long (*) [128])>
    6b3d:	e8 4e fd ff ff       	callq  6890 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    6b42:	48 8d 3d 77 cd ff ff 	lea    -0x3289(%rip),%rdi        # 38c0 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])>
    6b49:	e8 42 fd ff ff       	callq  6890 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    6b4e:	48 8d 3d 9b ce ff ff 	lea    -0x3165(%rip),%rdi        # 39f0 <void kji<long>(long (*) [128], long (*) [128], long (*) [128])>
    6b55:	e8 36 fd ff ff       	callq  6890 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    6b5a:	48 8b 05 df 44 00 00 	mov    0x44df(%rip),%rax        # b040 <std::cout@@GLIBCXX_3.4>
    6b61:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    6b65:	48 8b ac 05 f0 00 00 	mov    0xf0(%rbp,%rax,1),%rbp
    6b6c:	00 
    6b6d:	48 85 ed             	test   %rbp,%rbp
    6b70:	74 6e                	je     6be0 <void test_type<long>()+0x140>
    6b72:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
    6b76:	74 38                	je     6bb0 <void test_type<long>()+0x110>
    6b78:	0f be 75 43          	movsbl 0x43(%rbp),%esi
    6b7c:	48 8d 3d bd 44 00 00 	lea    0x44bd(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    6b83:	e8 88 b6 ff ff       	callq  2210 <std::ostream::put(char)@plt>
    6b88:	48 89 c7             	mov    %rax,%rdi
    6b8b:	e8 00 b7 ff ff       	callq  2290 <std::ostream::flush()@plt>
    6b90:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    6b95:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6b9c:	00 00 
    6b9e:	75 3b                	jne    6bdb <void test_type<long>()+0x13b>
    6ba0:	48 83 c4 30          	add    $0x30,%rsp
    6ba4:	5d                   	pop    %rbp
    6ba5:	c3                   	retq   
    6ba6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6bad:	00 00 00 
    6bb0:	48 89 ef             	mov    %rbp,%rdi
    6bb3:	e8 78 b7 ff ff       	callq  2330 <std::ctype<char>::_M_widen_init() const@plt>
    6bb8:	48 8b 45 00          	mov    0x0(%rbp),%rax
    6bbc:	48 8d 15 0d bf ff ff 	lea    -0x40f3(%rip),%rdx        # 2ad0 <std::ctype<char>::do_widen(char) const>
    6bc3:	48 8b 40 30          	mov    0x30(%rax),%rax
    6bc7:	be 0a 00 00 00       	mov    $0xa,%esi
    6bcc:	48 39 d0             	cmp    %rdx,%rax
    6bcf:	74 ab                	je     6b7c <void test_type<long>()+0xdc>
    6bd1:	48 89 ef             	mov    %rbp,%rdi
    6bd4:	ff d0                	callq  *%rax
    6bd6:	0f be f0             	movsbl %al,%esi
    6bd9:	eb a1                	jmp    6b7c <void test_type<long>()+0xdc>
    6bdb:	e8 30 b7 ff ff       	callq  2310 <__stack_chk_fail@plt>
    6be0:	e8 6b b7 ff ff       	callq  2350 <std::__throw_bad_cast()@plt>
    6be5:	f3 0f 1e fa          	endbr64 
    6be9:	48 89 c5             	mov    %rax,%rbp
    6bec:	48 8b 3c 24          	mov    (%rsp),%rdi
    6bf0:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
    6bf5:	48 39 c7             	cmp    %rax,%rdi
    6bf8:	74 10                	je     6c0a <void test_type<long>()+0x16a>
    6bfa:	c5 f8 77             	vzeroupper 
    6bfd:	e8 ee b6 ff ff       	callq  22f0 <operator delete(void*)@plt>
    6c02:	48 89 ef             	mov    %rbp,%rdi
    6c05:	e8 b6 b7 ff ff       	callq  23c0 <_Unwind_Resume@plt>
    6c0a:	c5 f8 77             	vzeroupper 
    6c0d:	eb f3                	jmp    6c02 <void test_type<long>()+0x162>
    6c0f:	90                   	nop

0000000000006c10 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>:
    6c10:	f3 0f 1e fa          	endbr64 
    6c14:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    6c19:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    6c1d:	41 ff 72 f8          	pushq  -0x8(%r10)
    6c21:	55                   	push   %rbp
    6c22:	48 89 e5             	mov    %rsp,%rbp
    6c25:	41 57                	push   %r15
    6c27:	41 56                	push   %r14
    6c29:	41 55                	push   %r13
    6c2b:	41 54                	push   %r12
    6c2d:	41 52                	push   %r10
    6c2f:	53                   	push   %rbx
    6c30:	4c 8d 9c 24 00 00 fd 	lea    -0x30000(%rsp),%r11
    6c37:	ff 
    6c38:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    6c3f:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    6c44:	4c 39 dc             	cmp    %r11,%rsp
    6c47:	75 ef                	jne    6c38 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x28>
    6c49:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
    6c50:	ba 00 00 01 00       	mov    $0x10000,%edx
    6c55:	31 f6                	xor    %esi,%esi
    6c57:	48 89 bd 90 fe fc ff 	mov    %rdi,-0x30170(%rbp)
    6c5e:	4c 8d bd c0 ff fe ff 	lea    -0x10040(%rbp),%r15
    6c65:	4c 89 ff             	mov    %r15,%rdi
    6c68:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6c6f:	00 00 
    6c71:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    6c75:	31 c0                	xor    %eax,%eax
    6c77:	4c 8d b5 b0 ff fc ff 	lea    -0x30050(%rbp),%r14
    6c7e:	e8 dd b5 ff ff       	callq  2260 <memset@plt>
    6c83:	c5 fc 28 05 15 19 00 	vmovaps 0x1915(%rip),%ymm0        # 85a0 <_IO_stdin_used+0x5a0>
    6c8a:	00 
    6c8b:	4c 89 f0             	mov    %r14,%rax
    6c8e:	48 8d 9d b0 ff fd ff 	lea    -0x20050(%rbp),%rbx
    6c95:	c5 fc 29 00          	vmovaps %ymm0,(%rax)
    6c99:	c5 fc 29 40 20       	vmovaps %ymm0,0x20(%rax)
    6c9e:	c5 fc 29 40 40       	vmovaps %ymm0,0x40(%rax)
    6ca3:	c5 fc 29 40 60       	vmovaps %ymm0,0x60(%rax)
    6ca8:	c5 fc 29 80 80 00 00 	vmovaps %ymm0,0x80(%rax)
    6caf:	00 
    6cb0:	c5 fc 29 80 a0 00 00 	vmovaps %ymm0,0xa0(%rax)
    6cb7:	00 
    6cb8:	c5 fc 29 80 c0 00 00 	vmovaps %ymm0,0xc0(%rax)
    6cbf:	00 
    6cc0:	c5 fc 29 80 e0 00 00 	vmovaps %ymm0,0xe0(%rax)
    6cc7:	00 
    6cc8:	c5 fc 29 80 00 01 00 	vmovaps %ymm0,0x100(%rax)
    6ccf:	00 
    6cd0:	c5 fc 29 80 20 01 00 	vmovaps %ymm0,0x120(%rax)
    6cd7:	00 
    6cd8:	c5 fc 29 80 40 01 00 	vmovaps %ymm0,0x140(%rax)
    6cdf:	00 
    6ce0:	c5 fc 29 80 60 01 00 	vmovaps %ymm0,0x160(%rax)
    6ce7:	00 
    6ce8:	c5 fc 29 80 80 01 00 	vmovaps %ymm0,0x180(%rax)
    6cef:	00 
    6cf0:	c5 fc 29 80 a0 01 00 	vmovaps %ymm0,0x1a0(%rax)
    6cf7:	00 
    6cf8:	c5 fc 29 80 c0 01 00 	vmovaps %ymm0,0x1c0(%rax)
    6cff:	00 
    6d00:	c5 fc 29 80 e0 01 00 	vmovaps %ymm0,0x1e0(%rax)
    6d07:	00 
    6d08:	48 05 00 02 00 00    	add    $0x200,%rax
    6d0e:	48 39 d8             	cmp    %rbx,%rax
    6d11:	75 82                	jne    6c95 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x85>
    6d13:	c5 fc 28 05 a5 18 00 	vmovaps 0x18a5(%rip),%ymm0        # 85c0 <_IO_stdin_used+0x5c0>
    6d1a:	00 
    6d1b:	48 89 d8             	mov    %rbx,%rax
    6d1e:	48 8d 8d b0 ff fe ff 	lea    -0x10050(%rbp),%rcx
    6d25:	c5 fc 29 00          	vmovaps %ymm0,(%rax)
    6d29:	c5 fc 29 40 20       	vmovaps %ymm0,0x20(%rax)
    6d2e:	c5 fc 29 40 40       	vmovaps %ymm0,0x40(%rax)
    6d33:	c5 fc 29 40 60       	vmovaps %ymm0,0x60(%rax)
    6d38:	c5 fc 29 80 80 00 00 	vmovaps %ymm0,0x80(%rax)
    6d3f:	00 
    6d40:	c5 fc 29 80 a0 00 00 	vmovaps %ymm0,0xa0(%rax)
    6d47:	00 
    6d48:	c5 fc 29 80 c0 00 00 	vmovaps %ymm0,0xc0(%rax)
    6d4f:	00 
    6d50:	c5 fc 29 80 e0 00 00 	vmovaps %ymm0,0xe0(%rax)
    6d57:	00 
    6d58:	c5 fc 29 80 00 01 00 	vmovaps %ymm0,0x100(%rax)
    6d5f:	00 
    6d60:	c5 fc 29 80 20 01 00 	vmovaps %ymm0,0x120(%rax)
    6d67:	00 
    6d68:	c5 fc 29 80 40 01 00 	vmovaps %ymm0,0x140(%rax)
    6d6f:	00 
    6d70:	c5 fc 29 80 60 01 00 	vmovaps %ymm0,0x160(%rax)
    6d77:	00 
    6d78:	c5 fc 29 80 80 01 00 	vmovaps %ymm0,0x180(%rax)
    6d7f:	00 
    6d80:	c5 fc 29 80 a0 01 00 	vmovaps %ymm0,0x1a0(%rax)
    6d87:	00 
    6d88:	c5 fc 29 80 c0 01 00 	vmovaps %ymm0,0x1c0(%rax)
    6d8f:	00 
    6d90:	c5 fc 29 80 e0 01 00 	vmovaps %ymm0,0x1e0(%rax)
    6d97:	00 
    6d98:	48 05 00 02 00 00    	add    $0x200,%rax
    6d9e:	48 39 c1             	cmp    %rax,%rcx
    6da1:	75 82                	jne    6d25 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x115>
    6da3:	48 8d 85 a0 fe fc ff 	lea    -0x30160(%rbp),%rax
    6daa:	49 89 c4             	mov    %rax,%r12
    6dad:	4c 8d ad a8 ff fc ff 	lea    -0x30058(%rbp),%r13
    6db4:	48 89 85 88 fe fc ff 	mov    %rax,-0x30178(%rbp)
    6dbb:	c5 f8 77             	vzeroupper 
    6dbe:	e8 5d b4 ff ff       	callq  2220 <std::chrono::_V2::system_clock::now()@plt>
    6dc3:	48 89 85 98 fe fc ff 	mov    %rax,-0x30168(%rbp)
    6dca:	48 8b 8d 90 fe fc ff 	mov    -0x30170(%rbp),%rcx
    6dd1:	48 89 da             	mov    %rbx,%rdx
    6dd4:	4c 89 f6             	mov    %r14,%rsi
    6dd7:	4c 89 ff             	mov    %r15,%rdi
    6dda:	ff d1                	callq  *%rcx
    6ddc:	e8 3f b4 ff ff       	callq  2220 <std::chrono::_V2::system_clock::now()@plt>
    6de1:	48 2b 85 98 fe fc ff 	sub    -0x30168(%rbp),%rax
    6de8:	c5 f1 57 c9          	vxorpd %xmm1,%xmm1,%xmm1
    6dec:	c4 e1 f3 2a c0       	vcvtsi2sd %rax,%xmm1,%xmm0
    6df1:	49 83 c4 08          	add    $0x8,%r12
    6df5:	c5 fb 5e 05 d3 16 00 	vdivsd 0x16d3(%rip),%xmm0,%xmm0        # 84d0 <_IO_stdin_used+0x4d0>
    6dfc:	00 
    6dfd:	c4 c1 7b 11 44 24 f8 	vmovsd %xmm0,-0x8(%r12)
    6e04:	4d 39 e5             	cmp    %r12,%r13
    6e07:	75 b5                	jne    6dbe <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x1ae>
    6e09:	48 8b bd 88 fe fc ff 	mov    -0x30178(%rbp),%rdi
    6e10:	b9 0a 00 00 00       	mov    $0xa,%ecx
    6e15:	48 8d b5 20 ff fc ff 	lea    -0x300e0(%rbp),%rsi
    6e1c:	4c 89 ea             	mov    %r13,%rdx
    6e1f:	e8 cc b9 ff ff       	callq  27f0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]>
    6e24:	48 8d 35 c1 12 00 00 	lea    0x12c1(%rip),%rsi        # 80ec <_IO_stdin_used+0xec>
    6e2b:	ba 01 00 00 00       	mov    $0x1,%edx
    6e30:	48 8d 3d 09 42 00 00 	lea    0x4209(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    6e37:	e8 e4 b4 ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    6e3c:	48 8b 0d fd 41 00 00 	mov    0x41fd(%rip),%rcx        # b040 <std::cout@@GLIBCXX_3.4>
    6e43:	48 8d 3d f6 41 00 00 	lea    0x41f6(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    6e4a:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    6e4e:	c5 fb 10 85 20 ff fc 	vmovsd -0x300e0(%rbp),%xmm0
    6e55:	ff 
    6e56:	48 01 fa             	add    %rdi,%rdx
    6e59:	8b 42 18             	mov    0x18(%rdx),%eax
    6e5c:	48 c7 42 08 02 00 00 	movq   $0x2,0x8(%rdx)
    6e63:	00 
    6e64:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    6e69:	83 c8 04             	or     $0x4,%eax
    6e6c:	89 42 18             	mov    %eax,0x18(%rdx)
    6e6f:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    6e73:	48 c7 44 07 10 06 00 	movq   $0x6,0x10(%rdi,%rax,1)
    6e7a:	00 00 
    6e7c:	e8 ff b4 ff ff       	callq  2380 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    6e81:	48 89 c7             	mov    %rax,%rdi
    6e84:	ba 02 00 00 00       	mov    $0x2,%edx
    6e89:	48 8d 35 5e 12 00 00 	lea    0x125e(%rip),%rsi        # 80ee <_IO_stdin_used+0xee>
    6e90:	e8 8b b4 ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    6e95:	c5 fa 10 45 bc       	vmovss -0x44(%rbp),%xmm0
    6e9a:	c5 f8 2e 05 46 17 00 	vucomiss 0x1746(%rip),%xmm0        # 85e8 <_IO_stdin_used+0x5e8>
    6ea1:	00 
    6ea2:	7a 29                	jp     6ecd <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x2bd>
    6ea4:	75 27                	jne    6ecd <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x2bd>
    6ea6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6eaa:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6eb1:	00 00 
    6eb3:	75 37                	jne    6eec <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x2dc>
    6eb5:	48 81 c4 60 01 03 00 	add    $0x30160,%rsp
    6ebc:	5b                   	pop    %rbx
    6ebd:	41 5a                	pop    %r10
    6ebf:	41 5c                	pop    %r12
    6ec1:	41 5d                	pop    %r13
    6ec3:	41 5e                	pop    %r14
    6ec5:	41 5f                	pop    %r15
    6ec7:	5d                   	pop    %rbp
    6ec8:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    6ecc:	c3                   	retq   
    6ecd:	48 8d 0d 64 15 00 00 	lea    0x1564(%rip),%rcx        # 8438 <_IO_stdin_used+0x438>
    6ed4:	ba 56 00 00 00       	mov    $0x56,%edx
    6ed9:	48 8d 35 11 12 00 00 	lea    0x1211(%rip),%rsi        # 80f1 <_IO_stdin_used+0xf1>
    6ee0:	48 8d 3d 89 12 00 00 	lea    0x1289(%rip),%rdi        # 8170 <_IO_stdin_used+0x170>
    6ee7:	e8 84 b3 ff ff       	callq  2270 <__assert_fail@plt>
    6eec:	e8 1f b4 ff ff       	callq  2310 <__stack_chk_fail@plt>
    6ef1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6ef8:	00 00 00 
    6efb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000006f00 <void test_type<float>()>:
    6f00:	f3 0f 1e fa          	endbr64 
    6f04:	55                   	push   %rbp
    6f05:	48 8d 2d 34 41 00 00 	lea    0x4134(%rip),%rbp        # b040 <std::cout@@GLIBCXX_3.4>
    6f0c:	48 83 ec 30          	sub    $0x30,%rsp
    6f10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6f17:	00 00 
    6f19:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    6f1e:	31 c0                	xor    %eax,%eax
    6f20:	48 8b 05 19 41 00 00 	mov    0x4119(%rip),%rax        # b040 <std::cout@@GLIBCXX_3.4>
    6f27:	48 8b 35 1a 3d 00 00 	mov    0x3d1a(%rip),%rsi        # ac48 <typeinfo for float@@CXXABI_1.3+0x8>
    6f2e:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    6f32:	48 89 e7             	mov    %rsp,%rdi
    6f35:	48 c7 44 05 10 0c 00 	movq   $0xc,0x10(%rbp,%rax,1)
    6f3c:	00 00 
    6f3e:	31 c0                	xor    %eax,%eax
    6f40:	80 3e 2a             	cmpb   $0x2a,(%rsi)
    6f43:	0f 94 c0             	sete   %al
    6f46:	48 01 c6             	add    %rax,%rsi
    6f49:	e8 a2 b6 ff ff       	callq  25f0 <ec::demangle[abi:cxx11](char const*)>
    6f4e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    6f53:	48 8b 34 24          	mov    (%rsp),%rsi
    6f57:	48 89 ef             	mov    %rbp,%rdi
    6f5a:	e8 c1 b3 ff ff       	callq  2320 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    6f5f:	48 8b 3c 24          	mov    (%rsp),%rdi
    6f63:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
    6f68:	48 39 c7             	cmp    %rax,%rdi
    6f6b:	74 05                	je     6f72 <void test_type<float>()+0x72>
    6f6d:	e8 7e b3 ff ff       	callq  22f0 <operator delete(void*)@plt>
    6f72:	48 8d 3d d7 ce ff ff 	lea    -0x3129(%rip),%rdi        # 3e50 <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])>
    6f79:	e8 92 fc ff ff       	callq  6c10 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    6f7e:	48 8d 3d 4b cf ff ff 	lea    -0x30b5(%rip),%rdi        # 3ed0 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])>
    6f85:	e8 86 fc ff ff       	callq  6c10 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    6f8a:	48 8d 3d 9f d1 ff ff 	lea    -0x2e61(%rip),%rdi        # 4130 <void jik<float>(float (*) [128], float (*) [128], float (*) [128])>
    6f91:	e8 7a fc ff ff       	callq  6c10 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    6f96:	48 8d 3d 13 d2 ff ff 	lea    -0x2ded(%rip),%rdi        # 41b0 <void jki<float>(float (*) [128], float (*) [128], float (*) [128])>
    6f9d:	e8 6e fc ff ff       	callq  6c10 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    6fa2:	48 8d 3d 87 d2 ff ff 	lea    -0x2d79(%rip),%rdi        # 4230 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])>
    6fa9:	e8 62 fc ff ff       	callq  6c10 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    6fae:	48 8d 3d cb d4 ff ff 	lea    -0x2b35(%rip),%rdi        # 4480 <void kji<float>(float (*) [128], float (*) [128], float (*) [128])>
    6fb5:	e8 56 fc ff ff       	callq  6c10 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    6fba:	48 8b 05 7f 40 00 00 	mov    0x407f(%rip),%rax        # b040 <std::cout@@GLIBCXX_3.4>
    6fc1:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    6fc5:	48 8b ac 05 f0 00 00 	mov    0xf0(%rbp,%rax,1),%rbp
    6fcc:	00 
    6fcd:	48 85 ed             	test   %rbp,%rbp
    6fd0:	74 6e                	je     7040 <void test_type<float>()+0x140>
    6fd2:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
    6fd6:	74 38                	je     7010 <void test_type<float>()+0x110>
    6fd8:	0f be 75 43          	movsbl 0x43(%rbp),%esi
    6fdc:	48 8d 3d 5d 40 00 00 	lea    0x405d(%rip),%rdi        # b040 <std::cout@@GLIBCXX_3.4>
    6fe3:	e8 28 b2 ff ff       	callq  2210 <std::ostream::put(char)@plt>
    6fe8:	48 89 c7             	mov    %rax,%rdi
    6feb:	e8 a0 b2 ff ff       	callq  2290 <std::ostream::flush()@plt>
    6ff0:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    6ff5:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6ffc:	00 00 
    6ffe:	75 3b                	jne    703b <void test_type<float>()+0x13b>
    7000:	48 83 c4 30          	add    $0x30,%rsp
    7004:	5d                   	pop    %rbp
    7005:	c3                   	retq   
    7006:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    700d:	00 00 00 
    7010:	48 89 ef             	mov    %rbp,%rdi
    7013:	e8 18 b3 ff ff       	callq  2330 <std::ctype<char>::_M_widen_init() const@plt>
    7018:	48 8b 45 00          	mov    0x0(%rbp),%rax
    701c:	48 8d 15 ad ba ff ff 	lea    -0x4553(%rip),%rdx        # 2ad0 <std::ctype<char>::do_widen(char) const>
    7023:	48 8b 40 30          	mov    0x30(%rax),%rax
    7027:	be 0a 00 00 00       	mov    $0xa,%esi
    702c:	48 39 d0             	cmp    %rdx,%rax
    702f:	74 ab                	je     6fdc <void test_type<float>()+0xdc>
    7031:	48 89 ef             	mov    %rbp,%rdi
    7034:	ff d0                	callq  *%rax
    7036:	0f be f0             	movsbl %al,%esi
    7039:	eb a1                	jmp    6fdc <void test_type<float>()+0xdc>
    703b:	e8 d0 b2 ff ff       	callq  2310 <__stack_chk_fail@plt>
    7040:	e8 0b b3 ff ff       	callq  2350 <std::__throw_bad_cast()@plt>
    7045:	f3 0f 1e fa          	endbr64 
    7049:	48 89 c5             	mov    %rax,%rbp
    704c:	48 8b 3c 24          	mov    (%rsp),%rdi
    7050:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
    7055:	48 39 c7             	cmp    %rax,%rdi
    7058:	74 10                	je     706a <void test_type<float>()+0x16a>
    705a:	c5 f8 77             	vzeroupper 
    705d:	e8 8e b2 ff ff       	callq  22f0 <operator delete(void*)@plt>
    7062:	48 89 ef             	mov    %rbp,%rdi
    7065:	e8 56 b3 ff ff       	callq  23c0 <_Unwind_Resume@plt>
    706a:	c5 f8 77             	vzeroupper 
    706d:	eb f3                	jmp    7062 <void test_type<float>()+0x162>
    706f:	90                   	nop

0000000000007070 <__libc_csu_init>:
    7070:	f3 0f 1e fa          	endbr64 
    7074:	41 57                	push   %r15
    7076:	4c 8d 3d 6b 3b 00 00 	lea    0x3b6b(%rip),%r15        # abe8 <__frame_dummy_init_array_entry>
    707d:	41 56                	push   %r14
    707f:	49 89 d6             	mov    %rdx,%r14
    7082:	41 55                	push   %r13
    7084:	49 89 f5             	mov    %rsi,%r13
    7087:	41 54                	push   %r12
    7089:	41 89 fc             	mov    %edi,%r12d
    708c:	55                   	push   %rbp
    708d:	48 8d 2d 64 3b 00 00 	lea    0x3b64(%rip),%rbp        # abf8 <__do_global_dtors_aux_fini_array_entry>
    7094:	53                   	push   %rbx
    7095:	4c 29 fd             	sub    %r15,%rbp
    7098:	48 83 ec 08          	sub    $0x8,%rsp
    709c:	e8 5f af ff ff       	callq  2000 <_init>
    70a1:	48 c1 fd 03          	sar    $0x3,%rbp
    70a5:	74 1f                	je     70c6 <__libc_csu_init+0x56>
    70a7:	31 db                	xor    %ebx,%ebx
    70a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    70b0:	4c 89 f2             	mov    %r14,%rdx
    70b3:	4c 89 ee             	mov    %r13,%rsi
    70b6:	44 89 e7             	mov    %r12d,%edi
    70b9:	41 ff 14 df          	callq  *(%r15,%rbx,8)
    70bd:	48 83 c3 01          	add    $0x1,%rbx
    70c1:	48 39 dd             	cmp    %rbx,%rbp
    70c4:	75 ea                	jne    70b0 <__libc_csu_init+0x40>
    70c6:	48 83 c4 08          	add    $0x8,%rsp
    70ca:	5b                   	pop    %rbx
    70cb:	5d                   	pop    %rbp
    70cc:	41 5c                	pop    %r12
    70ce:	41 5d                	pop    %r13
    70d0:	41 5e                	pop    %r14
    70d2:	41 5f                	pop    %r15
    70d4:	c3                   	retq   
    70d5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    70dc:	00 00 00 00 

00000000000070e0 <__libc_csu_fini>:
    70e0:	f3 0f 1e fa          	endbr64 
    70e4:	c3                   	retq   

Desensamblado de la secci贸n .fini:

00000000000070e8 <_fini>:
    70e8:	f3 0f 1e fa          	endbr64 
    70ec:	48 83 ec 08          	sub    $0x8,%rsp
    70f0:	48 83 c4 08          	add    $0x8,%rsp
    70f4:	c3                   	retq   
