
axb:     formato del fichero elf64-x86-64


Desensamblado de la secci贸n .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 d9 3f 00 00 	mov    0x3fd9(%rip),%rax        # 4fe8 <__gmon_start__>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	callq  *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	retq   

Desensamblado de la secci贸n .plt:

0000000000001020 <.plt>:
    1020:	ff 35 ea 3e 00 00    	pushq  0x3eea(%rip)        # 4f10 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	f2 ff 25 eb 3e 00 00 	bnd jmpq *0x3eeb(%rip)        # 4f18 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	0f 1f 00             	nopl   (%rax)
    1030:	f3 0f 1e fa          	endbr64 
    1034:	68 00 00 00 00       	pushq  $0x0
    1039:	f2 e9 e1 ff ff ff    	bnd jmpq 1020 <.plt>
    103f:	90                   	nop
    1040:	f3 0f 1e fa          	endbr64 
    1044:	68 01 00 00 00       	pushq  $0x1
    1049:	f2 e9 d1 ff ff ff    	bnd jmpq 1020 <.plt>
    104f:	90                   	nop
    1050:	f3 0f 1e fa          	endbr64 
    1054:	68 02 00 00 00       	pushq  $0x2
    1059:	f2 e9 c1 ff ff ff    	bnd jmpq 1020 <.plt>
    105f:	90                   	nop
    1060:	f3 0f 1e fa          	endbr64 
    1064:	68 03 00 00 00       	pushq  $0x3
    1069:	f2 e9 b1 ff ff ff    	bnd jmpq 1020 <.plt>
    106f:	90                   	nop
    1070:	f3 0f 1e fa          	endbr64 
    1074:	68 04 00 00 00       	pushq  $0x4
    1079:	f2 e9 a1 ff ff ff    	bnd jmpq 1020 <.plt>
    107f:	90                   	nop
    1080:	f3 0f 1e fa          	endbr64 
    1084:	68 05 00 00 00       	pushq  $0x5
    1089:	f2 e9 91 ff ff ff    	bnd jmpq 1020 <.plt>
    108f:	90                   	nop
    1090:	f3 0f 1e fa          	endbr64 
    1094:	68 06 00 00 00       	pushq  $0x6
    1099:	f2 e9 81 ff ff ff    	bnd jmpq 1020 <.plt>
    109f:	90                   	nop
    10a0:	f3 0f 1e fa          	endbr64 
    10a4:	68 07 00 00 00       	pushq  $0x7
    10a9:	f2 e9 71 ff ff ff    	bnd jmpq 1020 <.plt>
    10af:	90                   	nop
    10b0:	f3 0f 1e fa          	endbr64 
    10b4:	68 08 00 00 00       	pushq  $0x8
    10b9:	f2 e9 61 ff ff ff    	bnd jmpq 1020 <.plt>
    10bf:	90                   	nop
    10c0:	f3 0f 1e fa          	endbr64 
    10c4:	68 09 00 00 00       	pushq  $0x9
    10c9:	f2 e9 51 ff ff ff    	bnd jmpq 1020 <.plt>
    10cf:	90                   	nop
    10d0:	f3 0f 1e fa          	endbr64 
    10d4:	68 0a 00 00 00       	pushq  $0xa
    10d9:	f2 e9 41 ff ff ff    	bnd jmpq 1020 <.plt>
    10df:	90                   	nop
    10e0:	f3 0f 1e fa          	endbr64 
    10e4:	68 0b 00 00 00       	pushq  $0xb
    10e9:	f2 e9 31 ff ff ff    	bnd jmpq 1020 <.plt>
    10ef:	90                   	nop
    10f0:	f3 0f 1e fa          	endbr64 
    10f4:	68 0c 00 00 00       	pushq  $0xc
    10f9:	f2 e9 21 ff ff ff    	bnd jmpq 1020 <.plt>
    10ff:	90                   	nop
    1100:	f3 0f 1e fa          	endbr64 
    1104:	68 0d 00 00 00       	pushq  $0xd
    1109:	f2 e9 11 ff ff ff    	bnd jmpq 1020 <.plt>
    110f:	90                   	nop
    1110:	f3 0f 1e fa          	endbr64 
    1114:	68 0e 00 00 00       	pushq  $0xe
    1119:	f2 e9 01 ff ff ff    	bnd jmpq 1020 <.plt>
    111f:	90                   	nop
    1120:	f3 0f 1e fa          	endbr64 
    1124:	68 0f 00 00 00       	pushq  $0xf
    1129:	f2 e9 f1 fe ff ff    	bnd jmpq 1020 <.plt>
    112f:	90                   	nop
    1130:	f3 0f 1e fa          	endbr64 
    1134:	68 10 00 00 00       	pushq  $0x10
    1139:	f2 e9 e1 fe ff ff    	bnd jmpq 1020 <.plt>
    113f:	90                   	nop
    1140:	f3 0f 1e fa          	endbr64 
    1144:	68 11 00 00 00       	pushq  $0x11
    1149:	f2 e9 d1 fe ff ff    	bnd jmpq 1020 <.plt>
    114f:	90                   	nop
    1150:	f3 0f 1e fa          	endbr64 
    1154:	68 12 00 00 00       	pushq  $0x12
    1159:	f2 e9 c1 fe ff ff    	bnd jmpq 1020 <.plt>
    115f:	90                   	nop
    1160:	f3 0f 1e fa          	endbr64 
    1164:	68 13 00 00 00       	pushq  $0x13
    1169:	f2 e9 b1 fe ff ff    	bnd jmpq 1020 <.plt>
    116f:	90                   	nop
    1170:	f3 0f 1e fa          	endbr64 
    1174:	68 14 00 00 00       	pushq  $0x14
    1179:	f2 e9 a1 fe ff ff    	bnd jmpq 1020 <.plt>
    117f:	90                   	nop
    1180:	f3 0f 1e fa          	endbr64 
    1184:	68 15 00 00 00       	pushq  $0x15
    1189:	f2 e9 91 fe ff ff    	bnd jmpq 1020 <.plt>
    118f:	90                   	nop

Desensamblado de la secci贸n .plt.got:

0000000000001190 <__cxa_finalize@plt>:
    1190:	f3 0f 1e fa          	endbr64 
    1194:	f2 ff 25 35 3e 00 00 	bnd jmpq *0x3e35(%rip)        # 4fd0 <__cxa_finalize@GLIBC_2.2.5>
    119b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la secci贸n .plt.sec:

00000000000011a0 <std::ostream::put(char)@plt>:
    11a0:	f3 0f 1e fa          	endbr64 
    11a4:	f2 ff 25 75 3d 00 00 	bnd jmpq *0x3d75(%rip)        # 4f20 <std::ostream::put(char)@GLIBCXX_3.4>
    11ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011b0 <std::chrono::_V2::system_clock::now()@plt>:
    11b0:	f3 0f 1e fa          	endbr64 
    11b4:	f2 ff 25 6d 3d 00 00 	bnd jmpq *0x3d6d(%rip)        # 4f28 <std::chrono::_V2::system_clock::now()@GLIBCXX_3.4.19>
    11bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011c0 <strlen@plt>:
    11c0:	f3 0f 1e fa          	endbr64 
    11c4:	f2 ff 25 65 3d 00 00 	bnd jmpq *0x3d65(%rip)        # 4f30 <strlen@GLIBC_2.2.5>
    11cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011d0 <__cxa_guard_abort@plt>:
    11d0:	f3 0f 1e fa          	endbr64 
    11d4:	f2 ff 25 5d 3d 00 00 	bnd jmpq *0x3d5d(%rip)        # 4f38 <__cxa_guard_abort@CXXABI_1.3>
    11db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011e0 <__cxa_guard_release@plt>:
    11e0:	f3 0f 1e fa          	endbr64 
    11e4:	f2 ff 25 55 3d 00 00 	bnd jmpq *0x3d55(%rip)        # 4f40 <__cxa_guard_release@CXXABI_1.3>
    11eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011f0 <std::ostream::flush()@plt>:
    11f0:	f3 0f 1e fa          	endbr64 
    11f4:	f2 ff 25 4d 3d 00 00 	bnd jmpq *0x3d4d(%rip)        # 4f48 <std::ostream::flush()@GLIBCXX_3.4>
    11fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001200 <__cxa_atexit@plt>:
    1200:	f3 0f 1e fa          	endbr64 
    1204:	f2 ff 25 45 3d 00 00 	bnd jmpq *0x3d45(%rip)        # 4f50 <__cxa_atexit@GLIBC_2.2.5>
    120b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001210 <std::random_device::_M_fini()@plt>:
    1210:	f3 0f 1e fa          	endbr64 
    1214:	f2 ff 25 3d 3d 00 00 	bnd jmpq *0x3d3d(%rip)        # 4f58 <std::random_device::_M_fini()@GLIBCXX_3.4.18>
    121b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001220 <operator delete(void*)@plt>:
    1220:	f3 0f 1e fa          	endbr64 
    1224:	f2 ff 25 35 3d 00 00 	bnd jmpq *0x3d35(%rip)        # 4f60 <operator delete(void*)@GLIBCXX_3.4>
    122b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001230 <__stack_chk_fail@plt>:
    1230:	f3 0f 1e fa          	endbr64 
    1234:	f2 ff 25 2d 3d 00 00 	bnd jmpq *0x3d2d(%rip)        # 4f68 <__stack_chk_fail@GLIBC_2.4>
    123b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>:
    1240:	f3 0f 1e fa          	endbr64 
    1244:	f2 ff 25 25 3d 00 00 	bnd jmpq *0x3d25(%rip)        # 4f70 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@GLIBCXX_3.4.9>
    124b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001250 <std::ctype<char>::_M_widen_init() const@plt>:
    1250:	f3 0f 1e fa          	endbr64 
    1254:	f2 ff 25 1d 3d 00 00 	bnd jmpq *0x3d1d(%rip)        # 4f78 <std::ctype<char>::_M_widen_init() const@GLIBCXX_3.4.11>
    125b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001260 <std::__throw_bad_cast()@plt>:
    1260:	f3 0f 1e fa          	endbr64 
    1264:	f2 ff 25 15 3d 00 00 	bnd jmpq *0x3d15(%rip)        # 4f80 <std::__throw_bad_cast()@GLIBCXX_3.4>
    126b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001270 <std::random_device::_M_getval()@plt>:
    1270:	f3 0f 1e fa          	endbr64 
    1274:	f2 ff 25 0d 3d 00 00 	bnd jmpq *0x3d0d(%rip)        # 4f88 <std::random_device::_M_getval()@GLIBCXX_3.4.18>
    127b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001280 <std::ios_base::Init::Init()@plt>:
    1280:	f3 0f 1e fa          	endbr64 
    1284:	f2 ff 25 05 3d 00 00 	bnd jmpq *0x3d05(%rip)        # 4f90 <std::ios_base::Init::Init()@GLIBCXX_3.4>
    128b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001290 <std::ostream& std::ostream::_M_insert<double>(double)@plt>:
    1290:	f3 0f 1e fa          	endbr64 
    1294:	f2 ff 25 fd 3c 00 00 	bnd jmpq *0x3cfd(%rip)        # 4f98 <std::ostream& std::ostream::_M_insert<double>(double)@GLIBCXX_3.4.9>
    129b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012a0 <memmove@plt>:
    12a0:	f3 0f 1e fa          	endbr64 
    12a4:	f2 ff 25 f5 3c 00 00 	bnd jmpq *0x3cf5(%rip)        # 4fa0 <memmove@GLIBC_2.2.5>
    12ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012b0 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
    12b0:	f3 0f 1e fa          	endbr64 
    12b4:	f2 ff 25 ed 3c 00 00 	bnd jmpq *0x3ced(%rip)        # 4fa8 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
    12bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012c0 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>:
    12c0:	f3 0f 1e fa          	endbr64 
    12c4:	f2 ff 25 e5 3c 00 00 	bnd jmpq *0x3ce5(%rip)        # 4fb0 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@GLIBCXX_3.4>
    12cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012d0 <std::ostream::operator<<(int)@plt>:
    12d0:	f3 0f 1e fa          	endbr64 
    12d4:	f2 ff 25 dd 3c 00 00 	bnd jmpq *0x3cdd(%rip)        # 4fb8 <std::ostream::operator<<(int)@GLIBCXX_3.4>
    12db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012e0 <_Unwind_Resume@plt>:
    12e0:	f3 0f 1e fa          	endbr64 
    12e4:	f2 ff 25 d5 3c 00 00 	bnd jmpq *0x3cd5(%rip)        # 4fc0 <_Unwind_Resume@GCC_3.0>
    12eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012f0 <__cxa_guard_acquire@plt>:
    12f0:	f3 0f 1e fa          	endbr64 
    12f4:	f2 ff 25 cd 3c 00 00 	bnd jmpq *0x3ccd(%rip)        # 4fc8 <__cxa_guard_acquire@CXXABI_1.3>
    12fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la secci贸n .text:

0000000000001300 <reset() [clone .cold]>:
    1300:	48 8d 3d 09 e5 57 03 	lea    0x357e509(%rip),%rdi        # 357f810 <guard variable for reset()::generator>
    1307:	c5 f8 77             	vzeroupper 
    130a:	e8 c1 fe ff ff       	callq  11d0 <__cxa_guard_abort@plt>
    130f:	48 89 ef             	mov    %rbp,%rdi
    1312:	e8 c9 ff ff ff       	callq  12e0 <_Unwind_Resume@plt>
    1317:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
    131c:	48 39 df             	cmp    %rbx,%rdi
    131f:	74 1c                	je     133d <reset() [clone .cold]+0x3d>
    1321:	c5 f8 77             	vzeroupper 
    1324:	e8 f7 fe ff ff       	callq  1220 <operator delete(void*)@plt>
    1329:	48 8d 3d f0 e4 57 03 	lea    0x357e4f0(%rip),%rdi        # 357f820 <guard variable for reset()::device>
    1330:	e8 9b fe ff ff       	callq  11d0 <__cxa_guard_abort@plt>
    1335:	48 89 ef             	mov    %rbp,%rdi
    1338:	e8 a3 ff ff ff       	callq  12e0 <_Unwind_Resume@plt>
    133d:	c5 f8 77             	vzeroupper 
    1340:	eb e7                	jmp    1329 <reset() [clone .cold]+0x29>
    1342:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1349:	00 00 00 
    134c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001350 <main>:
    1350:	f3 0f 1e fa          	endbr64 
    1354:	48 83 ec 08          	sub    $0x8,%rsp
    1358:	48 8d 35 bd 1c 00 00 	lea    0x1cbd(%rip),%rsi        # 301c <_IO_stdin_used+0x1c>
    135f:	48 8d 3d 4a 01 00 00 	lea    0x14a(%rip),%rdi        # 14b0 <f0()>
    1366:	e8 15 0b 00 00       	callq  1e80 <void test<void ()>(void ( const&)(), char const*)>
    136b:	31 c0                	xor    %eax,%eax
    136d:	48 83 c4 08          	add    $0x8,%rsp
    1371:	c3                   	retq   
    1372:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    1379:	00 00 00 00 
    137d:	0f 1f 00             	nopl   (%rax)

0000000000001380 <_GLOBAL__sub_I_a>:
    1380:	f3 0f 1e fa          	endbr64 
    1384:	48 83 ec 08          	sub    $0x8,%rsp
    1388:	48 8d 3d 39 f8 57 03 	lea    0x357f839(%rip),%rdi        # 3580bc8 <std::__ioinit>
    138f:	e8 ec fe ff ff       	callq  1280 <std::ios_base::Init::Init()@plt>
    1394:	48 8b 3d 5d 3c 00 00 	mov    0x3c5d(%rip),%rdi        # 4ff8 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
    139b:	48 8d 15 66 3c 00 00 	lea    0x3c66(%rip),%rdx        # 5008 <__dso_handle>
    13a2:	48 8d 35 1f f8 57 03 	lea    0x357f81f(%rip),%rsi        # 3580bc8 <std::__ioinit>
    13a9:	48 83 c4 08          	add    $0x8,%rsp
    13ad:	e9 4e fe ff ff       	jmpq   1200 <__cxa_atexit@plt>
    13b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    13b9:	00 00 00 
    13bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000013c0 <_start>:
    13c0:	f3 0f 1e fa          	endbr64 
    13c4:	31 ed                	xor    %ebp,%ebp
    13c6:	49 89 d1             	mov    %rdx,%r9
    13c9:	5e                   	pop    %rsi
    13ca:	48 89 e2             	mov    %rsp,%rdx
    13cd:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    13d1:	50                   	push   %rax
    13d2:	54                   	push   %rsp
    13d3:	4c 8d 05 96 10 00 00 	lea    0x1096(%rip),%r8        # 2470 <__libc_csu_fini>
    13da:	48 8d 0d 1f 10 00 00 	lea    0x101f(%rip),%rcx        # 2400 <__libc_csu_init>
    13e1:	48 8d 3d 68 ff ff ff 	lea    -0x98(%rip),%rdi        # 1350 <main>
    13e8:	ff 15 f2 3b 00 00    	callq  *0x3bf2(%rip)        # 4fe0 <__libc_start_main@GLIBC_2.2.5>
    13ee:	f4                   	hlt    
    13ef:	90                   	nop

00000000000013f0 <deregister_tm_clones>:
    13f0:	48 8d 3d 21 3c 00 00 	lea    0x3c21(%rip),%rdi        # 5018 <__TMC_END__>
    13f7:	48 8d 05 1a 3c 00 00 	lea    0x3c1a(%rip),%rax        # 5018 <__TMC_END__>
    13fe:	48 39 f8             	cmp    %rdi,%rax
    1401:	74 15                	je     1418 <deregister_tm_clones+0x28>
    1403:	48 8b 05 ce 3b 00 00 	mov    0x3bce(%rip),%rax        # 4fd8 <_ITM_deregisterTMCloneTable>
    140a:	48 85 c0             	test   %rax,%rax
    140d:	74 09                	je     1418 <deregister_tm_clones+0x28>
    140f:	ff e0                	jmpq   *%rax
    1411:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1418:	c3                   	retq   
    1419:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001420 <register_tm_clones>:
    1420:	48 8d 3d f1 3b 00 00 	lea    0x3bf1(%rip),%rdi        # 5018 <__TMC_END__>
    1427:	48 8d 35 ea 3b 00 00 	lea    0x3bea(%rip),%rsi        # 5018 <__TMC_END__>
    142e:	48 29 fe             	sub    %rdi,%rsi
    1431:	48 89 f0             	mov    %rsi,%rax
    1434:	48 c1 ee 3f          	shr    $0x3f,%rsi
    1438:	48 c1 f8 03          	sar    $0x3,%rax
    143c:	48 01 c6             	add    %rax,%rsi
    143f:	48 d1 fe             	sar    %rsi
    1442:	74 14                	je     1458 <register_tm_clones+0x38>
    1444:	48 8b 05 a5 3b 00 00 	mov    0x3ba5(%rip),%rax        # 4ff0 <_ITM_registerTMCloneTable>
    144b:	48 85 c0             	test   %rax,%rax
    144e:	74 08                	je     1458 <register_tm_clones+0x38>
    1450:	ff e0                	jmpq   *%rax
    1452:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1458:	c3                   	retq   
    1459:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001460 <__do_global_dtors_aux>:
    1460:	f3 0f 1e fa          	endbr64 
    1464:	80 3d e5 3c 00 00 00 	cmpb   $0x0,0x3ce5(%rip)        # 5150 <completed.8061>
    146b:	75 2b                	jne    1498 <__do_global_dtors_aux+0x38>
    146d:	55                   	push   %rbp
    146e:	48 83 3d 5a 3b 00 00 	cmpq   $0x0,0x3b5a(%rip)        # 4fd0 <__cxa_finalize@GLIBC_2.2.5>
    1475:	00 
    1476:	48 89 e5             	mov    %rsp,%rbp
    1479:	74 0c                	je     1487 <__do_global_dtors_aux+0x27>
    147b:	48 8b 3d 86 3b 00 00 	mov    0x3b86(%rip),%rdi        # 5008 <__dso_handle>
    1482:	e8 09 fd ff ff       	callq  1190 <__cxa_finalize@plt>
    1487:	e8 64 ff ff ff       	callq  13f0 <deregister_tm_clones>
    148c:	c6 05 bd 3c 00 00 01 	movb   $0x1,0x3cbd(%rip)        # 5150 <completed.8061>
    1493:	5d                   	pop    %rbp
    1494:	c3                   	retq   
    1495:	0f 1f 00             	nopl   (%rax)
    1498:	c3                   	retq   
    1499:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000014a0 <frame_dummy>:
    14a0:	f3 0f 1e fa          	endbr64 
    14a4:	e9 77 ff ff ff       	jmpq   1420 <register_tm_clones>
    14a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000014b0 <f0()>:
    14b0:	f3 0f 1e fa          	endbr64 
    14b4:	55                   	push   %rbp
    14b5:	4c 8d 05 64 3c ac 01 	lea    0x1ac3c64(%rip),%r8        # 1ac5120 <a>
    14bc:	41 bb 01 00 00 00    	mov    $0x1,%r11d
    14c2:	48 89 e5             	mov    %rsp,%rbp
    14c5:	41 57                	push   %r15
    14c7:	4c 8d 0d 92 3c 00 00 	lea    0x3c92(%rip),%r9        # 5160 <c>
    14ce:	41 56                	push   %r14
    14d0:	41 55                	push   %r13
    14d2:	41 54                	push   %r12
    14d4:	4d 89 c4             	mov    %r8,%r12
    14d7:	53                   	push   %rbx
    14d8:	48 8d 1d 41 95 00 00 	lea    0x9541(%rip),%rbx        # aa20 <b>
    14df:	48 89 df             	mov    %rbx,%rdi
    14e2:	49 89 fa             	mov    %rdi,%r10
    14e5:	4c 89 e6             	mov    %r12,%rsi
    14e8:	48 8d 0d 71 3c 00 00 	lea    0x3c71(%rip),%rcx        # 5160 <c>
    14ef:	31 d2                	xor    %edx,%edx
    14f1:	eb 2f                	jmp    1522 <f0()+0x72>
    14f3:	44 8b 6e 04          	mov    0x4(%rsi),%r13d
    14f7:	44 29 f8             	sub    %r15d,%eax
    14fa:	45 2b 6a 04          	sub    0x4(%r10),%r13d
    14fe:	44 01 f0             	add    %r14d,%eax
    1501:	44 01 e8             	add    %r13d,%eax
    1504:	ff c2                	inc    %edx
    1506:	89 01                	mov    %eax,(%rcx)
    1508:	48 81 c6 48 13 00 00 	add    $0x1348,%rsi
    150f:	48 83 c1 04          	add    $0x4,%rcx
    1513:	49 81 c2 48 13 00 00 	add    $0x1348,%r10
    151a:	81 fa 2e 16 00 00    	cmp    $0x162e,%edx
    1520:	74 1a                	je     153c <f0()+0x8c>
    1522:	44 8b 31             	mov    (%rcx),%r14d
    1525:	8b 06                	mov    (%rsi),%eax
    1527:	45 8b 3a             	mov    (%r10),%r15d
    152a:	f6 c2 01             	test   $0x1,%dl
    152d:	75 c4                	jne    14f3 <f0()+0x43>
    152f:	45 8b 6a 04          	mov    0x4(%r10),%r13d
    1533:	44 01 f8             	add    %r15d,%eax
    1536:	44 03 6e 04          	add    0x4(%rsi),%r13d
    153a:	eb c2                	jmp    14fe <f0()+0x4e>
    153c:	45 8d 53 01          	lea    0x1(%r11),%r10d
    1540:	41 83 c3 02          	add    $0x2,%r11d
    1544:	49 83 c4 08          	add    $0x8,%r12
    1548:	48 83 c7 08          	add    $0x8,%rdi
    154c:	41 81 fb d1 04 00 00 	cmp    $0x4d1,%r11d
    1553:	75 8d                	jne    14e2 <f0()+0x32>
    1555:	4d 63 d2             	movslq %r10d,%r10
    1558:	4a 8d 3c 95 00 00 00 	lea    0x0(,%r10,4),%rdi
    155f:	00 
    1560:	c5 7d 6f 05 d8 1a 00 	vmovdqa 0x1ad8(%rip),%ymm8        # 3040 <_IO_stdin_used+0x40>
    1567:	00 
    1568:	c5 fd 6f 3d f0 1a 00 	vmovdqa 0x1af0(%rip),%ymm7        # 3060 <_IO_stdin_used+0x60>
    156f:	00 
    1570:	c5 fd 6f 35 08 1b 00 	vmovdqa 0x1b08(%rip),%ymm6        # 3080 <_IO_stdin_used+0x80>
    1577:	00 
    1578:	49 01 f8             	add    %rdi,%r8
    157b:	49 8d b1 a0 58 00 00 	lea    0x58a0(%r9),%rsi
    1582:	48 01 df             	add    %rbx,%rdi
    1585:	c5 d1 ef ed          	vpxor  %xmm5,%xmm5,%xmm5
    1589:	48 89 fa             	mov    %rdi,%rdx
    158c:	4c 89 c0             	mov    %r8,%rax
    158f:	4c 89 c9             	mov    %r9,%rcx
    1592:	c5 7d 7f c4          	vmovdqa %ymm8,%ymm4
    1596:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    159d:	00 00 00 
    15a0:	c5 f9 6e 80 90 26 00 	vmovd  0x2690(%rax),%xmm0
    15a7:	00 
    15a8:	c5 f9 6e 88 b0 73 00 	vmovd  0x73b0(%rax),%xmm1
    15af:	00 
    15b0:	c5 f9 6e 98 20 4d 00 	vmovd  0x4d20(%rax),%xmm3
    15b7:	00 
    15b8:	c4 63 79 22 90 d8 39 	vpinsrd $0x1,0x39d8(%rax),%xmm0,%xmm10
    15bf:	00 00 01 
    15c2:	c4 e3 71 22 88 f8 86 	vpinsrd $0x1,0x86f8(%rax),%xmm1,%xmm1
    15c9:	00 00 01 
    15cc:	c4 e3 61 22 98 68 60 	vpinsrd $0x1,0x6068(%rax),%xmm3,%xmm3
    15d3:	00 00 01 
    15d6:	c5 f9 6e 00          	vmovd  (%rax),%xmm0
    15da:	c5 e1 6c d9          	vpunpcklqdq %xmm1,%xmm3,%xmm3
    15de:	c4 e3 79 22 80 48 13 	vpinsrd $0x1,0x1348(%rax),%xmm0,%xmm0
    15e5:	00 00 01 
    15e8:	c5 f9 6e 8a b0 73 00 	vmovd  0x73b0(%rdx),%xmm1
    15ef:	00 
    15f0:	c4 c1 79 6c c2       	vpunpcklqdq %xmm10,%xmm0,%xmm0
    15f5:	c4 63 71 22 92 f8 86 	vpinsrd $0x1,0x86f8(%rdx),%xmm1,%xmm10
    15fc:	00 00 01 
    15ff:	c5 f9 6e 8a 90 26 00 	vmovd  0x2690(%rdx),%xmm1
    1606:	00 
    1607:	c4 e3 7d 38 c3 01    	vinserti128 $0x1,%xmm3,%ymm0,%ymm0
    160d:	c4 63 71 22 9a d8 39 	vpinsrd $0x1,0x39d8(%rdx),%xmm1,%xmm11
    1614:	00 00 01 
    1617:	c5 f9 6e 9a 20 4d 00 	vmovd  0x4d20(%rdx),%xmm3
    161e:	00 
    161f:	c5 f9 6e 0a          	vmovd  (%rdx),%xmm1
    1623:	c4 e3 61 22 9a 68 60 	vpinsrd $0x1,0x6068(%rdx),%xmm3,%xmm3
    162a:	00 00 01 
    162d:	c4 e3 71 22 8a 48 13 	vpinsrd $0x1,0x1348(%rdx),%xmm1,%xmm1
    1634:	00 00 01 
    1637:	c5 fd 6f d4          	vmovdqa %ymm4,%ymm2
    163b:	c4 c1 61 6c da       	vpunpcklqdq %xmm10,%xmm3,%xmm3
    1640:	c4 c1 71 6c cb       	vpunpcklqdq %xmm11,%xmm1,%xmm1
    1645:	c4 e3 75 38 cb 01    	vinserti128 $0x1,%xmm3,%ymm1,%ymm1
    164b:	c5 ed db d6          	vpand  %ymm6,%ymm2,%ymm2
    164f:	c5 7d 6f 09          	vmovdqa (%rcx),%ymm9
    1653:	c5 fd fe d9          	vpaddd %ymm1,%ymm0,%ymm3
    1657:	c5 fd fa c1          	vpsubd %ymm1,%ymm0,%ymm0
    165b:	c5 ed 76 cd          	vpcmpeqd %ymm5,%ymm2,%ymm1
    165f:	c4 c1 65 fe d9       	vpaddd %ymm9,%ymm3,%ymm3
    1664:	c4 c1 7d fe c1       	vpaddd %ymm9,%ymm0,%ymm0
    1669:	c4 e3 7d 4c c3 10    	vpblendvb %ymm1,%ymm3,%ymm0,%ymm0
    166f:	c5 fd 7f 01          	vmovdqa %ymm0,(%rcx)
    1673:	48 83 c1 20          	add    $0x20,%rcx
    1677:	c5 dd fe e7          	vpaddd %ymm7,%ymm4,%ymm4
    167b:	48 05 40 9a 00 00    	add    $0x9a40,%rax
    1681:	48 81 c2 40 9a 00 00 	add    $0x9a40,%rdx
    1688:	48 39 ce             	cmp    %rcx,%rsi
    168b:	0f 85 0f ff ff ff    	jne    15a0 <f0()+0xf0>
    1691:	8b 87 40 33 ab 01    	mov    0x1ab3340(%rdi),%eax
    1697:	49 ff c2             	inc    %r10
    169a:	41 03 80 40 33 ab 01 	add    0x1ab3340(%r8),%eax
    16a1:	01 05 59 93 00 00    	add    %eax,0x9359(%rip)        # aa00 <c+0x58a0>
    16a7:	41 8b 80 88 46 ab 01 	mov    0x1ab4688(%r8),%eax
    16ae:	48 83 c7 04          	add    $0x4,%rdi
    16b2:	2b 87 84 46 ab 01    	sub    0x1ab4684(%rdi),%eax
    16b8:	01 05 46 93 00 00    	add    %eax,0x9346(%rip)        # aa04 <c+0x58a4>
    16be:	8b 87 cc 59 ab 01    	mov    0x1ab59cc(%rdi),%eax
    16c4:	49 83 c0 04          	add    $0x4,%r8
    16c8:	41 03 80 cc 59 ab 01 	add    0x1ab59cc(%r8),%eax
    16cf:	01 05 33 93 00 00    	add    %eax,0x9333(%rip)        # aa08 <c+0x58a8>
    16d5:	41 8b 80 14 6d ab 01 	mov    0x1ab6d14(%r8),%eax
    16dc:	2b 87 14 6d ab 01    	sub    0x1ab6d14(%rdi),%eax
    16e2:	01 05 24 93 00 00    	add    %eax,0x9324(%rip)        # aa0c <c+0x58ac>
    16e8:	41 8b 80 5c 80 ab 01 	mov    0x1ab805c(%r8),%eax
    16ef:	03 87 5c 80 ab 01    	add    0x1ab805c(%rdi),%eax
    16f5:	01 05 15 93 00 00    	add    %eax,0x9315(%rip)        # aa10 <c+0x58b0>
    16fb:	41 8b 80 a4 93 ab 01 	mov    0x1ab93a4(%r8),%eax
    1702:	2b 87 a4 93 ab 01    	sub    0x1ab93a4(%rdi),%eax
    1708:	01 05 06 93 00 00    	add    %eax,0x9306(%rip)        # aa14 <c+0x58b4>
    170e:	41 81 fa d2 04 00 00 	cmp    $0x4d2,%r10d
    1715:	0f 85 6e fe ff ff    	jne    1589 <f0()+0xd9>
    171b:	c5 f8 77             	vzeroupper 
    171e:	5b                   	pop    %rbx
    171f:	41 5c                	pop    %r12
    1721:	41 5d                	pop    %r13
    1723:	41 5e                	pop    %r14
    1725:	41 5f                	pop    %r15
    1727:	5d                   	pop    %rbp
    1728:	c3                   	retq   
    1729:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001730 <reset()>:
    1730:	f3 0f 1e fa          	endbr64 
    1734:	41 57                	push   %r15
    1736:	41 56                	push   %r14
    1738:	41 55                	push   %r13
    173a:	41 54                	push   %r12
    173c:	55                   	push   %rbp
    173d:	53                   	push   %rbx
    173e:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    1745:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    174c:	00 00 
    174e:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
    1753:	31 c0                	xor    %eax,%eax
    1755:	0f b6 05 c4 e0 57 03 	movzbl 0x357e0c4(%rip),%eax        # 357f820 <guard variable for reset()::device>
    175c:	84 c0                	test   %al,%al
    175e:	75 14                	jne    1774 <reset()+0x44>
    1760:	48 8d 3d b9 e0 57 03 	lea    0x357e0b9(%rip),%rdi        # 357f820 <guard variable for reset()::device>
    1767:	e8 84 fb ff ff       	callq  12f0 <__cxa_guard_acquire@plt>
    176c:	85 c0                	test   %eax,%eax
    176e:	0f 85 27 03 00 00    	jne    1a9b <reset()+0x36b>
    1774:	0f b6 05 95 e0 57 03 	movzbl 0x357e095(%rip),%eax        # 357f810 <guard variable for reset()::generator>
    177b:	84 c0                	test   %al,%al
    177d:	0f 84 a5 02 00 00    	je     1a28 <reset()+0x2f8>
    1783:	48 b8 fb ff ff ff 05 	movabs $0x5fffffffb,%rax
    178a:	00 00 00 
    178d:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
    1792:	48 8b 05 7f e0 57 03 	mov    0x357e07f(%rip),%rax        # 357f818 <reset()::generator>
    1799:	48 8d 0d 80 92 00 00 	lea    0x9280(%rip),%rcx        # aa20 <b>
    17a0:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    17a5:	48 8d 05 b4 39 00 00 	lea    0x39b4(%rip),%rax        # 5160 <c>
    17ac:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    17b1:	48 8d 05 68 39 ac 01 	lea    0x1ac3968(%rip),%rax        # 1ac5120 <a>
    17b8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    17bd:	48 05 f0 a6 ab 01    	add    $0x1aba6f0,%rax
    17c3:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    17c8:	4c 8d 74 24 40       	lea    0x40(%rsp),%r14
    17cd:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    17d2:	41 b8 05 00 00 00    	mov    $0x5,%r8d
    17d8:	b9 fb ff ff ff       	mov    $0xfffffffb,%ecx
    17dd:	4c 8d 64 24 48       	lea    0x48(%rsp),%r12
    17e2:	48 bd 05 00 00 00 02 	movabs $0x200000005,%rbp
    17e9:	00 00 00 
    17ec:	4d 89 f7             	mov    %r14,%r15
    17ef:	90                   	nop
    17f0:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    17f5:	45 31 ed             	xor    %r13d,%r13d
    17f8:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    17fe:	48 63 c1             	movslq %ecx,%rax
    1801:	49 29 c0             	sub    %rax,%r8
    1804:	4c 8d 74 24 38       	lea    0x38(%rsp),%r14
    1809:	49 81 f8 fc ff ff 7f 	cmp    $0x7ffffffc,%r8
    1810:	0f 87 bc 00 00 00    	ja     18d2 <reset()+0x1a2>
    1816:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    181d:	00 00 00 
    1820:	49 ff c0             	inc    %r8
    1823:	b8 fd ff ff 7f       	mov    $0x7ffffffd,%eax
    1828:	31 d2                	xor    %edx,%edx
    182a:	49 f7 f0             	div    %r8
    182d:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
    1832:	4c 0f af c0          	imul   %rax,%r8
    1836:	49 89 c2             	mov    %rax,%r10
    1839:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1840:	48 69 fe a7 41 00 00 	imul   $0x41a7,%rsi,%rdi
    1847:	48 89 f8             	mov    %rdi,%rax
    184a:	48 f7 e5             	mul    %rbp
    184d:	48 89 fe             	mov    %rdi,%rsi
    1850:	48 29 d6             	sub    %rdx,%rsi
    1853:	48 d1 ee             	shr    %rsi
    1856:	48 01 f2             	add    %rsi,%rdx
    1859:	48 89 d6             	mov    %rdx,%rsi
    185c:	48 c1 ee 1e          	shr    $0x1e,%rsi
    1860:	48 89 f0             	mov    %rsi,%rax
    1863:	48 c1 e0 1f          	shl    $0x1f,%rax
    1867:	48 29 f0             	sub    %rsi,%rax
    186a:	48 29 c7             	sub    %rax,%rdi
    186d:	48 8d 47 ff          	lea    -0x1(%rdi),%rax
    1871:	48 89 fe             	mov    %rdi,%rsi
    1874:	49 39 c0             	cmp    %rax,%r8
    1877:	76 c7                	jbe    1840 <reset()+0x110>
    1879:	31 d2                	xor    %edx,%edx
    187b:	49 f7 f2             	div    %r10
    187e:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
    1883:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
    1888:	01 c8                	add    %ecx,%eax
    188a:	42 89 04 2b          	mov    %eax,(%rbx,%r13,1)
    188e:	4c 89 fa             	mov    %r15,%rdx
    1891:	4c 89 e6             	mov    %r12,%rsi
    1894:	4c 89 ff             	mov    %r15,%rdi
    1897:	e8 d4 02 00 00       	callq  1b70 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)>
    189c:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
    18a1:	42 89 04 2b          	mov    %eax,(%rbx,%r13,1)
    18a5:	49 83 c5 04          	add    $0x4,%r13
    18a9:	49 81 fd 48 13 00 00 	cmp    $0x1348,%r13
    18b0:	0f 84 1a 01 00 00    	je     19d0 <reset()+0x2a0>
    18b6:	8b 4c 24 40          	mov    0x40(%rsp),%ecx
    18ba:	4c 63 44 24 44       	movslq 0x44(%rsp),%r8
    18bf:	48 63 c1             	movslq %ecx,%rax
    18c2:	49 29 c0             	sub    %rax,%r8
    18c5:	49 81 f8 fc ff ff 7f 	cmp    $0x7ffffffc,%r8
    18cc:	0f 86 4e ff ff ff    	jbe    1820 <reset()+0xf0>
    18d2:	49 81 f8 fd ff ff 7f 	cmp    $0x7ffffffd,%r8
    18d9:	0f 84 b1 00 00 00    	je     1990 <reset()+0x260>
    18df:	4c 89 c2             	mov    %r8,%rdx
    18e2:	48 d1 ea             	shr    %rdx
    18e5:	48 b8 09 00 00 00 02 	movabs $0x8000000200000009,%rax
    18ec:	00 00 80 
    18ef:	48 f7 e2             	mul    %rdx
    18f2:	4c 89 6c 24 18       	mov    %r13,0x18(%rsp)
    18f7:	4d 89 e5             	mov    %r12,%r13
    18fa:	48 89 d3             	mov    %rdx,%rbx
    18fd:	48 c1 eb 1d          	shr    $0x1d,%rbx
    1901:	41 89 dc             	mov    %ebx,%r12d
    1904:	4c 89 c3             	mov    %r8,%rbx
    1907:	4c 89 f2             	mov    %r14,%rdx
    190a:	4c 89 ee             	mov    %r13,%rsi
    190d:	4c 89 ff             	mov    %r15,%rdi
    1910:	c7 44 24 38 00 00 00 	movl   $0x0,0x38(%rsp)
    1917:	00 
    1918:	44 89 64 24 3c       	mov    %r12d,0x3c(%rsp)
    191d:	e8 4e 02 00 00       	callq  1b70 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)>
    1922:	48 69 74 24 48 a7 41 	imul   $0x41a7,0x48(%rsp),%rsi
    1929:	00 00 
    192b:	41 89 c0             	mov    %eax,%r8d
    192e:	48 89 f0             	mov    %rsi,%rax
    1931:	48 f7 e5             	mul    %rbp
    1934:	48 89 f0             	mov    %rsi,%rax
    1937:	48 29 d0             	sub    %rdx,%rax
    193a:	48 d1 e8             	shr    %rax
    193d:	48 01 c2             	add    %rax,%rdx
    1940:	48 c1 ea 1e          	shr    $0x1e,%rdx
    1944:	48 89 d0             	mov    %rdx,%rax
    1947:	48 c1 e0 1f          	shl    $0x1f,%rax
    194b:	48 29 d0             	sub    %rdx,%rax
    194e:	48 29 c6             	sub    %rax,%rsi
    1951:	49 63 c0             	movslq %r8d,%rax
    1954:	48 69 c0 fe ff ff 7f 	imul   $0x7ffffffe,%rax,%rax
    195b:	48 89 f2             	mov    %rsi,%rdx
    195e:	48 ff ca             	dec    %rdx
    1961:	48 01 c2             	add    %rax,%rdx
    1964:	0f 92 c0             	setb   %al
    1967:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
    196c:	0f b6 c0             	movzbl %al,%eax
    196f:	48 39 d3             	cmp    %rdx,%rbx
    1972:	72 93                	jb     1907 <reset()+0x1d7>
    1974:	48 85 c0             	test   %rax,%rax
    1977:	75 8e                	jne    1907 <reset()+0x1d7>
    1979:	4d 89 ec             	mov    %r13,%r12
    197c:	8b 4c 24 40          	mov    0x40(%rsp),%ecx
    1980:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
    1985:	48 89 d0             	mov    %rdx,%rax
    1988:	e9 f6 fe ff ff       	jmpq   1883 <reset()+0x153>
    198d:	0f 1f 00             	nopl   (%rax)
    1990:	48 69 74 24 48 a7 41 	imul   $0x41a7,0x48(%rsp),%rsi
    1997:	00 00 
    1999:	48 89 f0             	mov    %rsi,%rax
    199c:	48 f7 e5             	mul    %rbp
    199f:	48 89 f0             	mov    %rsi,%rax
    19a2:	48 29 d0             	sub    %rdx,%rax
    19a5:	48 d1 e8             	shr    %rax
    19a8:	48 01 d0             	add    %rdx,%rax
    19ab:	48 c1 e8 1e          	shr    $0x1e,%rax
    19af:	48 89 c2             	mov    %rax,%rdx
    19b2:	48 c1 e2 1f          	shl    $0x1f,%rdx
    19b6:	48 29 c2             	sub    %rax,%rdx
    19b9:	48 29 d6             	sub    %rdx,%rsi
    19bc:	48 89 f0             	mov    %rsi,%rax
    19bf:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
    19c4:	48 ff c8             	dec    %rax
    19c7:	e9 b7 fe ff ff       	jmpq   1883 <reset()+0x153>
    19cc:	0f 1f 40 00          	nopl   0x0(%rax)
    19d0:	48 81 44 24 08 48 13 	addq   $0x1348,0x8(%rsp)
    19d7:	00 00 
    19d9:	48 83 44 24 20 04    	addq   $0x4,0x20(%rsp)
    19df:	48 81 44 24 10 48 13 	addq   $0x1348,0x10(%rsp)
    19e6:	00 00 
    19e8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    19ed:	48 39 44 24 28       	cmp    %rax,0x28(%rsp)
    19f2:	74 0e                	je     1a02 <reset()+0x2d2>
    19f4:	4c 63 44 24 44       	movslq 0x44(%rsp),%r8
    19f9:	8b 4c 24 40          	mov    0x40(%rsp),%ecx
    19fd:	e9 ee fd ff ff       	jmpq   17f0 <reset()+0xc0>
    1a02:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
    1a07:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    1a0e:	00 00 
    1a10:	0f 85 ff 00 00 00    	jne    1b15 <reset()+0x3e5>
    1a16:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
    1a1d:	5b                   	pop    %rbx
    1a1e:	5d                   	pop    %rbp
    1a1f:	41 5c                	pop    %r12
    1a21:	41 5d                	pop    %r13
    1a23:	41 5e                	pop    %r14
    1a25:	41 5f                	pop    %r15
    1a27:	c3                   	retq   
    1a28:	48 8d 3d e1 dd 57 03 	lea    0x357dde1(%rip),%rdi        # 357f810 <guard variable for reset()::generator>
    1a2f:	e8 bc f8 ff ff       	callq  12f0 <__cxa_guard_acquire@plt>
    1a34:	85 c0                	test   %eax,%eax
    1a36:	0f 84 47 fd ff ff    	je     1783 <reset()+0x53>
    1a3c:	48 8d 3d fd dd 57 03 	lea    0x357ddfd(%rip),%rdi        # 357f840 <reset()::device>
    1a43:	e8 28 f8 ff ff       	callq  1270 <std::random_device::_M_getval()@plt>
    1a48:	89 c1                	mov    %eax,%ecx
    1a4a:	48 89 c8             	mov    %rcx,%rax
    1a4d:	48 ba 05 00 00 00 02 	movabs $0x200000005,%rdx
    1a54:	00 00 00 
    1a57:	48 f7 e2             	mul    %rdx
    1a5a:	48 89 c8             	mov    %rcx,%rax
    1a5d:	48 8d 3d ac dd 57 03 	lea    0x357ddac(%rip),%rdi        # 357f810 <guard variable for reset()::generator>
    1a64:	48 29 d0             	sub    %rdx,%rax
    1a67:	48 d1 e8             	shr    %rax
    1a6a:	48 01 d0             	add    %rdx,%rax
    1a6d:	48 c1 e8 1e          	shr    $0x1e,%rax
    1a71:	48 89 c2             	mov    %rax,%rdx
    1a74:	48 c1 e2 1f          	shl    $0x1f,%rdx
    1a78:	48 29 c2             	sub    %rax,%rdx
    1a7b:	48 29 d1             	sub    %rdx,%rcx
    1a7e:	48 89 c8             	mov    %rcx,%rax
    1a81:	ba 01 00 00 00       	mov    $0x1,%edx
    1a86:	48 0f 44 c2          	cmove  %rdx,%rax
    1a8a:	48 89 05 87 dd 57 03 	mov    %rax,0x357dd87(%rip)        # 357f818 <reset()::generator>
    1a91:	e8 4a f7 ff ff       	callq  11e0 <__cxa_guard_release@plt>
    1a96:	e9 e8 fc ff ff       	jmpq   1783 <reset()+0x53>
    1a9b:	48 8d 5c 24 60       	lea    0x60(%rsp),%rbx
    1aa0:	b8 75 6c 00 00       	mov    $0x6c75,%eax
    1aa5:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
    1aaa:	48 8d 3d 8f dd 57 03 	lea    0x357dd8f(%rip),%rdi        # 357f840 <reset()::device>
    1ab1:	48 89 5c 24 50       	mov    %rbx,0x50(%rsp)
    1ab6:	c7 44 24 60 64 65 66 	movl   $0x61666564,0x60(%rsp)
    1abd:	61 
    1abe:	66 89 44 24 64       	mov    %ax,0x64(%rsp)
    1ac3:	c6 44 24 66 74       	movb   $0x74,0x66(%rsp)
    1ac8:	48 c7 44 24 58 07 00 	movq   $0x7,0x58(%rsp)
    1acf:	00 00 
    1ad1:	c6 44 24 67 00       	movb   $0x0,0x67(%rsp)
    1ad6:	e8 d5 f7 ff ff       	callq  12b0 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    1adb:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
    1ae0:	48 39 df             	cmp    %rbx,%rdi
    1ae3:	74 05                	je     1aea <reset()+0x3ba>
    1ae5:	e8 36 f7 ff ff       	callq  1220 <operator delete(void*)@plt>
    1aea:	48 8d 15 17 35 00 00 	lea    0x3517(%rip),%rdx        # 5008 <__dso_handle>
    1af1:	48 8d 35 48 dd 57 03 	lea    0x357dd48(%rip),%rsi        # 357f840 <reset()::device>
    1af8:	48 8d 3d 51 00 00 00 	lea    0x51(%rip),%rdi        # 1b50 <std::random_device::~random_device()>
    1aff:	e8 fc f6 ff ff       	callq  1200 <__cxa_atexit@plt>
    1b04:	48 8d 3d 15 dd 57 03 	lea    0x357dd15(%rip),%rdi        # 357f820 <guard variable for reset()::device>
    1b0b:	e8 d0 f6 ff ff       	callq  11e0 <__cxa_guard_release@plt>
    1b10:	e9 5f fc ff ff       	jmpq   1774 <reset()+0x44>
    1b15:	e8 16 f7 ff ff       	callq  1230 <__stack_chk_fail@plt>
    1b1a:	f3 0f 1e fa          	endbr64 
    1b1e:	48 89 c5             	mov    %rax,%rbp
    1b21:	e9 da f7 ff ff       	jmpq   1300 <reset() [clone .cold]>
    1b26:	f3 0f 1e fa          	endbr64 
    1b2a:	48 89 c5             	mov    %rax,%rbp
    1b2d:	e9 e5 f7 ff ff       	jmpq   1317 <reset() [clone .cold]+0x17>
    1b32:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1b39:	00 00 00 
    1b3c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001b40 <std::ctype<char>::do_widen(char) const>:
    1b40:	f3 0f 1e fa          	endbr64 
    1b44:	89 f0                	mov    %esi,%eax
    1b46:	c3                   	retq   
    1b47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    1b4e:	00 00 

0000000000001b50 <std::random_device::~random_device()>:
    1b50:	f3 0f 1e fa          	endbr64 
    1b54:	48 83 ec 08          	sub    $0x8,%rsp
    1b58:	e8 b3 f6 ff ff       	callq  1210 <std::random_device::_M_fini()@plt>
    1b5d:	48 83 c4 08          	add    $0x8,%rsp
    1b61:	c3                   	retq   
    1b62:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1b69:	00 00 00 
    1b6c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001b70 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)>:
    1b70:	f3 0f 1e fa          	endbr64 
    1b74:	41 57                	push   %r15
    1b76:	41 56                	push   %r14
    1b78:	41 55                	push   %r13
    1b7a:	49 89 f5             	mov    %rsi,%r13
    1b7d:	41 54                	push   %r12
    1b7f:	55                   	push   %rbp
    1b80:	53                   	push   %rbx
    1b81:	48 83 ec 18          	sub    $0x18,%rsp
    1b85:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1b8c:	00 00 
    1b8e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    1b93:	31 c0                	xor    %eax,%eax
    1b95:	4c 63 72 04          	movslq 0x4(%rdx),%r14
    1b99:	48 63 02             	movslq (%rdx),%rax
    1b9c:	49 29 c6             	sub    %rax,%r14
    1b9f:	48 89 c6             	mov    %rax,%rsi
    1ba2:	49 81 fe fc ff ff 7f 	cmp    $0x7ffffffc,%r14
    1ba9:	0f 87 91 00 00 00    	ja     1c40 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)+0xd0>
    1baf:	49 ff c6             	inc    %r14
    1bb2:	b8 fd ff ff 7f       	mov    $0x7ffffffd,%eax
    1bb7:	31 d2                	xor    %edx,%edx
    1bb9:	49 f7 f6             	div    %r14
    1bbc:	49 8b 4d 00          	mov    0x0(%r13),%rcx
    1bc0:	49 b9 05 00 00 00 02 	movabs $0x200000005,%r9
    1bc7:	00 00 00 
    1bca:	4c 0f af f0          	imul   %rax,%r14
    1bce:	49 89 c2             	mov    %rax,%r10
    1bd1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1bd8:	4c 69 c1 a7 41 00 00 	imul   $0x41a7,%rcx,%r8
    1bdf:	4c 89 c0             	mov    %r8,%rax
    1be2:	49 f7 e1             	mul    %r9
    1be5:	4c 89 c1             	mov    %r8,%rcx
    1be8:	48 29 d1             	sub    %rdx,%rcx
    1beb:	48 d1 e9             	shr    %rcx
    1bee:	48 01 ca             	add    %rcx,%rdx
    1bf1:	48 c1 ea 1e          	shr    $0x1e,%rdx
    1bf5:	48 89 d7             	mov    %rdx,%rdi
    1bf8:	48 c1 e7 1f          	shl    $0x1f,%rdi
    1bfc:	48 29 d7             	sub    %rdx,%rdi
    1bff:	49 29 f8             	sub    %rdi,%r8
    1c02:	49 8d 40 ff          	lea    -0x1(%r8),%rax
    1c06:	4c 89 c1             	mov    %r8,%rcx
    1c09:	49 39 c6             	cmp    %rax,%r14
    1c0c:	76 ca                	jbe    1bd8 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)+0x68>
    1c0e:	31 d2                	xor    %edx,%edx
    1c10:	49 f7 f2             	div    %r10
    1c13:	4d 89 45 00          	mov    %r8,0x0(%r13)
    1c17:	01 f0                	add    %esi,%eax
    1c19:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
    1c1e:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
    1c25:	00 00 
    1c27:	0f 85 07 01 00 00    	jne    1d34 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)+0x1c4>
    1c2d:	48 83 c4 18          	add    $0x18,%rsp
    1c31:	5b                   	pop    %rbx
    1c32:	5d                   	pop    %rbp
    1c33:	41 5c                	pop    %r12
    1c35:	41 5d                	pop    %r13
    1c37:	41 5e                	pop    %r14
    1c39:	41 5f                	pop    %r15
    1c3b:	c3                   	retq   
    1c3c:	0f 1f 40 00          	nopl   0x0(%rax)
    1c40:	49 81 fe fd ff ff 7f 	cmp    $0x7ffffffd,%r14
    1c47:	0f 84 a3 00 00 00    	je     1cf0 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)+0x180>
    1c4d:	49 89 d7             	mov    %rdx,%r15
    1c50:	4c 89 f2             	mov    %r14,%rdx
    1c53:	48 d1 ea             	shr    %rdx
    1c56:	48 bb 09 00 00 00 02 	movabs $0x8000000200000009,%rbx
    1c5d:	00 00 80 
    1c60:	48 89 d0             	mov    %rdx,%rax
    1c63:	48 f7 e3             	mul    %rbx
    1c66:	48 89 fd             	mov    %rdi,%rbp
    1c69:	49 89 e4             	mov    %rsp,%r12
    1c6c:	48 89 d3             	mov    %rdx,%rbx
    1c6f:	48 c1 eb 1d          	shr    $0x1d,%rbx
    1c73:	4c 89 e2             	mov    %r12,%rdx
    1c76:	4c 89 ee             	mov    %r13,%rsi
    1c79:	48 89 ef             	mov    %rbp,%rdi
    1c7c:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
    1c83:	89 5c 24 04          	mov    %ebx,0x4(%rsp)
    1c87:	e8 e4 fe ff ff       	callq  1b70 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)>
    1c8c:	49 69 4d 00 a7 41 00 	imul   $0x41a7,0x0(%r13),%rcx
    1c93:	00 
    1c94:	4c 63 c0             	movslq %eax,%r8
    1c97:	48 b8 05 00 00 00 02 	movabs $0x200000005,%rax
    1c9e:	00 00 00 
    1ca1:	48 f7 e1             	mul    %rcx
    1ca4:	48 89 c8             	mov    %rcx,%rax
    1ca7:	48 29 d0             	sub    %rdx,%rax
    1caa:	48 d1 e8             	shr    %rax
    1cad:	48 01 c2             	add    %rax,%rdx
    1cb0:	48 c1 ea 1e          	shr    $0x1e,%rdx
    1cb4:	48 89 d0             	mov    %rdx,%rax
    1cb7:	48 c1 e0 1f          	shl    $0x1f,%rax
    1cbb:	48 29 d0             	sub    %rdx,%rax
    1cbe:	48 89 ca             	mov    %rcx,%rdx
    1cc1:	48 29 c2             	sub    %rax,%rdx
    1cc4:	49 69 c0 fe ff ff 7f 	imul   $0x7ffffffe,%r8,%rax
    1ccb:	49 89 55 00          	mov    %rdx,0x0(%r13)
    1ccf:	48 ff ca             	dec    %rdx
    1cd2:	48 01 d0             	add    %rdx,%rax
    1cd5:	0f 92 c2             	setb   %dl
    1cd8:	0f b6 d2             	movzbl %dl,%edx
    1cdb:	49 39 c6             	cmp    %rax,%r14
    1cde:	72 93                	jb     1c73 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)+0x103>
    1ce0:	48 85 d2             	test   %rdx,%rdx
    1ce3:	75 8e                	jne    1c73 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)+0x103>
    1ce5:	41 8b 37             	mov    (%r15),%esi
    1ce8:	e9 2a ff ff ff       	jmpq   1c17 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)+0xa7>
    1ced:	0f 1f 00             	nopl   (%rax)
    1cf0:	49 69 4d 00 a7 41 00 	imul   $0x41a7,0x0(%r13),%rcx
    1cf7:	00 
    1cf8:	48 ba 05 00 00 00 02 	movabs $0x200000005,%rdx
    1cff:	00 00 00 
    1d02:	48 89 c8             	mov    %rcx,%rax
    1d05:	48 f7 e2             	mul    %rdx
    1d08:	48 89 c8             	mov    %rcx,%rax
    1d0b:	48 29 d0             	sub    %rdx,%rax
    1d0e:	48 d1 e8             	shr    %rax
    1d11:	48 01 d0             	add    %rdx,%rax
    1d14:	48 c1 e8 1e          	shr    $0x1e,%rax
    1d18:	48 89 c2             	mov    %rax,%rdx
    1d1b:	48 c1 e2 1f          	shl    $0x1f,%rdx
    1d1f:	48 29 c2             	sub    %rax,%rdx
    1d22:	48 29 d1             	sub    %rdx,%rcx
    1d25:	48 89 c8             	mov    %rcx,%rax
    1d28:	49 89 4d 00          	mov    %rcx,0x0(%r13)
    1d2c:	48 ff c8             	dec    %rax
    1d2f:	e9 e3 fe ff ff       	jmpq   1c17 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)+0xa7>
    1d34:	e8 f7 f4 ff ff       	callq  1230 <__stack_chk_fail@plt>
    1d39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001d40 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>:
    1d40:	f3 0f 1e fa          	endbr64 
    1d44:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
    1d48:	49 89 c2             	mov    %rax,%r10
    1d4b:	49 c1 ea 3f          	shr    $0x3f,%r10
    1d4f:	49 01 c2             	add    %rax,%r10
    1d52:	49 89 d3             	mov    %rdx,%r11
    1d55:	49 d1 fa             	sar    %r10
    1d58:	41 83 e3 01          	and    $0x1,%r11d
    1d5c:	4c 39 d6             	cmp    %r10,%rsi
    1d5f:	0f 8d bb 00 00 00    	jge    1e20 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xe0>
    1d65:	49 89 f1             	mov    %rsi,%r9
    1d68:	eb 20                	jmp    1d8a <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x4a>
    1d6a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1d70:	48 ff c8             	dec    %rax
    1d73:	4c 8d 04 c7          	lea    (%rdi,%rax,8),%r8
    1d77:	c4 c1 7b 10 08       	vmovsd (%r8),%xmm1
    1d7c:	c4 a1 7b 11 0c cf    	vmovsd %xmm1,(%rdi,%r9,8)
    1d82:	49 39 c2             	cmp    %rax,%r10
    1d85:	7e 30                	jle    1db7 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x77>
    1d87:	49 89 c1             	mov    %rax,%r9
    1d8a:	49 8d 49 01          	lea    0x1(%r9),%rcx
    1d8e:	48 8d 04 09          	lea    (%rcx,%rcx,1),%rax
    1d92:	48 c1 e1 04          	shl    $0x4,%rcx
    1d96:	c5 fb 10 4c 0f f8    	vmovsd -0x8(%rdi,%rcx,1),%xmm1
    1d9c:	4c 8d 04 0f          	lea    (%rdi,%rcx,1),%r8
    1da0:	c4 c1 79 2f 08       	vcomisd (%r8),%xmm1
    1da5:	77 c9                	ja     1d70 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x30>
    1da7:	c4 c1 7b 10 08       	vmovsd (%r8),%xmm1
    1dac:	c4 a1 7b 11 0c cf    	vmovsd %xmm1,(%rdi,%r9,8)
    1db2:	49 39 c2             	cmp    %rax,%r10
    1db5:	7f d0                	jg     1d87 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x47>
    1db7:	4d 85 db             	test   %r11,%r11
    1dba:	74 74                	je     1e30 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xf0>
    1dbc:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    1dc0:	48 89 d1             	mov    %rdx,%rcx
    1dc3:	48 c1 e9 3f          	shr    $0x3f,%rcx
    1dc7:	48 01 d1             	add    %rdx,%rcx
    1dca:	48 d1 f9             	sar    %rcx
    1dcd:	48 39 f0             	cmp    %rsi,%rax
    1dd0:	7f 2f                	jg     1e01 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xc1>
    1dd2:	eb 3c                	jmp    1e10 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
    1dd4:	0f 1f 40 00          	nopl   0x0(%rax)
    1dd8:	48 8d 51 ff          	lea    -0x1(%rcx),%rdx
    1ddc:	48 89 d0             	mov    %rdx,%rax
    1ddf:	48 c1 e8 3f          	shr    $0x3f,%rax
    1de3:	48 01 d0             	add    %rdx,%rax
    1de6:	c4 c1 7b 10 09       	vmovsd (%r9),%xmm1
    1deb:	48 d1 f8             	sar    %rax
    1dee:	48 89 c2             	mov    %rax,%rdx
    1df1:	c4 c1 7b 11 08       	vmovsd %xmm1,(%r8)
    1df6:	48 89 c8             	mov    %rcx,%rax
    1df9:	48 39 ce             	cmp    %rcx,%rsi
    1dfc:	7d 72                	jge    1e70 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x130>
    1dfe:	48 89 d1             	mov    %rdx,%rcx
    1e01:	4c 8d 0c cf          	lea    (%rdi,%rcx,8),%r9
    1e05:	c4 c1 79 2f 01       	vcomisd (%r9),%xmm0
    1e0a:	4c 8d 04 c7          	lea    (%rdi,%rax,8),%r8
    1e0e:	77 c8                	ja     1dd8 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x98>
    1e10:	c4 c1 7b 11 00       	vmovsd %xmm0,(%r8)
    1e15:	c3                   	retq   
    1e16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1e1d:	00 00 00 
    1e20:	4c 8d 04 f7          	lea    (%rdi,%rsi,8),%r8
    1e24:	4d 85 db             	test   %r11,%r11
    1e27:	75 e7                	jne    1e10 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
    1e29:	48 89 f0             	mov    %rsi,%rax
    1e2c:	0f 1f 40 00          	nopl   0x0(%rax)
    1e30:	48 83 ea 02          	sub    $0x2,%rdx
    1e34:	48 89 d1             	mov    %rdx,%rcx
    1e37:	48 c1 e9 3f          	shr    $0x3f,%rcx
    1e3b:	48 01 ca             	add    %rcx,%rdx
    1e3e:	48 d1 fa             	sar    %rdx
    1e41:	48 39 c2             	cmp    %rax,%rdx
    1e44:	0f 85 72 ff ff ff    	jne    1dbc <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x7c>
    1e4a:	48 8d 44 00 02       	lea    0x2(%rax,%rax,1),%rax
    1e4f:	c5 fb 10 4c c7 f8    	vmovsd -0x8(%rdi,%rax,8),%xmm1
    1e55:	48 ff c8             	dec    %rax
    1e58:	c4 c1 7b 11 08       	vmovsd %xmm1,(%r8)
    1e5d:	4c 8d 04 c7          	lea    (%rdi,%rax,8),%r8
    1e61:	e9 56 ff ff ff       	jmpq   1dbc <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x7c>
    1e66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1e6d:	00 00 00 
    1e70:	4d 89 c8             	mov    %r9,%r8
    1e73:	c4 c1 7b 11 00       	vmovsd %xmm0,(%r8)
    1e78:	c3                   	retq   
    1e79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001e80 <void test<void ()>(void ( const&)(), char const*)>:
    1e80:	f3 0f 1e fa          	endbr64 
    1e84:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    1e89:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    1e8d:	41 ff 72 f8          	pushq  -0x8(%r10)
    1e91:	55                   	push   %rbp
    1e92:	48 89 e5             	mov    %rsp,%rbp
    1e95:	41 57                	push   %r15
    1e97:	41 56                	push   %r14
    1e99:	49 89 f6             	mov    %rsi,%r14
    1e9c:	41 55                	push   %r13
    1e9e:	49 89 fd             	mov    %rdi,%r13
    1ea1:	41 54                	push   %r12
    1ea3:	4c 8d 65 c8          	lea    -0x38(%rbp),%r12
    1ea7:	41 52                	push   %r10
    1ea9:	53                   	push   %rbx
    1eaa:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
    1eb1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1eb8:	00 00 
    1eba:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    1ebe:	31 c0                	xor    %eax,%eax
    1ec0:	e8 6b f8 ff ff       	callq  1730 <reset()>
    1ec5:	41 ff d5             	callq  *%r13
    1ec8:	41 ff d5             	callq  *%r13
    1ecb:	41 ff d5             	callq  *%r13
    1ece:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    1ed5:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    1edc:	48 89 c3             	mov    %rax,%rbx
    1edf:	90                   	nop
    1ee0:	e8 cb f2 ff ff       	callq  11b0 <std::chrono::_V2::system_clock::now()@plt>
    1ee5:	49 89 c7             	mov    %rax,%r15
    1ee8:	41 ff d5             	callq  *%r13
    1eeb:	e8 c0 f2 ff ff       	callq  11b0 <std::chrono::_V2::system_clock::now()@plt>
    1ef0:	4c 29 f8             	sub    %r15,%rax
    1ef3:	c5 d9 57 e4          	vxorpd %xmm4,%xmm4,%xmm4
    1ef7:	c4 e1 db 2a c0       	vcvtsi2sd %rax,%xmm4,%xmm0
    1efc:	48 83 c3 08          	add    $0x8,%rbx
    1f00:	c5 fb 5e 05 98 11 00 	vdivsd 0x1198(%rip),%xmm0,%xmm0        # 30a0 <_IO_stdin_used+0xa0>
    1f07:	00 
    1f08:	c5 fb 11 43 f8       	vmovsd %xmm0,-0x8(%rbx)
    1f0d:	49 39 dc             	cmp    %rbx,%r12
    1f10:	75 ce                	jne    1ee0 <void test<void ()>(void ( const&)(), char const*)+0x60>
    1f12:	c5 fb 10 8d 00 ff ff 	vmovsd -0x100(%rbp),%xmm1
    1f19:	ff 
    1f1a:	48 8b 9d e8 fe ff ff 	mov    -0x118(%rbp),%rbx
    1f21:	be 08 00 00 00       	mov    $0x8,%esi
    1f26:	b8 c8 00 00 00       	mov    $0xc8,%eax
    1f2b:	4d 89 e7             	mov    %r12,%r15
    1f2e:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
    1f35:	0f 1f 00             	nopl   (%rax)
    1f38:	48 c1 f8 04          	sar    $0x4,%rax
    1f3c:	48 8d 04 c3          	lea    (%rbx,%rax,8),%rax
    1f40:	c5 fb 10 53 08       	vmovsd 0x8(%rbx),%xmm2
    1f45:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    1f49:	c4 c1 7b 10 5f f8    	vmovsd -0x8(%r15),%xmm3
    1f4f:	c5 f9 2f c2          	vcomisd %xmm2,%xmm0
    1f53:	48 8d 53 08          	lea    0x8(%rbx),%rdx
    1f57:	0f 86 33 03 00 00    	jbe    2290 <void test<void ()>(void ( const&)(), char const*)+0x410>
    1f5d:	c5 f9 2f d8          	vcomisd %xmm0,%xmm3
    1f61:	0f 87 3d 03 00 00    	ja     22a4 <void test<void ()>(void ( const&)(), char const*)+0x424>
    1f67:	c5 f9 2f da          	vcomisd %xmm2,%xmm3
    1f6b:	0f 86 0f 04 00 00    	jbe    2380 <void test<void ()>(void ( const&)(), char const*)+0x500>
    1f71:	c5 fb 11 1b          	vmovsd %xmm3,(%rbx)
    1f75:	c5 f9 28 d1          	vmovapd %xmm1,%xmm2
    1f79:	c4 c1 7b 11 4f f8    	vmovsd %xmm1,-0x8(%r15)
    1f7f:	c5 fb 10 03          	vmovsd (%rbx),%xmm0
    1f83:	4c 89 f8             	mov    %r15,%rax
    1f86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1f8d:	00 00 00 
    1f90:	c5 fb 10 0a          	vmovsd (%rdx),%xmm1
    1f94:	c5 f9 2f c1          	vcomisd %xmm1,%xmm0
    1f98:	77 37                	ja     1fd1 <void test<void ()>(void ( const&)(), char const*)+0x151>
    1f9a:	48 83 e8 08          	sub    $0x8,%rax
    1f9e:	c5 f9 2f d0          	vcomisd %xmm0,%xmm2
    1fa2:	76 13                	jbe    1fb7 <void test<void ()>(void ( const&)(), char const*)+0x137>
    1fa4:	0f 1f 40 00          	nopl   0x0(%rax)
    1fa8:	c5 fb 10 50 f8       	vmovsd -0x8(%rax),%xmm2
    1fad:	48 83 e8 08          	sub    $0x8,%rax
    1fb1:	c5 f9 2f d0          	vcomisd %xmm0,%xmm2
    1fb5:	77 f1                	ja     1fa8 <void test<void ()>(void ( const&)(), char const*)+0x128>
    1fb7:	48 39 d0             	cmp    %rdx,%rax
    1fba:	76 24                	jbe    1fe0 <void test<void ()>(void ( const&)(), char const*)+0x160>
    1fbc:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    1fc0:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    1fc4:	c5 fb 11 08          	vmovsd %xmm1,(%rax)
    1fc8:	c5 fb 10 50 f8       	vmovsd -0x8(%rax),%xmm2
    1fcd:	c5 fb 10 03          	vmovsd (%rbx),%xmm0
    1fd1:	48 83 c2 08          	add    $0x8,%rdx
    1fd5:	eb b9                	jmp    1f90 <void test<void ()>(void ( const&)(), char const*)+0x110>
    1fd7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    1fde:	00 00 
    1fe0:	48 39 fa             	cmp    %rdi,%rdx
    1fe3:	0f 86 d7 02 00 00    	jbe    22c0 <void test<void ()>(void ( const&)(), char const*)+0x440>
    1fe9:	49 89 d7             	mov    %rdx,%r15
    1fec:	4c 89 f8             	mov    %r15,%rax
    1fef:	48 29 d8             	sub    %rbx,%rax
    1ff2:	c5 f9 28 c8          	vmovapd %xmm0,%xmm1
    1ff6:	48 83 f8 18          	cmp    $0x18,%rax
    1ffa:	0f 8e d3 02 00 00    	jle    22d3 <void test<void ()>(void ( const&)(), char const*)+0x453>
    2000:	48 ff ce             	dec    %rsi
    2003:	0f 85 2f ff ff ff    	jne    1f38 <void test<void ()>(void ( const&)(), char const*)+0xb8>
    2009:	48 8d 85 68 ff ff ff 	lea    -0x98(%rbp),%rax
    2010:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    2017:	48 29 d8             	sub    %rbx,%rax
    201a:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    2021:	48 83 f8 08          	cmp    $0x8,%rax
    2025:	7e 41                	jle    2068 <void test<void ()>(void ( const&)(), char const*)+0x1e8>
    2027:	49 89 c4             	mov    %rax,%r12
    202a:	49 c1 fc 03          	sar    $0x3,%r12
    202e:	49 8d 54 24 fe       	lea    -0x2(%r12),%rdx
    2033:	48 89 d0             	mov    %rdx,%rax
    2036:	48 c1 e8 3f          	shr    $0x3f,%rax
    203a:	48 01 d0             	add    %rdx,%rax
    203d:	48 d1 f8             	sar    %rax
    2040:	49 89 c5             	mov    %rax,%r13
    2043:	eb 06                	jmp    204b <void test<void ()>(void ( const&)(), char const*)+0x1cb>
    2045:	0f 1f 00             	nopl   (%rax)
    2048:	49 ff cd             	dec    %r13
    204b:	c4 a1 7b 10 04 eb    	vmovsd (%rbx,%r13,8),%xmm0
    2051:	4c 89 e2             	mov    %r12,%rdx
    2054:	4c 89 ee             	mov    %r13,%rsi
    2057:	48 89 df             	mov    %rbx,%rdi
    205a:	e8 e1 fc ff ff       	callq  1d40 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>
    205f:	4d 85 ed             	test   %r13,%r13
    2062:	75 e4                	jne    2048 <void test<void ()>(void ( const&)(), char const*)+0x1c8>
    2064:	c5 fb 10 0b          	vmovsd (%rbx),%xmm1
    2068:	4c 3b bd e8 fe ff ff 	cmp    -0x118(%rbp),%r15
    206f:	76 52                	jbe    20c3 <void test<void ()>(void ( const&)(), char const*)+0x243>
    2071:	4c 8b a5 e0 fe ff ff 	mov    -0x120(%rbp),%r12
    2078:	4c 8b ad e8 fe ff ff 	mov    -0x118(%rbp),%r13
    207f:	49 c1 fc 03          	sar    $0x3,%r12
    2083:	eb 0c                	jmp    2091 <void test<void ()>(void ( const&)(), char const*)+0x211>
    2085:	0f 1f 00             	nopl   (%rax)
    2088:	49 83 c5 08          	add    $0x8,%r13
    208c:	4d 39 ef             	cmp    %r13,%r15
    208f:	76 32                	jbe    20c3 <void test<void ()>(void ( const&)(), char const*)+0x243>
    2091:	c4 c1 79 2f 4d 00    	vcomisd 0x0(%r13),%xmm1
    2097:	76 ef                	jbe    2088 <void test<void ()>(void ( const&)(), char const*)+0x208>
    2099:	c5 fb 10 0b          	vmovsd (%rbx),%xmm1
    209d:	c4 c1 7b 10 45 00    	vmovsd 0x0(%r13),%xmm0
    20a3:	4c 89 e2             	mov    %r12,%rdx
    20a6:	c4 c1 7b 11 4d 00    	vmovsd %xmm1,0x0(%r13)
    20ac:	31 f6                	xor    %esi,%esi
    20ae:	48 89 df             	mov    %rbx,%rdi
    20b1:	49 83 c5 08          	add    $0x8,%r13
    20b5:	e8 86 fc ff ff       	callq  1d40 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>
    20ba:	c5 fb 10 0b          	vmovsd (%rbx),%xmm1
    20be:	4d 39 ef             	cmp    %r13,%r15
    20c1:	77 ce                	ja     2091 <void test<void ()>(void ( const&)(), char const*)+0x211>
    20c3:	c5 fb 10 85 60 ff ff 	vmovsd -0xa0(%rbp),%xmm0
    20ca:	ff 
    20cb:	c5 fb 11 03          	vmovsd %xmm0,(%rbx)
    20cf:	c5 fb 11 8d 60 ff ff 	vmovsd %xmm1,-0xa0(%rbp)
    20d6:	ff 
    20d7:	48 8b 05 62 2f 00 00 	mov    0x2f62(%rip),%rax        # 5040 <std::cout@@GLIBCXX_3.4>
    20de:	4c 8d 25 5b 2f 00 00 	lea    0x2f5b(%rip),%r12        # 5040 <std::cout@@GLIBCXX_3.4>
    20e5:	48 8b 50 e8          	mov    -0x18(%rax),%rdx
    20e9:	49 c7 44 14 10 19 00 	movq   $0x19,0x10(%r12,%rdx,1)
    20f0:	00 00 
    20f2:	4d 85 f6             	test   %r14,%r14
    20f5:	0f 84 d5 02 00 00    	je     23d0 <void test<void ()>(void ( const&)(), char const*)+0x550>
    20fb:	4c 89 f7             	mov    %r14,%rdi
    20fe:	e8 bd f0 ff ff       	callq  11c0 <strlen@plt>
    2103:	48 89 c2             	mov    %rax,%rdx
    2106:	4c 89 f6             	mov    %r14,%rsi
    2109:	4c 89 e7             	mov    %r12,%rdi
    210c:	e8 2f f1 ff ff       	callq  1240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    2111:	48 8d b5 ff fe ff ff 	lea    -0x101(%rbp),%rsi
    2118:	ba 01 00 00 00       	mov    $0x1,%edx
    211d:	48 8d 3d 1c 2f 00 00 	lea    0x2f1c(%rip),%rdi        # 5040 <std::cout@@GLIBCXX_3.4>
    2124:	c6 85 ff fe ff ff 3a 	movb   $0x3a,-0x101(%rbp)
    212b:	e8 10 f1 ff ff       	callq  1240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    2130:	49 89 c4             	mov    %rax,%r12
    2133:	48 8d 35 ca 0e 00 00 	lea    0xeca(%rip),%rsi        # 3004 <_IO_stdin_used+0x4>
    213a:	ba 08 00 00 00       	mov    $0x8,%edx
    213f:	48 89 c7             	mov    %rax,%rdi
    2142:	e8 f9 f0 ff ff       	callq  1240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    2147:	49 8b 0c 24          	mov    (%r12),%rcx
    214b:	c5 fb 10 85 60 ff ff 	vmovsd -0xa0(%rbp),%xmm0
    2152:	ff 
    2153:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    2157:	4c 89 e7             	mov    %r12,%rdi
    215a:	4c 01 e2             	add    %r12,%rdx
    215d:	8b 42 18             	mov    0x18(%rdx),%eax
    2160:	48 c7 42 08 03 00 00 	movq   $0x3,0x8(%rdx)
    2167:	00 
    2168:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    216d:	83 c8 04             	or     $0x4,%eax
    2170:	89 42 18             	mov    %eax,0x18(%rdx)
    2173:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    2177:	49 c7 44 04 10 07 00 	movq   $0x7,0x10(%r12,%rax,1)
    217e:	00 00 
    2180:	e8 0b f1 ff ff       	callq  1290 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    2185:	49 89 c4             	mov    %rax,%r12
    2188:	ba 02 00 00 00       	mov    $0x2,%edx
    218d:	48 8d 35 79 0e 00 00 	lea    0xe79(%rip),%rsi        # 300d <_IO_stdin_used+0xd>
    2194:	48 89 c7             	mov    %rax,%rdi
    2197:	e8 a4 f0 ff ff       	callq  1240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    219c:	ba 0b 00 00 00       	mov    $0xb,%edx
    21a1:	48 8d 35 68 0e 00 00 	lea    0xe68(%rip),%rsi        # 3010 <_IO_stdin_used+0x10>
    21a8:	4c 89 e7             	mov    %r12,%rdi
    21ab:	e8 90 f0 ff ff       	callq  1240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    21b0:	48 8d 05 a9 2f 00 00 	lea    0x2fa9(%rip),%rax        # 5160 <c>
    21b7:	48 8d 90 a0 58 00 00 	lea    0x58a0(%rax),%rdx
    21be:	c5 f1 ef c9          	vpxor  %xmm1,%xmm1,%xmm1
    21c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    21c8:	c5 f5 fe 08          	vpaddd (%rax),%ymm1,%ymm1
    21cc:	48 83 c0 20          	add    $0x20,%rax
    21d0:	48 39 c2             	cmp    %rax,%rdx
    21d3:	75 f3                	jne    21c8 <void test<void ()>(void ( const&)(), char const*)+0x348>
    21d5:	c4 e3 7d 39 c8 01    	vextracti128 $0x1,%ymm1,%xmm0
    21db:	c5 f9 fe c1          	vpaddd %xmm1,%xmm0,%xmm0
    21df:	c5 f1 73 d8 08       	vpsrldq $0x8,%xmm0,%xmm1
    21e4:	c5 f9 fe c1          	vpaddd %xmm1,%xmm0,%xmm0
    21e8:	c5 f1 73 d8 04       	vpsrldq $0x4,%xmm0,%xmm1
    21ed:	c5 f9 fe c1          	vpaddd %xmm1,%xmm0,%xmm0
    21f1:	c5 f9 7e c6          	vmovd  %xmm0,%esi
    21f5:	03 35 05 88 00 00    	add    0x8805(%rip),%esi        # aa00 <c+0x58a0>
    21fb:	03 35 03 88 00 00    	add    0x8803(%rip),%esi        # aa04 <c+0x58a4>
    2201:	03 35 01 88 00 00    	add    0x8801(%rip),%esi        # aa08 <c+0x58a8>
    2207:	03 35 ff 87 00 00    	add    0x87ff(%rip),%esi        # aa0c <c+0x58ac>
    220d:	03 35 fd 87 00 00    	add    0x87fd(%rip),%esi        # aa10 <c+0x58b0>
    2213:	03 35 fb 87 00 00    	add    0x87fb(%rip),%esi        # aa14 <c+0x58b4>
    2219:	4c 89 e7             	mov    %r12,%rdi
    221c:	c5 f8 77             	vzeroupper 
    221f:	e8 ac f0 ff ff       	callq  12d0 <std::ostream::operator<<(int)@plt>
    2224:	49 89 c4             	mov    %rax,%r12
    2227:	48 8b 00             	mov    (%rax),%rax
    222a:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    222e:	4d 8b ac 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%r13
    2235:	00 
    2236:	4d 85 ed             	test   %r13,%r13
    2239:	0f 84 b9 01 00 00    	je     23f8 <void test<void ()>(void ( const&)(), char const*)+0x578>
    223f:	41 80 7d 38 00       	cmpb   $0x0,0x38(%r13)
    2244:	0f 84 4e 01 00 00    	je     2398 <void test<void ()>(void ( const&)(), char const*)+0x518>
    224a:	41 0f be 75 43       	movsbl 0x43(%r13),%esi
    224f:	4c 89 e7             	mov    %r12,%rdi
    2252:	e8 49 ef ff ff       	callq  11a0 <std::ostream::put(char)@plt>
    2257:	48 89 c7             	mov    %rax,%rdi
    225a:	e8 91 ef ff ff       	callq  11f0 <std::ostream::flush()@plt>
    225f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    2263:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    226a:	00 00 
    226c:	0f 85 81 01 00 00    	jne    23f3 <void test<void ()>(void ( const&)(), char const*)+0x573>
    2272:	48 81 c4 00 01 00 00 	add    $0x100,%rsp
    2279:	5b                   	pop    %rbx
    227a:	41 5a                	pop    %r10
    227c:	41 5c                	pop    %r12
    227e:	41 5d                	pop    %r13
    2280:	41 5e                	pop    %r14
    2282:	41 5f                	pop    %r15
    2284:	5d                   	pop    %rbp
    2285:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    2289:	c3                   	retq   
    228a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2290:	c5 f9 2f da          	vcomisd %xmm2,%xmm3
    2294:	0f 87 e6 00 00 00    	ja     2380 <void test<void ()>(void ( const&)(), char const*)+0x500>
    229a:	c5 f9 2f d8          	vcomisd %xmm0,%xmm3
    229e:	0f 87 cd fc ff ff    	ja     1f71 <void test<void ()>(void ( const&)(), char const*)+0xf1>
    22a4:	c5 fb 11 03          	vmovsd %xmm0,(%rbx)
    22a8:	c5 fb 11 08          	vmovsd %xmm1,(%rax)
    22ac:	c4 c1 7b 10 57 f8    	vmovsd -0x8(%r15),%xmm2
    22b2:	e9 c8 fc ff ff       	jmpq   1f7f <void test<void ()>(void ( const&)(), char const*)+0xff>
    22b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    22be:	00 00 
    22c0:	48 89 d3             	mov    %rdx,%rbx
    22c3:	4c 89 f8             	mov    %r15,%rax
    22c6:	48 29 d8             	sub    %rbx,%rax
    22c9:	48 83 f8 18          	cmp    $0x18,%rax
    22cd:	0f 8f 2d fd ff ff    	jg     2000 <void test<void ()>(void ( const&)(), char const*)+0x180>
    22d3:	4c 39 fb             	cmp    %r15,%rbx
    22d6:	0f 84 fb fd ff ff    	je     20d7 <void test<void ()>(void ( const&)(), char const*)+0x257>
    22dc:	4c 8d 6b 08          	lea    0x8(%rbx),%r13
    22e0:	4d 39 ef             	cmp    %r13,%r15
    22e3:	0f 84 ee fd ff ff    	je     20d7 <void test<void ()>(void ( const&)(), char const*)+0x257>
    22e9:	41 bc 08 00 00 00    	mov    $0x8,%r12d
    22ef:	eb 43                	jmp    2334 <void test<void ()>(void ( const&)(), char const*)+0x4b4>
    22f1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    22f8:	49 39 dd             	cmp    %rbx,%r13
    22fb:	74 22                	je     231f <void test<void ()>(void ( const&)(), char const*)+0x49f>
    22fd:	4c 89 ea             	mov    %r13,%rdx
    2300:	48 29 da             	sub    %rbx,%rdx
    2303:	4a 8d 3c 23          	lea    (%rbx,%r12,1),%rdi
    2307:	48 89 de             	mov    %rbx,%rsi
    230a:	c5 fb 11 85 e8 fe ff 	vmovsd %xmm0,-0x118(%rbp)
    2311:	ff 
    2312:	e8 89 ef ff ff       	callq  12a0 <memmove@plt>
    2317:	c5 fb 10 85 e8 fe ff 	vmovsd -0x118(%rbp),%xmm0
    231e:	ff 
    231f:	c5 fb 11 03          	vmovsd %xmm0,(%rbx)
    2323:	49 83 c5 08          	add    $0x8,%r13
    2327:	4d 39 ef             	cmp    %r13,%r15
    232a:	0f 84 a7 fd ff ff    	je     20d7 <void test<void ()>(void ( const&)(), char const*)+0x257>
    2330:	c5 fb 10 0b          	vmovsd (%rbx),%xmm1
    2334:	c4 c1 7b 10 45 00    	vmovsd 0x0(%r13),%xmm0
    233a:	c5 f9 2f c8          	vcomisd %xmm0,%xmm1
    233e:	77 b8                	ja     22f8 <void test<void ()>(void ( const&)(), char const*)+0x478>
    2340:	c4 c1 7b 10 4d f8    	vmovsd -0x8(%r13),%xmm1
    2346:	49 8d 45 f8          	lea    -0x8(%r13),%rax
    234a:	c5 f9 2f c8          	vcomisd %xmm0,%xmm1
    234e:	0f 86 93 00 00 00    	jbe    23e7 <void test<void ()>(void ( const&)(), char const*)+0x567>
    2354:	0f 1f 40 00          	nopl   0x0(%rax)
    2358:	c5 fb 10 08          	vmovsd (%rax),%xmm1
    235c:	48 89 c2             	mov    %rax,%rdx
    235f:	c5 fb 11 48 08       	vmovsd %xmm1,0x8(%rax)
    2364:	c5 fb 10 48 f8       	vmovsd -0x8(%rax),%xmm1
    2369:	48 83 e8 08          	sub    $0x8,%rax
    236d:	c5 f9 2f c8          	vcomisd %xmm0,%xmm1
    2371:	77 e5                	ja     2358 <void test<void ()>(void ( const&)(), char const*)+0x4d8>
    2373:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    2377:	eb aa                	jmp    2323 <void test<void ()>(void ( const&)(), char const*)+0x4a3>
    2379:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2380:	c5 fb 11 13          	vmovsd %xmm2,(%rbx)
    2384:	c5 fb 11 4b 08       	vmovsd %xmm1,0x8(%rbx)
    2389:	c4 c1 7b 10 57 f8    	vmovsd -0x8(%r15),%xmm2
    238f:	e9 eb fb ff ff       	jmpq   1f7f <void test<void ()>(void ( const&)(), char const*)+0xff>
    2394:	0f 1f 40 00          	nopl   0x0(%rax)
    2398:	4c 89 ef             	mov    %r13,%rdi
    239b:	e8 b0 ee ff ff       	callq  1250 <std::ctype<char>::_M_widen_init() const@plt>
    23a0:	49 8b 45 00          	mov    0x0(%r13),%rax
    23a4:	48 8d 15 95 f7 ff ff 	lea    -0x86b(%rip),%rdx        # 1b40 <std::ctype<char>::do_widen(char) const>
    23ab:	48 8b 40 30          	mov    0x30(%rax),%rax
    23af:	be 0a 00 00 00       	mov    $0xa,%esi
    23b4:	48 39 d0             	cmp    %rdx,%rax
    23b7:	0f 84 92 fe ff ff    	je     224f <void test<void ()>(void ( const&)(), char const*)+0x3cf>
    23bd:	4c 89 ef             	mov    %r13,%rdi
    23c0:	ff d0                	callq  *%rax
    23c2:	0f be f0             	movsbl %al,%esi
    23c5:	e9 85 fe ff ff       	jmpq   224f <void test<void ()>(void ( const&)(), char const*)+0x3cf>
    23ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    23d0:	48 8b 78 e8          	mov    -0x18(%rax),%rdi
    23d4:	4c 01 e7             	add    %r12,%rdi
    23d7:	8b 77 20             	mov    0x20(%rdi),%esi
    23da:	83 ce 01             	or     $0x1,%esi
    23dd:	e8 de ee ff ff       	callq  12c0 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    23e2:	e9 2a fd ff ff       	jmpq   2111 <void test<void ()>(void ( const&)(), char const*)+0x291>
    23e7:	4c 89 ea             	mov    %r13,%rdx
    23ea:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    23ee:	e9 30 ff ff ff       	jmpq   2323 <void test<void ()>(void ( const&)(), char const*)+0x4a3>
    23f3:	e8 38 ee ff ff       	callq  1230 <__stack_chk_fail@plt>
    23f8:	e8 63 ee ff ff       	callq  1260 <std::__throw_bad_cast()@plt>
    23fd:	0f 1f 00             	nopl   (%rax)

0000000000002400 <__libc_csu_init>:
    2400:	f3 0f 1e fa          	endbr64 
    2404:	41 57                	push   %r15
    2406:	4c 8d 3d d3 28 00 00 	lea    0x28d3(%rip),%r15        # 4ce0 <__frame_dummy_init_array_entry>
    240d:	41 56                	push   %r14
    240f:	49 89 d6             	mov    %rdx,%r14
    2412:	41 55                	push   %r13
    2414:	49 89 f5             	mov    %rsi,%r13
    2417:	41 54                	push   %r12
    2419:	41 89 fc             	mov    %edi,%r12d
    241c:	55                   	push   %rbp
    241d:	48 8d 2d cc 28 00 00 	lea    0x28cc(%rip),%rbp        # 4cf0 <__do_global_dtors_aux_fini_array_entry>
    2424:	53                   	push   %rbx
    2425:	4c 29 fd             	sub    %r15,%rbp
    2428:	48 83 ec 08          	sub    $0x8,%rsp
    242c:	e8 cf eb ff ff       	callq  1000 <_init>
    2431:	48 c1 fd 03          	sar    $0x3,%rbp
    2435:	74 1f                	je     2456 <__libc_csu_init+0x56>
    2437:	31 db                	xor    %ebx,%ebx
    2439:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2440:	4c 89 f2             	mov    %r14,%rdx
    2443:	4c 89 ee             	mov    %r13,%rsi
    2446:	44 89 e7             	mov    %r12d,%edi
    2449:	41 ff 14 df          	callq  *(%r15,%rbx,8)
    244d:	48 83 c3 01          	add    $0x1,%rbx
    2451:	48 39 dd             	cmp    %rbx,%rbp
    2454:	75 ea                	jne    2440 <__libc_csu_init+0x40>
    2456:	48 83 c4 08          	add    $0x8,%rsp
    245a:	5b                   	pop    %rbx
    245b:	5d                   	pop    %rbp
    245c:	41 5c                	pop    %r12
    245e:	41 5d                	pop    %r13
    2460:	41 5e                	pop    %r14
    2462:	41 5f                	pop    %r15
    2464:	c3                   	retq   
    2465:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    246c:	00 00 00 00 

0000000000002470 <__libc_csu_fini>:
    2470:	f3 0f 1e fa          	endbr64 
    2474:	c3                   	retq   

Desensamblado de la secci贸n .fini:

0000000000002478 <_fini>:
    2478:	f3 0f 1e fa          	endbr64 
    247c:	48 83 ec 08          	sub    $0x8,%rsp
    2480:	48 83 c4 08          	add    $0x8,%rsp
    2484:	c3                   	retq   
