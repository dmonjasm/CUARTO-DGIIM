
axb-etal:     formato del fichero elf64-x86-64


Desensamblado de la secci贸n .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 d9 3f 00 00 	mov    0x3fd9(%rip),%rax        # 4fe8 <__gmon_start__>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	callq  *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	retq   

Desensamblado de la secci贸n .plt:

0000000000001020 <.plt>:
    1020:	ff 35 ea 3e 00 00    	pushq  0x3eea(%rip)        # 4f10 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	f2 ff 25 eb 3e 00 00 	bnd jmpq *0x3eeb(%rip)        # 4f18 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	0f 1f 00             	nopl   (%rax)
    1030:	f3 0f 1e fa          	endbr64 
    1034:	68 00 00 00 00       	pushq  $0x0
    1039:	f2 e9 e1 ff ff ff    	bnd jmpq 1020 <.plt>
    103f:	90                   	nop
    1040:	f3 0f 1e fa          	endbr64 
    1044:	68 01 00 00 00       	pushq  $0x1
    1049:	f2 e9 d1 ff ff ff    	bnd jmpq 1020 <.plt>
    104f:	90                   	nop
    1050:	f3 0f 1e fa          	endbr64 
    1054:	68 02 00 00 00       	pushq  $0x2
    1059:	f2 e9 c1 ff ff ff    	bnd jmpq 1020 <.plt>
    105f:	90                   	nop
    1060:	f3 0f 1e fa          	endbr64 
    1064:	68 03 00 00 00       	pushq  $0x3
    1069:	f2 e9 b1 ff ff ff    	bnd jmpq 1020 <.plt>
    106f:	90                   	nop
    1070:	f3 0f 1e fa          	endbr64 
    1074:	68 04 00 00 00       	pushq  $0x4
    1079:	f2 e9 a1 ff ff ff    	bnd jmpq 1020 <.plt>
    107f:	90                   	nop
    1080:	f3 0f 1e fa          	endbr64 
    1084:	68 05 00 00 00       	pushq  $0x5
    1089:	f2 e9 91 ff ff ff    	bnd jmpq 1020 <.plt>
    108f:	90                   	nop
    1090:	f3 0f 1e fa          	endbr64 
    1094:	68 06 00 00 00       	pushq  $0x6
    1099:	f2 e9 81 ff ff ff    	bnd jmpq 1020 <.plt>
    109f:	90                   	nop
    10a0:	f3 0f 1e fa          	endbr64 
    10a4:	68 07 00 00 00       	pushq  $0x7
    10a9:	f2 e9 71 ff ff ff    	bnd jmpq 1020 <.plt>
    10af:	90                   	nop
    10b0:	f3 0f 1e fa          	endbr64 
    10b4:	68 08 00 00 00       	pushq  $0x8
    10b9:	f2 e9 61 ff ff ff    	bnd jmpq 1020 <.plt>
    10bf:	90                   	nop
    10c0:	f3 0f 1e fa          	endbr64 
    10c4:	68 09 00 00 00       	pushq  $0x9
    10c9:	f2 e9 51 ff ff ff    	bnd jmpq 1020 <.plt>
    10cf:	90                   	nop
    10d0:	f3 0f 1e fa          	endbr64 
    10d4:	68 0a 00 00 00       	pushq  $0xa
    10d9:	f2 e9 41 ff ff ff    	bnd jmpq 1020 <.plt>
    10df:	90                   	nop
    10e0:	f3 0f 1e fa          	endbr64 
    10e4:	68 0b 00 00 00       	pushq  $0xb
    10e9:	f2 e9 31 ff ff ff    	bnd jmpq 1020 <.plt>
    10ef:	90                   	nop
    10f0:	f3 0f 1e fa          	endbr64 
    10f4:	68 0c 00 00 00       	pushq  $0xc
    10f9:	f2 e9 21 ff ff ff    	bnd jmpq 1020 <.plt>
    10ff:	90                   	nop
    1100:	f3 0f 1e fa          	endbr64 
    1104:	68 0d 00 00 00       	pushq  $0xd
    1109:	f2 e9 11 ff ff ff    	bnd jmpq 1020 <.plt>
    110f:	90                   	nop
    1110:	f3 0f 1e fa          	endbr64 
    1114:	68 0e 00 00 00       	pushq  $0xe
    1119:	f2 e9 01 ff ff ff    	bnd jmpq 1020 <.plt>
    111f:	90                   	nop
    1120:	f3 0f 1e fa          	endbr64 
    1124:	68 0f 00 00 00       	pushq  $0xf
    1129:	f2 e9 f1 fe ff ff    	bnd jmpq 1020 <.plt>
    112f:	90                   	nop
    1130:	f3 0f 1e fa          	endbr64 
    1134:	68 10 00 00 00       	pushq  $0x10
    1139:	f2 e9 e1 fe ff ff    	bnd jmpq 1020 <.plt>
    113f:	90                   	nop
    1140:	f3 0f 1e fa          	endbr64 
    1144:	68 11 00 00 00       	pushq  $0x11
    1149:	f2 e9 d1 fe ff ff    	bnd jmpq 1020 <.plt>
    114f:	90                   	nop
    1150:	f3 0f 1e fa          	endbr64 
    1154:	68 12 00 00 00       	pushq  $0x12
    1159:	f2 e9 c1 fe ff ff    	bnd jmpq 1020 <.plt>
    115f:	90                   	nop
    1160:	f3 0f 1e fa          	endbr64 
    1164:	68 13 00 00 00       	pushq  $0x13
    1169:	f2 e9 b1 fe ff ff    	bnd jmpq 1020 <.plt>
    116f:	90                   	nop
    1170:	f3 0f 1e fa          	endbr64 
    1174:	68 14 00 00 00       	pushq  $0x14
    1179:	f2 e9 a1 fe ff ff    	bnd jmpq 1020 <.plt>
    117f:	90                   	nop
    1180:	f3 0f 1e fa          	endbr64 
    1184:	68 15 00 00 00       	pushq  $0x15
    1189:	f2 e9 91 fe ff ff    	bnd jmpq 1020 <.plt>
    118f:	90                   	nop

Desensamblado de la secci贸n .plt.got:

0000000000001190 <__cxa_finalize@plt>:
    1190:	f3 0f 1e fa          	endbr64 
    1194:	f2 ff 25 35 3e 00 00 	bnd jmpq *0x3e35(%rip)        # 4fd0 <__cxa_finalize@GLIBC_2.2.5>
    119b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la secci贸n .plt.sec:

00000000000011a0 <std::ostream::put(char)@plt>:
    11a0:	f3 0f 1e fa          	endbr64 
    11a4:	f2 ff 25 75 3d 00 00 	bnd jmpq *0x3d75(%rip)        # 4f20 <std::ostream::put(char)@GLIBCXX_3.4>
    11ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011b0 <std::chrono::_V2::system_clock::now()@plt>:
    11b0:	f3 0f 1e fa          	endbr64 
    11b4:	f2 ff 25 6d 3d 00 00 	bnd jmpq *0x3d6d(%rip)        # 4f28 <std::chrono::_V2::system_clock::now()@GLIBCXX_3.4.19>
    11bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011c0 <strlen@plt>:
    11c0:	f3 0f 1e fa          	endbr64 
    11c4:	f2 ff 25 65 3d 00 00 	bnd jmpq *0x3d65(%rip)        # 4f30 <strlen@GLIBC_2.2.5>
    11cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011d0 <__cxa_guard_abort@plt>:
    11d0:	f3 0f 1e fa          	endbr64 
    11d4:	f2 ff 25 5d 3d 00 00 	bnd jmpq *0x3d5d(%rip)        # 4f38 <__cxa_guard_abort@CXXABI_1.3>
    11db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011e0 <__cxa_guard_release@plt>:
    11e0:	f3 0f 1e fa          	endbr64 
    11e4:	f2 ff 25 55 3d 00 00 	bnd jmpq *0x3d55(%rip)        # 4f40 <__cxa_guard_release@CXXABI_1.3>
    11eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011f0 <std::ostream::flush()@plt>:
    11f0:	f3 0f 1e fa          	endbr64 
    11f4:	f2 ff 25 4d 3d 00 00 	bnd jmpq *0x3d4d(%rip)        # 4f48 <std::ostream::flush()@GLIBCXX_3.4>
    11fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001200 <__cxa_atexit@plt>:
    1200:	f3 0f 1e fa          	endbr64 
    1204:	f2 ff 25 45 3d 00 00 	bnd jmpq *0x3d45(%rip)        # 4f50 <__cxa_atexit@GLIBC_2.2.5>
    120b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001210 <std::random_device::_M_fini()@plt>:
    1210:	f3 0f 1e fa          	endbr64 
    1214:	f2 ff 25 3d 3d 00 00 	bnd jmpq *0x3d3d(%rip)        # 4f58 <std::random_device::_M_fini()@GLIBCXX_3.4.18>
    121b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001220 <operator delete(void*)@plt>:
    1220:	f3 0f 1e fa          	endbr64 
    1224:	f2 ff 25 35 3d 00 00 	bnd jmpq *0x3d35(%rip)        # 4f60 <operator delete(void*)@GLIBCXX_3.4>
    122b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001230 <__stack_chk_fail@plt>:
    1230:	f3 0f 1e fa          	endbr64 
    1234:	f2 ff 25 2d 3d 00 00 	bnd jmpq *0x3d2d(%rip)        # 4f68 <__stack_chk_fail@GLIBC_2.4>
    123b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>:
    1240:	f3 0f 1e fa          	endbr64 
    1244:	f2 ff 25 25 3d 00 00 	bnd jmpq *0x3d25(%rip)        # 4f70 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@GLIBCXX_3.4.9>
    124b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001250 <std::ctype<char>::_M_widen_init() const@plt>:
    1250:	f3 0f 1e fa          	endbr64 
    1254:	f2 ff 25 1d 3d 00 00 	bnd jmpq *0x3d1d(%rip)        # 4f78 <std::ctype<char>::_M_widen_init() const@GLIBCXX_3.4.11>
    125b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001260 <std::__throw_bad_cast()@plt>:
    1260:	f3 0f 1e fa          	endbr64 
    1264:	f2 ff 25 15 3d 00 00 	bnd jmpq *0x3d15(%rip)        # 4f80 <std::__throw_bad_cast()@GLIBCXX_3.4>
    126b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001270 <std::random_device::_M_getval()@plt>:
    1270:	f3 0f 1e fa          	endbr64 
    1274:	f2 ff 25 0d 3d 00 00 	bnd jmpq *0x3d0d(%rip)        # 4f88 <std::random_device::_M_getval()@GLIBCXX_3.4.18>
    127b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001280 <std::ios_base::Init::Init()@plt>:
    1280:	f3 0f 1e fa          	endbr64 
    1284:	f2 ff 25 05 3d 00 00 	bnd jmpq *0x3d05(%rip)        # 4f90 <std::ios_base::Init::Init()@GLIBCXX_3.4>
    128b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001290 <std::ostream& std::ostream::_M_insert<double>(double)@plt>:
    1290:	f3 0f 1e fa          	endbr64 
    1294:	f2 ff 25 fd 3c 00 00 	bnd jmpq *0x3cfd(%rip)        # 4f98 <std::ostream& std::ostream::_M_insert<double>(double)@GLIBCXX_3.4.9>
    129b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012a0 <memmove@plt>:
    12a0:	f3 0f 1e fa          	endbr64 
    12a4:	f2 ff 25 f5 3c 00 00 	bnd jmpq *0x3cf5(%rip)        # 4fa0 <memmove@GLIBC_2.2.5>
    12ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012b0 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
    12b0:	f3 0f 1e fa          	endbr64 
    12b4:	f2 ff 25 ed 3c 00 00 	bnd jmpq *0x3ced(%rip)        # 4fa8 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
    12bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012c0 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>:
    12c0:	f3 0f 1e fa          	endbr64 
    12c4:	f2 ff 25 e5 3c 00 00 	bnd jmpq *0x3ce5(%rip)        # 4fb0 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@GLIBCXX_3.4>
    12cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012d0 <std::ostream::operator<<(int)@plt>:
    12d0:	f3 0f 1e fa          	endbr64 
    12d4:	f2 ff 25 dd 3c 00 00 	bnd jmpq *0x3cdd(%rip)        # 4fb8 <std::ostream::operator<<(int)@GLIBCXX_3.4>
    12db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012e0 <_Unwind_Resume@plt>:
    12e0:	f3 0f 1e fa          	endbr64 
    12e4:	f2 ff 25 d5 3c 00 00 	bnd jmpq *0x3cd5(%rip)        # 4fc0 <_Unwind_Resume@GCC_3.0>
    12eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012f0 <__cxa_guard_acquire@plt>:
    12f0:	f3 0f 1e fa          	endbr64 
    12f4:	f2 ff 25 cd 3c 00 00 	bnd jmpq *0x3ccd(%rip)        # 4fc8 <__cxa_guard_acquire@CXXABI_1.3>
    12fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la secci贸n .text:

0000000000001300 <reset() [clone .cold]>:
    1300:	48 8d 3d 09 e5 57 03 	lea    0x357e509(%rip),%rdi        # 357f810 <guard variable for reset()::generator>
    1307:	c5 f8 77             	vzeroupper 
    130a:	e8 c1 fe ff ff       	callq  11d0 <__cxa_guard_abort@plt>
    130f:	48 89 ef             	mov    %rbp,%rdi
    1312:	e8 c9 ff ff ff       	callq  12e0 <_Unwind_Resume@plt>
    1317:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
    131c:	48 39 df             	cmp    %rbx,%rdi
    131f:	74 1c                	je     133d <reset() [clone .cold]+0x3d>
    1321:	c5 f8 77             	vzeroupper 
    1324:	e8 f7 fe ff ff       	callq  1220 <operator delete(void*)@plt>
    1329:	48 8d 3d f0 e4 57 03 	lea    0x357e4f0(%rip),%rdi        # 357f820 <guard variable for reset()::device>
    1330:	e8 9b fe ff ff       	callq  11d0 <__cxa_guard_abort@plt>
    1335:	48 89 ef             	mov    %rbp,%rdi
    1338:	e8 a3 ff ff ff       	callq  12e0 <_Unwind_Resume@plt>
    133d:	c5 f8 77             	vzeroupper 
    1340:	eb e7                	jmp    1329 <reset() [clone .cold]+0x29>
    1342:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1349:	00 00 00 
    134c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001350 <main>:
    1350:	f3 0f 1e fa          	endbr64 
    1354:	48 83 ec 08          	sub    $0x8,%rsp
    1358:	48 8d 35 bd 1c 00 00 	lea    0x1cbd(%rip),%rsi        # 301c <_IO_stdin_used+0x1c>
    135f:	48 8d 3d aa 01 00 00 	lea    0x1aa(%rip),%rdi        # 1510 <f0()>
    1366:	e8 95 12 00 00       	callq  2600 <void test<void ()>(void ( const&)(), char const*)>
    136b:	48 8d 35 b3 1c 00 00 	lea    0x1cb3(%rip),%rsi        # 3025 <_IO_stdin_used+0x25>
    1372:	48 8d 3d 17 04 00 00 	lea    0x417(%rip),%rdi        # 1790 <f1()>
    1379:	e8 82 12 00 00       	callq  2600 <void test<void ()>(void ( const&)(), char const*)>
    137e:	48 8d 35 aa 1c 00 00 	lea    0x1caa(%rip),%rsi        # 302f <_IO_stdin_used+0x2f>
    1385:	48 8d 3d 24 05 00 00 	lea    0x524(%rip),%rdi        # 18b0 <f2()>
    138c:	e8 6f 12 00 00       	callq  2600 <void test<void ()>(void ( const&)(), char const*)>
    1391:	48 8d 35 a2 1c 00 00 	lea    0x1ca2(%rip),%rsi        # 303a <_IO_stdin_used+0x3a>
    1398:	48 8d 3d 41 06 00 00 	lea    0x641(%rip),%rdi        # 19e0 <f3()>
    139f:	e8 5c 12 00 00       	callq  2600 <void test<void ()>(void ( const&)(), char const*)>
    13a4:	48 8d 35 93 1c 00 00 	lea    0x1c93(%rip),%rsi        # 303e <_IO_stdin_used+0x3e>
    13ab:	48 8d 3d 3e 07 00 00 	lea    0x73e(%rip),%rdi        # 1af0 <f4()>
    13b2:	e8 49 12 00 00       	callq  2600 <void test<void ()>(void ( const&)(), char const*)>
    13b7:	48 8d 35 8c 1c 00 00 	lea    0x1c8c(%rip),%rsi        # 304a <_IO_stdin_used+0x4a>
    13be:	48 8d 3d eb 08 00 00 	lea    0x8eb(%rip),%rdi        # 1cb0 <f5()>
    13c5:	e8 36 12 00 00       	callq  2600 <void test<void ()>(void ( const&)(), char const*)>
    13ca:	31 c0                	xor    %eax,%eax
    13cc:	48 83 c4 08          	add    $0x8,%rsp
    13d0:	c3                   	retq   
    13d1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    13d8:	00 00 00 00 
    13dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000013e0 <_GLOBAL__sub_I_a>:
    13e0:	f3 0f 1e fa          	endbr64 
    13e4:	48 83 ec 08          	sub    $0x8,%rsp
    13e8:	48 8d 3d d9 f7 57 03 	lea    0x357f7d9(%rip),%rdi        # 3580bc8 <std::__ioinit>
    13ef:	e8 8c fe ff ff       	callq  1280 <std::ios_base::Init::Init()@plt>
    13f4:	48 8b 3d fd 3b 00 00 	mov    0x3bfd(%rip),%rdi        # 4ff8 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
    13fb:	48 8d 15 06 3c 00 00 	lea    0x3c06(%rip),%rdx        # 5008 <__dso_handle>
    1402:	48 8d 35 bf f7 57 03 	lea    0x357f7bf(%rip),%rsi        # 3580bc8 <std::__ioinit>
    1409:	48 83 c4 08          	add    $0x8,%rsp
    140d:	e9 ee fd ff ff       	jmpq   1200 <__cxa_atexit@plt>
    1412:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1419:	00 00 00 
    141c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001420 <_start>:
    1420:	f3 0f 1e fa          	endbr64 
    1424:	31 ed                	xor    %ebp,%ebp
    1426:	49 89 d1             	mov    %rdx,%r9
    1429:	5e                   	pop    %rsi
    142a:	48 89 e2             	mov    %rsp,%rdx
    142d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    1431:	50                   	push   %rax
    1432:	54                   	push   %rsp
    1433:	4c 8d 05 b6 17 00 00 	lea    0x17b6(%rip),%r8        # 2bf0 <__libc_csu_fini>
    143a:	48 8d 0d 3f 17 00 00 	lea    0x173f(%rip),%rcx        # 2b80 <__libc_csu_init>
    1441:	48 8d 3d 08 ff ff ff 	lea    -0xf8(%rip),%rdi        # 1350 <main>
    1448:	ff 15 92 3b 00 00    	callq  *0x3b92(%rip)        # 4fe0 <__libc_start_main@GLIBC_2.2.5>
    144e:	f4                   	hlt    
    144f:	90                   	nop

0000000000001450 <deregister_tm_clones>:
    1450:	48 8d 3d c1 3b 00 00 	lea    0x3bc1(%rip),%rdi        # 5018 <__TMC_END__>
    1457:	48 8d 05 ba 3b 00 00 	lea    0x3bba(%rip),%rax        # 5018 <__TMC_END__>
    145e:	48 39 f8             	cmp    %rdi,%rax
    1461:	74 15                	je     1478 <deregister_tm_clones+0x28>
    1463:	48 8b 05 6e 3b 00 00 	mov    0x3b6e(%rip),%rax        # 4fd8 <_ITM_deregisterTMCloneTable>
    146a:	48 85 c0             	test   %rax,%rax
    146d:	74 09                	je     1478 <deregister_tm_clones+0x28>
    146f:	ff e0                	jmpq   *%rax
    1471:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1478:	c3                   	retq   
    1479:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001480 <register_tm_clones>:
    1480:	48 8d 3d 91 3b 00 00 	lea    0x3b91(%rip),%rdi        # 5018 <__TMC_END__>
    1487:	48 8d 35 8a 3b 00 00 	lea    0x3b8a(%rip),%rsi        # 5018 <__TMC_END__>
    148e:	48 29 fe             	sub    %rdi,%rsi
    1491:	48 89 f0             	mov    %rsi,%rax
    1494:	48 c1 ee 3f          	shr    $0x3f,%rsi
    1498:	48 c1 f8 03          	sar    $0x3,%rax
    149c:	48 01 c6             	add    %rax,%rsi
    149f:	48 d1 fe             	sar    %rsi
    14a2:	74 14                	je     14b8 <register_tm_clones+0x38>
    14a4:	48 8b 05 45 3b 00 00 	mov    0x3b45(%rip),%rax        # 4ff0 <_ITM_registerTMCloneTable>
    14ab:	48 85 c0             	test   %rax,%rax
    14ae:	74 08                	je     14b8 <register_tm_clones+0x38>
    14b0:	ff e0                	jmpq   *%rax
    14b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    14b8:	c3                   	retq   
    14b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000014c0 <__do_global_dtors_aux>:
    14c0:	f3 0f 1e fa          	endbr64 
    14c4:	80 3d 85 3c 00 00 00 	cmpb   $0x0,0x3c85(%rip)        # 5150 <completed.8061>
    14cb:	75 2b                	jne    14f8 <__do_global_dtors_aux+0x38>
    14cd:	55                   	push   %rbp
    14ce:	48 83 3d fa 3a 00 00 	cmpq   $0x0,0x3afa(%rip)        # 4fd0 <__cxa_finalize@GLIBC_2.2.5>
    14d5:	00 
    14d6:	48 89 e5             	mov    %rsp,%rbp
    14d9:	74 0c                	je     14e7 <__do_global_dtors_aux+0x27>
    14db:	48 8b 3d 26 3b 00 00 	mov    0x3b26(%rip),%rdi        # 5008 <__dso_handle>
    14e2:	e8 a9 fc ff ff       	callq  1190 <__cxa_finalize@plt>
    14e7:	e8 64 ff ff ff       	callq  1450 <deregister_tm_clones>
    14ec:	c6 05 5d 3c 00 00 01 	movb   $0x1,0x3c5d(%rip)        # 5150 <completed.8061>
    14f3:	5d                   	pop    %rbp
    14f4:	c3                   	retq   
    14f5:	0f 1f 00             	nopl   (%rax)
    14f8:	c3                   	retq   
    14f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001500 <frame_dummy>:
    1500:	f3 0f 1e fa          	endbr64 
    1504:	e9 77 ff ff ff       	jmpq   1480 <register_tm_clones>
    1509:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001510 <f0()>:
    1510:	f3 0f 1e fa          	endbr64 
    1514:	55                   	push   %rbp
    1515:	4c 8d 05 04 3c ac 01 	lea    0x1ac3c04(%rip),%r8        # 1ac5120 <a>
    151c:	41 bb 01 00 00 00    	mov    $0x1,%r11d
    1522:	48 89 e5             	mov    %rsp,%rbp
    1525:	41 57                	push   %r15
    1527:	4c 8d 0d 32 3c 00 00 	lea    0x3c32(%rip),%r9        # 5160 <c>
    152e:	41 56                	push   %r14
    1530:	41 55                	push   %r13
    1532:	41 54                	push   %r12
    1534:	4d 89 c4             	mov    %r8,%r12
    1537:	53                   	push   %rbx
    1538:	48 8d 1d e1 94 00 00 	lea    0x94e1(%rip),%rbx        # aa20 <b>
    153f:	48 89 df             	mov    %rbx,%rdi
    1542:	49 89 fa             	mov    %rdi,%r10
    1545:	4c 89 e6             	mov    %r12,%rsi
    1548:	48 8d 0d 11 3c 00 00 	lea    0x3c11(%rip),%rcx        # 5160 <c>
    154f:	31 d2                	xor    %edx,%edx
    1551:	eb 2f                	jmp    1582 <f0()+0x72>
    1553:	44 8b 6e 04          	mov    0x4(%rsi),%r13d
    1557:	44 29 f8             	sub    %r15d,%eax
    155a:	45 2b 6a 04          	sub    0x4(%r10),%r13d
    155e:	44 01 f0             	add    %r14d,%eax
    1561:	44 01 e8             	add    %r13d,%eax
    1564:	ff c2                	inc    %edx
    1566:	89 01                	mov    %eax,(%rcx)
    1568:	48 81 c6 48 13 00 00 	add    $0x1348,%rsi
    156f:	48 83 c1 04          	add    $0x4,%rcx
    1573:	49 81 c2 48 13 00 00 	add    $0x1348,%r10
    157a:	81 fa 2e 16 00 00    	cmp    $0x162e,%edx
    1580:	74 1a                	je     159c <f0()+0x8c>
    1582:	44 8b 31             	mov    (%rcx),%r14d
    1585:	8b 06                	mov    (%rsi),%eax
    1587:	45 8b 3a             	mov    (%r10),%r15d
    158a:	f6 c2 01             	test   $0x1,%dl
    158d:	75 c4                	jne    1553 <f0()+0x43>
    158f:	45 8b 6a 04          	mov    0x4(%r10),%r13d
    1593:	44 01 f8             	add    %r15d,%eax
    1596:	44 03 6e 04          	add    0x4(%rsi),%r13d
    159a:	eb c2                	jmp    155e <f0()+0x4e>
    159c:	45 8d 53 01          	lea    0x1(%r11),%r10d
    15a0:	41 83 c3 02          	add    $0x2,%r11d
    15a4:	49 83 c4 08          	add    $0x8,%r12
    15a8:	48 83 c7 08          	add    $0x8,%rdi
    15ac:	41 81 fb d1 04 00 00 	cmp    $0x4d1,%r11d
    15b3:	75 8d                	jne    1542 <f0()+0x32>
    15b5:	4d 63 d2             	movslq %r10d,%r10
    15b8:	4a 8d 3c 95 00 00 00 	lea    0x0(,%r10,4),%rdi
    15bf:	00 
    15c0:	c5 7d 6f 05 98 1a 00 	vmovdqa 0x1a98(%rip),%ymm8        # 3060 <_IO_stdin_used+0x60>
    15c7:	00 
    15c8:	c5 fd 6f 3d b0 1a 00 	vmovdqa 0x1ab0(%rip),%ymm7        # 3080 <_IO_stdin_used+0x80>
    15cf:	00 
    15d0:	c5 fd 6f 35 c8 1a 00 	vmovdqa 0x1ac8(%rip),%ymm6        # 30a0 <_IO_stdin_used+0xa0>
    15d7:	00 
    15d8:	49 01 f8             	add    %rdi,%r8
    15db:	49 8d b1 a0 58 00 00 	lea    0x58a0(%r9),%rsi
    15e2:	48 01 df             	add    %rbx,%rdi
    15e5:	c5 d1 ef ed          	vpxor  %xmm5,%xmm5,%xmm5
    15e9:	48 89 fa             	mov    %rdi,%rdx
    15ec:	4c 89 c0             	mov    %r8,%rax
    15ef:	4c 89 c9             	mov    %r9,%rcx
    15f2:	c5 7d 7f c4          	vmovdqa %ymm8,%ymm4
    15f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    15fd:	00 00 00 
    1600:	c5 f9 6e 80 90 26 00 	vmovd  0x2690(%rax),%xmm0
    1607:	00 
    1608:	c5 f9 6e 88 b0 73 00 	vmovd  0x73b0(%rax),%xmm1
    160f:	00 
    1610:	c5 f9 6e 98 20 4d 00 	vmovd  0x4d20(%rax),%xmm3
    1617:	00 
    1618:	c4 63 79 22 90 d8 39 	vpinsrd $0x1,0x39d8(%rax),%xmm0,%xmm10
    161f:	00 00 01 
    1622:	c4 e3 71 22 88 f8 86 	vpinsrd $0x1,0x86f8(%rax),%xmm1,%xmm1
    1629:	00 00 01 
    162c:	c4 e3 61 22 98 68 60 	vpinsrd $0x1,0x6068(%rax),%xmm3,%xmm3
    1633:	00 00 01 
    1636:	c5 f9 6e 00          	vmovd  (%rax),%xmm0
    163a:	c5 e1 6c d9          	vpunpcklqdq %xmm1,%xmm3,%xmm3
    163e:	c4 e3 79 22 80 48 13 	vpinsrd $0x1,0x1348(%rax),%xmm0,%xmm0
    1645:	00 00 01 
    1648:	c5 f9 6e 8a b0 73 00 	vmovd  0x73b0(%rdx),%xmm1
    164f:	00 
    1650:	c4 c1 79 6c c2       	vpunpcklqdq %xmm10,%xmm0,%xmm0
    1655:	c4 63 71 22 92 f8 86 	vpinsrd $0x1,0x86f8(%rdx),%xmm1,%xmm10
    165c:	00 00 01 
    165f:	c5 f9 6e 8a 90 26 00 	vmovd  0x2690(%rdx),%xmm1
    1666:	00 
    1667:	c4 e3 7d 38 c3 01    	vinserti128 $0x1,%xmm3,%ymm0,%ymm0
    166d:	c4 63 71 22 9a d8 39 	vpinsrd $0x1,0x39d8(%rdx),%xmm1,%xmm11
    1674:	00 00 01 
    1677:	c5 f9 6e 9a 20 4d 00 	vmovd  0x4d20(%rdx),%xmm3
    167e:	00 
    167f:	c5 f9 6e 0a          	vmovd  (%rdx),%xmm1
    1683:	c4 e3 61 22 9a 68 60 	vpinsrd $0x1,0x6068(%rdx),%xmm3,%xmm3
    168a:	00 00 01 
    168d:	c4 e3 71 22 8a 48 13 	vpinsrd $0x1,0x1348(%rdx),%xmm1,%xmm1
    1694:	00 00 01 
    1697:	c5 fd 6f d4          	vmovdqa %ymm4,%ymm2
    169b:	c4 c1 61 6c da       	vpunpcklqdq %xmm10,%xmm3,%xmm3
    16a0:	c4 c1 71 6c cb       	vpunpcklqdq %xmm11,%xmm1,%xmm1
    16a5:	c4 e3 75 38 cb 01    	vinserti128 $0x1,%xmm3,%ymm1,%ymm1
    16ab:	c5 ed db d6          	vpand  %ymm6,%ymm2,%ymm2
    16af:	c5 7d 6f 09          	vmovdqa (%rcx),%ymm9
    16b3:	c5 fd fe d9          	vpaddd %ymm1,%ymm0,%ymm3
    16b7:	c5 fd fa c1          	vpsubd %ymm1,%ymm0,%ymm0
    16bb:	c5 ed 76 cd          	vpcmpeqd %ymm5,%ymm2,%ymm1
    16bf:	c4 c1 65 fe d9       	vpaddd %ymm9,%ymm3,%ymm3
    16c4:	c4 c1 7d fe c1       	vpaddd %ymm9,%ymm0,%ymm0
    16c9:	c4 e3 7d 4c c3 10    	vpblendvb %ymm1,%ymm3,%ymm0,%ymm0
    16cf:	c5 fd 7f 01          	vmovdqa %ymm0,(%rcx)
    16d3:	48 83 c1 20          	add    $0x20,%rcx
    16d7:	c5 dd fe e7          	vpaddd %ymm7,%ymm4,%ymm4
    16db:	48 05 40 9a 00 00    	add    $0x9a40,%rax
    16e1:	48 81 c2 40 9a 00 00 	add    $0x9a40,%rdx
    16e8:	48 39 ce             	cmp    %rcx,%rsi
    16eb:	0f 85 0f ff ff ff    	jne    1600 <f0()+0xf0>
    16f1:	8b 87 40 33 ab 01    	mov    0x1ab3340(%rdi),%eax
    16f7:	49 ff c2             	inc    %r10
    16fa:	41 03 80 40 33 ab 01 	add    0x1ab3340(%r8),%eax
    1701:	01 05 f9 92 00 00    	add    %eax,0x92f9(%rip)        # aa00 <c+0x58a0>
    1707:	41 8b 80 88 46 ab 01 	mov    0x1ab4688(%r8),%eax
    170e:	48 83 c7 04          	add    $0x4,%rdi
    1712:	2b 87 84 46 ab 01    	sub    0x1ab4684(%rdi),%eax
    1718:	01 05 e6 92 00 00    	add    %eax,0x92e6(%rip)        # aa04 <c+0x58a4>
    171e:	8b 87 cc 59 ab 01    	mov    0x1ab59cc(%rdi),%eax
    1724:	49 83 c0 04          	add    $0x4,%r8
    1728:	41 03 80 cc 59 ab 01 	add    0x1ab59cc(%r8),%eax
    172f:	01 05 d3 92 00 00    	add    %eax,0x92d3(%rip)        # aa08 <c+0x58a8>
    1735:	41 8b 80 14 6d ab 01 	mov    0x1ab6d14(%r8),%eax
    173c:	2b 87 14 6d ab 01    	sub    0x1ab6d14(%rdi),%eax
    1742:	01 05 c4 92 00 00    	add    %eax,0x92c4(%rip)        # aa0c <c+0x58ac>
    1748:	41 8b 80 5c 80 ab 01 	mov    0x1ab805c(%r8),%eax
    174f:	03 87 5c 80 ab 01    	add    0x1ab805c(%rdi),%eax
    1755:	01 05 b5 92 00 00    	add    %eax,0x92b5(%rip)        # aa10 <c+0x58b0>
    175b:	41 8b 80 a4 93 ab 01 	mov    0x1ab93a4(%r8),%eax
    1762:	2b 87 a4 93 ab 01    	sub    0x1ab93a4(%rdi),%eax
    1768:	01 05 a6 92 00 00    	add    %eax,0x92a6(%rip)        # aa14 <c+0x58b4>
    176e:	41 81 fa d2 04 00 00 	cmp    $0x4d2,%r10d
    1775:	0f 85 6e fe ff ff    	jne    15e9 <f0()+0xd9>
    177b:	c5 f8 77             	vzeroupper 
    177e:	5b                   	pop    %rbx
    177f:	41 5c                	pop    %r12
    1781:	41 5d                	pop    %r13
    1783:	41 5e                	pop    %r14
    1785:	41 5f                	pop    %r15
    1787:	5d                   	pop    %rbp
    1788:	c3                   	retq   
    1789:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001790 <f1()>:
    1790:	f3 0f 1e fa          	endbr64 
    1794:	48 8d 0d 85 39 ac 01 	lea    0x1ac3985(%rip),%rcx        # 1ac5120 <a>
    179b:	48 8d 15 7e 92 00 00 	lea    0x927e(%rip),%rdx        # aa20 <b>
    17a2:	31 f6                	xor    %esi,%esi
    17a4:	48 8d 3d b5 39 00 00 	lea    0x39b5(%rip),%rdi        # 5160 <c>
    17ab:	44 8b 0c b7          	mov    (%rdi,%rsi,4),%r9d
    17af:	31 c0                	xor    %eax,%eax
    17b1:	40 f6 c6 01          	test   $0x1,%sil
    17b5:	0f 84 83 00 00 00    	je     183e <f1()+0xae>
    17bb:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
    17bf:	90                   	nop
    17c0:	c5 fd fe 04 01       	vpaddd (%rcx,%rax,1),%ymm0,%ymm0
    17c5:	c5 fd fa 04 02       	vpsubd (%rdx,%rax,1),%ymm0,%ymm0
    17ca:	48 83 c0 20          	add    $0x20,%rax
    17ce:	48 3d 40 13 00 00    	cmp    $0x1340,%rax
    17d4:	75 ea                	jne    17c0 <f1()+0x30>
    17d6:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    17da:	c4 e3 7d 39 c0 01    	vextracti128 $0x1,%ymm0,%xmm0
    17e0:	c5 f1 fe c0          	vpaddd %xmm0,%xmm1,%xmm0
    17e4:	c5 f1 73 d8 08       	vpsrldq $0x8,%xmm0,%xmm1
    17e9:	c5 f9 fe c1          	vpaddd %xmm1,%xmm0,%xmm0
    17ed:	c5 f1 73 d8 04       	vpsrldq $0x4,%xmm0,%xmm1
    17f2:	8b 81 40 13 00 00    	mov    0x1340(%rcx),%eax
    17f8:	c5 f9 fe c1          	vpaddd %xmm1,%xmm0,%xmm0
    17fc:	c4 c1 79 7e c0       	vmovd  %xmm0,%r8d
    1801:	2b 82 40 13 00 00    	sub    0x1340(%rdx),%eax
    1807:	45 01 c8             	add    %r9d,%r8d
    180a:	44 01 c0             	add    %r8d,%eax
    180d:	03 81 44 13 00 00    	add    0x1344(%rcx),%eax
    1813:	2b 82 44 13 00 00    	sub    0x1344(%rdx),%eax
    1819:	89 04 b7             	mov    %eax,(%rdi,%rsi,4)
    181c:	48 ff c6             	inc    %rsi
    181f:	48 81 c1 48 13 00 00 	add    $0x1348,%rcx
    1826:	48 81 c2 48 13 00 00 	add    $0x1348,%rdx
    182d:	48 81 fe 2e 16 00 00 	cmp    $0x162e,%rsi
    1834:	0f 85 71 ff ff ff    	jne    17ab <f1()+0x1b>
    183a:	c5 f8 77             	vzeroupper 
    183d:	c3                   	retq   
    183e:	c5 f1 ef c9          	vpxor  %xmm1,%xmm1,%xmm1
    1842:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1848:	c5 fe 6f 14 01       	vmovdqu (%rcx,%rax,1),%ymm2
    184d:	c5 ed fe 04 02       	vpaddd (%rdx,%rax,1),%ymm2,%ymm0
    1852:	48 83 c0 20          	add    $0x20,%rax
    1856:	c5 f5 fe c8          	vpaddd %ymm0,%ymm1,%ymm1
    185a:	48 3d 40 13 00 00    	cmp    $0x1340,%rax
    1860:	75 e6                	jne    1848 <f1()+0xb8>
    1862:	c5 f9 6f c1          	vmovdqa %xmm1,%xmm0
    1866:	c4 e3 7d 39 c9 01    	vextracti128 $0x1,%ymm1,%xmm1
    186c:	c5 f9 fe c9          	vpaddd %xmm1,%xmm0,%xmm1
    1870:	c5 f9 73 d9 08       	vpsrldq $0x8,%xmm1,%xmm0
    1875:	c5 f1 fe c0          	vpaddd %xmm0,%xmm1,%xmm0
    1879:	c5 f1 73 d8 04       	vpsrldq $0x4,%xmm0,%xmm1
    187e:	8b 82 40 13 00 00    	mov    0x1340(%rdx),%eax
    1884:	c5 f9 fe c1          	vpaddd %xmm1,%xmm0,%xmm0
    1888:	c4 c1 79 7e c0       	vmovd  %xmm0,%r8d
    188d:	45 01 c8             	add    %r9d,%r8d
    1890:	03 81 40 13 00 00    	add    0x1340(%rcx),%eax
    1896:	44 01 c0             	add    %r8d,%eax
    1899:	44 8b 82 44 13 00 00 	mov    0x1344(%rdx),%r8d
    18a0:	44 03 81 44 13 00 00 	add    0x1344(%rcx),%r8d
    18a7:	44 01 c0             	add    %r8d,%eax
    18aa:	e9 6a ff ff ff       	jmpq   1819 <f1()+0x89>
    18af:	90                   	nop

00000000000018b0 <f2()>:
    18b0:	f3 0f 1e fa          	endbr64 
    18b4:	48 8d 0d 65 38 ac 01 	lea    0x1ac3865(%rip),%rcx        # 1ac5120 <a>
    18bb:	48 8d 15 5e 91 00 00 	lea    0x915e(%rip),%rdx        # aa20 <b>
    18c2:	31 f6                	xor    %esi,%esi
    18c4:	4c 8d 05 95 38 00 00 	lea    0x3895(%rip),%r8        # 5160 <c>
    18cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    18d0:	45 8b 0c b0          	mov    (%r8,%rsi,4),%r9d
    18d4:	31 c0                	xor    %eax,%eax
    18d6:	40 f6 c6 01          	test   $0x1,%sil
    18da:	0f 85 8d 00 00 00    	jne    196d <f2()+0xbd>
    18e0:	c5 f1 ef c9          	vpxor  %xmm1,%xmm1,%xmm1
    18e4:	0f 1f 40 00          	nopl   0x0(%rax)
    18e8:	c5 fe 6f 14 01       	vmovdqu (%rcx,%rax,1),%ymm2
    18ed:	c5 ed fe 04 02       	vpaddd (%rdx,%rax,1),%ymm2,%ymm0
    18f2:	48 83 c0 20          	add    $0x20,%rax
    18f6:	c5 f5 fe c8          	vpaddd %ymm0,%ymm1,%ymm1
    18fa:	48 3d 40 13 00 00    	cmp    $0x1340,%rax
    1900:	75 e6                	jne    18e8 <f2()+0x38>
    1902:	c5 f9 6f c1          	vmovdqa %xmm1,%xmm0
    1906:	c4 e3 7d 39 c9 01    	vextracti128 $0x1,%ymm1,%xmm1
    190c:	c5 f9 fe c9          	vpaddd %xmm1,%xmm0,%xmm1
    1910:	c5 f9 73 d9 08       	vpsrldq $0x8,%xmm1,%xmm0
    1915:	8b 82 40 13 00 00    	mov    0x1340(%rdx),%eax
    191b:	c5 f1 fe c0          	vpaddd %xmm0,%xmm1,%xmm0
    191f:	c5 f1 73 d8 04       	vpsrldq $0x4,%xmm0,%xmm1
    1924:	03 81 40 13 00 00    	add    0x1340(%rcx),%eax
    192a:	c5 f9 fe c1          	vpaddd %xmm1,%xmm0,%xmm0
    192e:	89 c7                	mov    %eax,%edi
    1930:	c5 f9 7e c0          	vmovd  %xmm0,%eax
    1934:	44 01 c8             	add    %r9d,%eax
    1937:	01 f8                	add    %edi,%eax
    1939:	8b b9 44 13 00 00    	mov    0x1344(%rcx),%edi
    193f:	03 ba 44 13 00 00    	add    0x1344(%rdx),%edi
    1945:	01 f8                	add    %edi,%eax
    1947:	41 89 04 b0          	mov    %eax,(%r8,%rsi,4)
    194b:	48 ff c6             	inc    %rsi
    194e:	48 81 c1 48 13 00 00 	add    $0x1348,%rcx
    1955:	48 81 c2 48 13 00 00 	add    $0x1348,%rdx
    195c:	48 81 fe 2e 16 00 00 	cmp    $0x162e,%rsi
    1963:	0f 85 67 ff ff ff    	jne    18d0 <f2()+0x20>
    1969:	c5 f8 77             	vzeroupper 
    196c:	c3                   	retq   
    196d:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
    1971:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1978:	c5 fd fe 04 01       	vpaddd (%rcx,%rax,1),%ymm0,%ymm0
    197d:	c5 fd fa 04 02       	vpsubd (%rdx,%rax,1),%ymm0,%ymm0
    1982:	48 83 c0 20          	add    $0x20,%rax
    1986:	48 3d 40 13 00 00    	cmp    $0x1340,%rax
    198c:	75 ea                	jne    1978 <f2()+0xc8>
    198e:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    1992:	c4 e3 7d 39 c0 01    	vextracti128 $0x1,%ymm0,%xmm0
    1998:	c5 f1 fe c0          	vpaddd %xmm0,%xmm1,%xmm0
    199c:	c5 f1 73 d8 08       	vpsrldq $0x8,%xmm0,%xmm1
    19a1:	8b 81 40 13 00 00    	mov    0x1340(%rcx),%eax
    19a7:	c5 f9 fe c1          	vpaddd %xmm1,%xmm0,%xmm0
    19ab:	c5 f1 73 d8 04       	vpsrldq $0x4,%xmm0,%xmm1
    19b0:	2b 82 40 13 00 00    	sub    0x1340(%rdx),%eax
    19b6:	c5 f9 fe c1          	vpaddd %xmm1,%xmm0,%xmm0
    19ba:	89 c7                	mov    %eax,%edi
    19bc:	c5 f9 7e c0          	vmovd  %xmm0,%eax
    19c0:	44 01 c8             	add    %r9d,%eax
    19c3:	01 f8                	add    %edi,%eax
    19c5:	03 81 44 13 00 00    	add    0x1344(%rcx),%eax
    19cb:	2b 82 44 13 00 00    	sub    0x1344(%rdx),%eax
    19d1:	41 89 04 b0          	mov    %eax,(%r8,%rsi,4)
    19d5:	e9 71 ff ff ff       	jmpq   194b <f2()+0x9b>
    19da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000019e0 <f3()>:
    19e0:	f3 0f 1e fa          	endbr64 
    19e4:	4c 8d 05 75 37 00 00 	lea    0x3775(%rip),%r8        # 5160 <c>
    19eb:	48 8d 0d 2e 37 ac 01 	lea    0x1ac372e(%rip),%rcx        # 1ac5120 <a>
    19f2:	48 8d 15 27 90 00 00 	lea    0x9027(%rip),%rdx        # aa20 <b>
    19f9:	4d 8d 88 b8 58 00 00 	lea    0x58b8(%r8),%r9
    1a00:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
    1a04:	45 8b 10             	mov    (%r8),%r10d
    1a07:	45 8b 58 04          	mov    0x4(%r8),%r11d
    1a0b:	48 8d b9 48 13 00 00 	lea    0x1348(%rcx),%rdi
    1a12:	48 8d b2 48 13 00 00 	lea    0x1348(%rdx),%rsi
    1a19:	31 c0                	xor    %eax,%eax
    1a1b:	c5 fd 6f d0          	vmovdqa %ymm0,%ymm2
    1a1f:	90                   	nop
    1a20:	c5 fe 6f 24 01       	vmovdqu (%rcx,%rax,1),%ymm4
    1a25:	c5 fd fe 04 07       	vpaddd (%rdi,%rax,1),%ymm0,%ymm0
    1a2a:	c5 dd fe 0c 02       	vpaddd (%rdx,%rax,1),%ymm4,%ymm1
    1a2f:	c5 fd fa 04 06       	vpsubd (%rsi,%rax,1),%ymm0,%ymm0
    1a34:	48 83 c0 20          	add    $0x20,%rax
    1a38:	c5 ed fe d1          	vpaddd %ymm1,%ymm2,%ymm2
    1a3c:	48 3d 40 13 00 00    	cmp    $0x1340,%rax
    1a42:	75 dc                	jne    1a20 <f3()+0x40>
    1a44:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    1a48:	c4 e3 7d 39 c0 01    	vextracti128 $0x1,%ymm0,%xmm0
    1a4e:	c5 f1 fe c0          	vpaddd %xmm0,%xmm1,%xmm0
    1a52:	c5 f1 73 d8 08       	vpsrldq $0x8,%xmm0,%xmm1
    1a57:	c5 f9 fe c9          	vpaddd %xmm1,%xmm0,%xmm1
    1a5b:	c5 e1 73 d9 04       	vpsrldq $0x4,%xmm1,%xmm3
    1a60:	8b b1 88 26 00 00    	mov    0x2688(%rcx),%esi
    1a66:	c5 f9 6f c2          	vmovdqa %xmm2,%xmm0
    1a6a:	c5 f1 fe cb          	vpaddd %xmm3,%xmm1,%xmm1
    1a6e:	c4 e3 7d 39 d2 01    	vextracti128 $0x1,%ymm2,%xmm2
    1a74:	c5 f9 fe d2          	vpaddd %xmm2,%xmm0,%xmm2
    1a78:	c5 f9 7e c8          	vmovd  %xmm1,%eax
    1a7c:	2b b2 88 26 00 00    	sub    0x2688(%rdx),%esi
    1a82:	c5 f9 73 da 08       	vpsrldq $0x8,%xmm2,%xmm0
    1a87:	44 01 d8             	add    %r11d,%eax
    1a8a:	c5 e9 fe c0          	vpaddd %xmm0,%xmm2,%xmm0
    1a8e:	01 c6                	add    %eax,%esi
    1a90:	8b 82 40 13 00 00    	mov    0x1340(%rdx),%eax
    1a96:	c5 e9 73 d8 04       	vpsrldq $0x4,%xmm0,%xmm2
    1a9b:	03 81 40 13 00 00    	add    0x1340(%rcx),%eax
    1aa1:	c5 f9 fe c2          	vpaddd %xmm2,%xmm0,%xmm0
    1aa5:	89 c7                	mov    %eax,%edi
    1aa7:	c5 f9 7e c0          	vmovd  %xmm0,%eax
    1aab:	44 01 d0             	add    %r10d,%eax
    1aae:	01 f8                	add    %edi,%eax
    1ab0:	8b b9 44 13 00 00    	mov    0x1344(%rcx),%edi
    1ab6:	03 b1 8c 26 00 00    	add    0x268c(%rcx),%esi
    1abc:	03 ba 44 13 00 00    	add    0x1344(%rdx),%edi
    1ac2:	2b b2 8c 26 00 00    	sub    0x268c(%rdx),%esi
    1ac8:	01 f8                	add    %edi,%eax
    1aca:	41 89 00             	mov    %eax,(%r8)
    1acd:	41 89 70 04          	mov    %esi,0x4(%r8)
    1ad1:	49 83 c0 08          	add    $0x8,%r8
    1ad5:	48 81 c1 90 26 00 00 	add    $0x2690,%rcx
    1adc:	48 81 c2 90 26 00 00 	add    $0x2690,%rdx
    1ae3:	4d 39 c8             	cmp    %r9,%r8
    1ae6:	0f 85 14 ff ff ff    	jne    1a00 <f3()+0x20>
    1aec:	c5 f8 77             	vzeroupper 
    1aef:	c3                   	retq   

0000000000001af0 <f4()>:
    1af0:	f3 0f 1e fa          	endbr64 
    1af4:	48 8d 35 25 36 ac 01 	lea    0x1ac3625(%rip),%rsi        # 1ac5120 <a>
    1afb:	4c 8d 05 5e 36 00 00 	lea    0x365e(%rip),%r8        # 5160 <c>
    1b02:	48 8d 3d 17 8f 00 00 	lea    0x8f17(%rip),%rdi        # aa20 <b>
    1b09:	4c 8d 8e f0 a6 ab 01 	lea    0x1aba6f0(%rsi),%r9
    1b10:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
    1b14:	45 8b 10             	mov    (%r8),%r10d
    1b17:	45 8b 58 04          	mov    0x4(%r8),%r11d
    1b1b:	48 8d 8e 48 13 00 00 	lea    0x1348(%rsi),%rcx
    1b22:	48 8d 97 48 13 00 00 	lea    0x1348(%rdi),%rdx
    1b29:	31 c0                	xor    %eax,%eax
    1b2b:	c5 fd 6f d0          	vmovdqa %ymm0,%ymm2
    1b2f:	90                   	nop
    1b30:	c5 fe 6f 7c 06 20    	vmovdqu 0x20(%rsi,%rax,1),%ymm7
    1b36:	c5 fe 6f 4c 07 20    	vmovdqu 0x20(%rdi,%rax,1),%ymm1
    1b3c:	c5 fe 6f 24 06       	vmovdqu (%rsi,%rax,1),%ymm4
    1b41:	c5 fe 6f 1c 07       	vmovdqu (%rdi,%rax,1),%ymm3
    1b46:	c4 e3 5d 46 f7 20    	vperm2i128 $0x20,%ymm7,%ymm4,%ymm6
    1b4c:	c4 e3 65 46 e9 20    	vperm2i128 $0x20,%ymm1,%ymm3,%ymm5
    1b52:	c4 e3 5d 46 e7 31    	vperm2i128 $0x31,%ymm7,%ymm4,%ymm4
    1b58:	c4 e3 65 46 d9 31    	vperm2i128 $0x31,%ymm1,%ymm3,%ymm3
    1b5e:	c5 fd 70 ed d8       	vpshufd $0xd8,%ymm5,%ymm5
    1b63:	c5 fd 70 f6 d8       	vpshufd $0xd8,%ymm6,%ymm6
    1b68:	c5 fd 70 db d8       	vpshufd $0xd8,%ymm3,%ymm3
    1b6d:	c5 fd 70 e4 d8       	vpshufd $0xd8,%ymm4,%ymm4
    1b72:	c5 55 6c c3          	vpunpcklqdq %ymm3,%ymm5,%ymm8
    1b76:	c5 cd 6c cc          	vpunpcklqdq %ymm4,%ymm6,%ymm1
    1b7a:	c4 c1 75 fe c8       	vpaddd %ymm8,%ymm1,%ymm1
    1b7f:	c5 cd 6d e4          	vpunpckhqdq %ymm4,%ymm6,%ymm4
    1b83:	c5 d5 6d db          	vpunpckhqdq %ymm3,%ymm5,%ymm3
    1b87:	c5 f5 fe cc          	vpaddd %ymm4,%ymm1,%ymm1
    1b8b:	c5 f5 fe cb          	vpaddd %ymm3,%ymm1,%ymm1
    1b8f:	c5 fe 6f 7c 02 20    	vmovdqu 0x20(%rdx,%rax,1),%ymm7
    1b95:	c5 fe 6f 24 01       	vmovdqu (%rcx,%rax,1),%ymm4
    1b9a:	c5 fe 6f 1c 02       	vmovdqu (%rdx,%rax,1),%ymm3
    1b9f:	c5 ed fe d1          	vpaddd %ymm1,%ymm2,%ymm2
    1ba3:	c5 fe 6f 4c 01 20    	vmovdqu 0x20(%rcx,%rax,1),%ymm1
    1ba9:	c4 e3 65 46 ef 20    	vperm2i128 $0x20,%ymm7,%ymm3,%ymm5
    1baf:	c4 e3 5d 46 f1 20    	vperm2i128 $0x20,%ymm1,%ymm4,%ymm6
    1bb5:	c4 e3 65 46 df 31    	vperm2i128 $0x31,%ymm7,%ymm3,%ymm3
    1bbb:	c4 e3 5d 46 e1 31    	vperm2i128 $0x31,%ymm1,%ymm4,%ymm4
    1bc1:	c5 fd 70 f6 d8       	vpshufd $0xd8,%ymm6,%ymm6
    1bc6:	c5 fd 70 e4 d8       	vpshufd $0xd8,%ymm4,%ymm4
    1bcb:	c5 fd 70 ed d8       	vpshufd $0xd8,%ymm5,%ymm5
    1bd0:	c5 fd 70 db d8       	vpshufd $0xd8,%ymm3,%ymm3
    1bd5:	c5 cd 6c cc          	vpunpcklqdq %ymm4,%ymm6,%ymm1
    1bd9:	c5 d5 6c fb          	vpunpcklqdq %ymm3,%ymm5,%ymm7
    1bdd:	c5 f5 fa cf          	vpsubd %ymm7,%ymm1,%ymm1
    1be1:	c5 cd 6d e4          	vpunpckhqdq %ymm4,%ymm6,%ymm4
    1be5:	c5 f5 fe cc          	vpaddd %ymm4,%ymm1,%ymm1
    1be9:	c5 d5 6d db          	vpunpckhqdq %ymm3,%ymm5,%ymm3
    1bed:	c5 f5 fa cb          	vpsubd %ymm3,%ymm1,%ymm1
    1bf1:	48 83 c0 40          	add    $0x40,%rax
    1bf5:	c5 fd fe c1          	vpaddd %ymm1,%ymm0,%ymm0
    1bf9:	48 3d 40 13 00 00    	cmp    $0x1340,%rax
    1bff:	0f 85 2b ff ff ff    	jne    1b30 <f4()+0x40>
    1c05:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    1c09:	c4 e3 7d 39 c0 01    	vextracti128 $0x1,%ymm0,%xmm0
    1c0f:	c5 f1 fe c8          	vpaddd %xmm0,%xmm1,%xmm1
    1c13:	c5 f9 73 d9 08       	vpsrldq $0x8,%xmm1,%xmm0
    1c18:	8b 96 88 26 00 00    	mov    0x2688(%rsi),%edx
    1c1e:	c5 f1 fe c8          	vpaddd %xmm0,%xmm1,%xmm1
    1c22:	c4 e3 7d 39 d0 01    	vextracti128 $0x1,%ymm2,%xmm0
    1c28:	8b 86 40 13 00 00    	mov    0x1340(%rsi),%eax
    1c2e:	c5 f9 fe c2          	vpaddd %xmm2,%xmm0,%xmm0
    1c32:	2b 97 88 26 00 00    	sub    0x2688(%rdi),%edx
    1c38:	c5 e9 73 d8 08       	vpsrldq $0x8,%xmm0,%xmm2
    1c3d:	c5 e1 73 d9 04       	vpsrldq $0x4,%xmm1,%xmm3
    1c42:	03 96 8c 26 00 00    	add    0x268c(%rsi),%edx
    1c48:	03 87 40 13 00 00    	add    0x1340(%rdi),%eax
    1c4e:	c5 f9 fe c2          	vpaddd %xmm2,%xmm0,%xmm0
    1c52:	c5 f1 fe cb          	vpaddd %xmm3,%xmm1,%xmm1
    1c56:	03 86 44 13 00 00    	add    0x1344(%rsi),%eax
    1c5c:	89 d1                	mov    %edx,%ecx
    1c5e:	c5 e9 73 d8 04       	vpsrldq $0x4,%xmm0,%xmm2
    1c63:	c5 f9 7e ca          	vmovd  %xmm1,%edx
    1c67:	2b 8f 8c 26 00 00    	sub    0x268c(%rdi),%ecx
    1c6d:	03 87 44 13 00 00    	add    0x1344(%rdi),%eax
    1c73:	44 01 da             	add    %r11d,%edx
    1c76:	c5 f9 fe c2          	vpaddd %xmm2,%xmm0,%xmm0
    1c7a:	01 ca                	add    %ecx,%edx
    1c7c:	89 c1                	mov    %eax,%ecx
    1c7e:	c5 f9 7e c0          	vmovd  %xmm0,%eax
    1c82:	44 01 d0             	add    %r10d,%eax
    1c85:	01 c8                	add    %ecx,%eax
    1c87:	48 81 c6 90 26 00 00 	add    $0x2690,%rsi
    1c8e:	41 89 00             	mov    %eax,(%r8)
    1c91:	41 89 50 04          	mov    %edx,0x4(%r8)
    1c95:	48 81 c7 90 26 00 00 	add    $0x2690,%rdi
    1c9c:	49 83 c0 08          	add    $0x8,%r8
    1ca0:	49 39 f1             	cmp    %rsi,%r9
    1ca3:	0f 85 67 fe ff ff    	jne    1b10 <f4()+0x20>
    1ca9:	c5 f8 77             	vzeroupper 
    1cac:	c3                   	retq   
    1cad:	0f 1f 00             	nopl   (%rax)

0000000000001cb0 <f5()>:
    1cb0:	f3 0f 1e fa          	endbr64 
    1cb4:	55                   	push   %rbp
    1cb5:	48 89 e5             	mov    %rsp,%rbp
    1cb8:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    1cbc:	4c 8d 9c 24 00 50 ff 	lea    -0xb000(%rsp),%r11
    1cc3:	ff 
    1cc4:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    1ccb:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    1cd0:	4c 39 dc             	cmp    %r11,%rsp
    1cd3:	75 ef                	jne    1cc4 <f5()+0x14>
    1cd5:	48 81 ec 80 01 00 00 	sub    $0x180,%rsp
    1cdc:	48 8d 15 7d a0 00 00 	lea    0xa07d(%rip),%rdx        # bd60 <b+0x1340>
    1ce3:	48 8d ba c0 ec ff ff 	lea    -0x1340(%rdx),%rdi
    1cea:	48 8d 0d 6f 47 ac 01 	lea    0x1ac476f(%rip),%rcx        # 1ac6460 <a+0x1340>
    1cf1:	4c 8d 81 c0 ec ff ff 	lea    -0x1340(%rcx),%r8
    1cf8:	4c 8d 9f 30 ba ab 01 	lea    0x1abba30(%rdi),%r11
    1cff:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1d06:	00 00 
    1d08:	48 89 84 24 78 b1 00 	mov    %rax,0xb178(%rsp)
    1d0f:	00 
    1d10:	31 c0                	xor    %eax,%eax
    1d12:	31 f6                	xor    %esi,%esi
    1d14:	49 89 e2             	mov    %rsp,%r10
    1d17:	4c 8d 8c 24 c0 58 00 	lea    0x58c0(%rsp),%r9
    1d1e:	00 
    1d1f:	90                   	nop
    1d20:	4c 89 c0             	mov    %r8,%rax
    1d23:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
    1d27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    1d2e:	00 00 
    1d30:	c5 fd fe 00          	vpaddd (%rax),%ymm0,%ymm0
    1d34:	48 83 c0 20          	add    $0x20,%rax
    1d38:	48 39 c8             	cmp    %rcx,%rax
    1d3b:	75 f3                	jne    1d30 <f5()+0x80>
    1d3d:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    1d41:	c4 e3 7d 39 c0 01    	vextracti128 $0x1,%ymm0,%xmm0
    1d47:	c5 f1 fe c0          	vpaddd %xmm0,%xmm1,%xmm0
    1d4b:	c5 f1 73 d8 08       	vpsrldq $0x8,%xmm0,%xmm1
    1d50:	c5 f9 fe c1          	vpaddd %xmm1,%xmm0,%xmm0
    1d54:	c5 f1 73 d8 04       	vpsrldq $0x4,%xmm0,%xmm1
    1d59:	c5 f9 fe c1          	vpaddd %xmm1,%xmm0,%xmm0
    1d5d:	c5 f9 7e c0          	vmovd  %xmm0,%eax
    1d61:	03 01                	add    (%rcx),%eax
    1d63:	03 41 04             	add    0x4(%rcx),%eax
    1d66:	41 89 04 32          	mov    %eax,(%r10,%rsi,1)
    1d6a:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
    1d6e:	48 89 f8             	mov    %rdi,%rax
    1d71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1d78:	c5 fd fe 00          	vpaddd (%rax),%ymm0,%ymm0
    1d7c:	48 83 c0 20          	add    $0x20,%rax
    1d80:	48 39 c2             	cmp    %rax,%rdx
    1d83:	75 f3                	jne    1d78 <f5()+0xc8>
    1d85:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    1d89:	c4 e3 7d 39 c0 01    	vextracti128 $0x1,%ymm0,%xmm0
    1d8f:	c5 f1 fe c0          	vpaddd %xmm0,%xmm1,%xmm0
    1d93:	c5 f1 73 d8 08       	vpsrldq $0x8,%xmm0,%xmm1
    1d98:	c5 f9 fe c1          	vpaddd %xmm1,%xmm0,%xmm0
    1d9c:	c5 f1 73 d8 04       	vpsrldq $0x4,%xmm0,%xmm1
    1da1:	c5 f9 fe c1          	vpaddd %xmm1,%xmm0,%xmm0
    1da5:	c5 f9 7e c0          	vmovd  %xmm0,%eax
    1da9:	03 02                	add    (%rdx),%eax
    1dab:	03 42 04             	add    0x4(%rdx),%eax
    1dae:	48 81 c2 48 13 00 00 	add    $0x1348,%rdx
    1db5:	41 89 04 31          	mov    %eax,(%r9,%rsi,1)
    1db9:	48 81 c7 48 13 00 00 	add    $0x1348,%rdi
    1dc0:	48 81 c1 48 13 00 00 	add    $0x1348,%rcx
    1dc7:	49 81 c0 48 13 00 00 	add    $0x1348,%r8
    1dce:	48 83 c6 04          	add    $0x4,%rsi
    1dd2:	4c 39 da             	cmp    %r11,%rdx
    1dd5:	0f 85 45 ff ff ff    	jne    1d20 <f5()+0x70>
    1ddb:	31 c0                	xor    %eax,%eax
    1ddd:	48 8d 15 7c 33 00 00 	lea    0x337c(%rip),%rdx        # 5160 <c>
    1de4:	0f 1f 40 00          	nopl   0x0(%rax)
    1de8:	c4 c1 7d 6f 0c 02    	vmovdqa (%r10,%rax,1),%ymm1
    1dee:	c4 c1 7d 6f 14 01    	vmovdqa (%r9,%rax,1),%ymm2
    1df4:	c5 f5 fe c2          	vpaddd %ymm2,%ymm1,%ymm0
    1df8:	c5 f5 fa ca          	vpsubd %ymm2,%ymm1,%ymm1
    1dfc:	c4 e3 7d 02 c1 aa    	vpblendd $0xaa,%ymm1,%ymm0,%ymm0
    1e02:	c5 fd fe 04 02       	vpaddd (%rdx,%rax,1),%ymm0,%ymm0
    1e07:	c5 fd 7f 04 02       	vmovdqa %ymm0,(%rdx,%rax,1)
    1e0c:	48 83 c0 20          	add    $0x20,%rax
    1e10:	48 3d a0 58 00 00    	cmp    $0x58a0,%rax
    1e16:	75 d0                	jne    1de8 <f5()+0x138>
    1e18:	8b 84 24 60 b1 00 00 	mov    0xb160(%rsp),%eax
    1e1f:	03 84 24 a0 58 00 00 	add    0x58a0(%rsp),%eax
    1e26:	01 05 d4 8b 00 00    	add    %eax,0x8bd4(%rip)        # aa00 <c+0x58a0>
    1e2c:	8b 84 24 a4 58 00 00 	mov    0x58a4(%rsp),%eax
    1e33:	2b 84 24 64 b1 00 00 	sub    0xb164(%rsp),%eax
    1e3a:	01 05 c4 8b 00 00    	add    %eax,0x8bc4(%rip)        # aa04 <c+0x58a4>
    1e40:	8b 84 24 68 b1 00 00 	mov    0xb168(%rsp),%eax
    1e47:	03 84 24 a8 58 00 00 	add    0x58a8(%rsp),%eax
    1e4e:	01 05 b4 8b 00 00    	add    %eax,0x8bb4(%rip)        # aa08 <c+0x58a8>
    1e54:	8b 84 24 ac 58 00 00 	mov    0x58ac(%rsp),%eax
    1e5b:	2b 84 24 6c b1 00 00 	sub    0xb16c(%rsp),%eax
    1e62:	01 05 a4 8b 00 00    	add    %eax,0x8ba4(%rip)        # aa0c <c+0x58ac>
    1e68:	8b 84 24 b0 58 00 00 	mov    0x58b0(%rsp),%eax
    1e6f:	03 84 24 70 b1 00 00 	add    0xb170(%rsp),%eax
    1e76:	01 05 94 8b 00 00    	add    %eax,0x8b94(%rip)        # aa10 <c+0x58b0>
    1e7c:	8b 84 24 b4 58 00 00 	mov    0x58b4(%rsp),%eax
    1e83:	2b 84 24 74 b1 00 00 	sub    0xb174(%rsp),%eax
    1e8a:	01 05 84 8b 00 00    	add    %eax,0x8b84(%rip)        # aa14 <c+0x58b4>
    1e90:	48 8b 84 24 78 b1 00 	mov    0xb178(%rsp),%rax
    1e97:	00 
    1e98:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    1e9f:	00 00 
    1ea1:	75 05                	jne    1ea8 <f5()+0x1f8>
    1ea3:	c5 f8 77             	vzeroupper 
    1ea6:	c9                   	leaveq 
    1ea7:	c3                   	retq   
    1ea8:	c5 f8 77             	vzeroupper 
    1eab:	e8 80 f3 ff ff       	callq  1230 <__stack_chk_fail@plt>

0000000000001eb0 <reset()>:
    1eb0:	f3 0f 1e fa          	endbr64 
    1eb4:	41 57                	push   %r15
    1eb6:	41 56                	push   %r14
    1eb8:	41 55                	push   %r13
    1eba:	41 54                	push   %r12
    1ebc:	55                   	push   %rbp
    1ebd:	53                   	push   %rbx
    1ebe:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    1ec5:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1ecc:	00 00 
    1ece:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
    1ed3:	31 c0                	xor    %eax,%eax
    1ed5:	0f b6 05 44 d9 57 03 	movzbl 0x357d944(%rip),%eax        # 357f820 <guard variable for reset()::device>
    1edc:	84 c0                	test   %al,%al
    1ede:	75 14                	jne    1ef4 <reset()+0x44>
    1ee0:	48 8d 3d 39 d9 57 03 	lea    0x357d939(%rip),%rdi        # 357f820 <guard variable for reset()::device>
    1ee7:	e8 04 f4 ff ff       	callq  12f0 <__cxa_guard_acquire@plt>
    1eec:	85 c0                	test   %eax,%eax
    1eee:	0f 85 27 03 00 00    	jne    221b <reset()+0x36b>
    1ef4:	0f b6 05 15 d9 57 03 	movzbl 0x357d915(%rip),%eax        # 357f810 <guard variable for reset()::generator>
    1efb:	84 c0                	test   %al,%al
    1efd:	0f 84 a5 02 00 00    	je     21a8 <reset()+0x2f8>
    1f03:	48 b8 fb ff ff ff 05 	movabs $0x5fffffffb,%rax
    1f0a:	00 00 00 
    1f0d:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
    1f12:	48 8b 05 ff d8 57 03 	mov    0x357d8ff(%rip),%rax        # 357f818 <reset()::generator>
    1f19:	48 8d 0d 00 8b 00 00 	lea    0x8b00(%rip),%rcx        # aa20 <b>
    1f20:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    1f25:	48 8d 05 34 32 00 00 	lea    0x3234(%rip),%rax        # 5160 <c>
    1f2c:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    1f31:	48 8d 05 e8 31 ac 01 	lea    0x1ac31e8(%rip),%rax        # 1ac5120 <a>
    1f38:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    1f3d:	48 05 f0 a6 ab 01    	add    $0x1aba6f0,%rax
    1f43:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    1f48:	4c 8d 74 24 40       	lea    0x40(%rsp),%r14
    1f4d:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    1f52:	41 b8 05 00 00 00    	mov    $0x5,%r8d
    1f58:	b9 fb ff ff ff       	mov    $0xfffffffb,%ecx
    1f5d:	4c 8d 64 24 48       	lea    0x48(%rsp),%r12
    1f62:	48 bd 05 00 00 00 02 	movabs $0x200000005,%rbp
    1f69:	00 00 00 
    1f6c:	4d 89 f7             	mov    %r14,%r15
    1f6f:	90                   	nop
    1f70:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    1f75:	45 31 ed             	xor    %r13d,%r13d
    1f78:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    1f7e:	48 63 c1             	movslq %ecx,%rax
    1f81:	49 29 c0             	sub    %rax,%r8
    1f84:	4c 8d 74 24 38       	lea    0x38(%rsp),%r14
    1f89:	49 81 f8 fc ff ff 7f 	cmp    $0x7ffffffc,%r8
    1f90:	0f 87 bc 00 00 00    	ja     2052 <reset()+0x1a2>
    1f96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1f9d:	00 00 00 
    1fa0:	49 ff c0             	inc    %r8
    1fa3:	b8 fd ff ff 7f       	mov    $0x7ffffffd,%eax
    1fa8:	31 d2                	xor    %edx,%edx
    1faa:	49 f7 f0             	div    %r8
    1fad:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
    1fb2:	4c 0f af c0          	imul   %rax,%r8
    1fb6:	49 89 c2             	mov    %rax,%r10
    1fb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1fc0:	48 69 fe a7 41 00 00 	imul   $0x41a7,%rsi,%rdi
    1fc7:	48 89 f8             	mov    %rdi,%rax
    1fca:	48 f7 e5             	mul    %rbp
    1fcd:	48 89 fe             	mov    %rdi,%rsi
    1fd0:	48 29 d6             	sub    %rdx,%rsi
    1fd3:	48 d1 ee             	shr    %rsi
    1fd6:	48 01 f2             	add    %rsi,%rdx
    1fd9:	48 89 d6             	mov    %rdx,%rsi
    1fdc:	48 c1 ee 1e          	shr    $0x1e,%rsi
    1fe0:	48 89 f0             	mov    %rsi,%rax
    1fe3:	48 c1 e0 1f          	shl    $0x1f,%rax
    1fe7:	48 29 f0             	sub    %rsi,%rax
    1fea:	48 29 c7             	sub    %rax,%rdi
    1fed:	48 8d 47 ff          	lea    -0x1(%rdi),%rax
    1ff1:	48 89 fe             	mov    %rdi,%rsi
    1ff4:	49 39 c0             	cmp    %rax,%r8
    1ff7:	76 c7                	jbe    1fc0 <reset()+0x110>
    1ff9:	31 d2                	xor    %edx,%edx
    1ffb:	49 f7 f2             	div    %r10
    1ffe:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
    2003:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
    2008:	01 c8                	add    %ecx,%eax
    200a:	42 89 04 2b          	mov    %eax,(%rbx,%r13,1)
    200e:	4c 89 fa             	mov    %r15,%rdx
    2011:	4c 89 e6             	mov    %r12,%rsi
    2014:	4c 89 ff             	mov    %r15,%rdi
    2017:	e8 d4 02 00 00       	callq  22f0 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)>
    201c:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
    2021:	42 89 04 2b          	mov    %eax,(%rbx,%r13,1)
    2025:	49 83 c5 04          	add    $0x4,%r13
    2029:	49 81 fd 48 13 00 00 	cmp    $0x1348,%r13
    2030:	0f 84 1a 01 00 00    	je     2150 <reset()+0x2a0>
    2036:	8b 4c 24 40          	mov    0x40(%rsp),%ecx
    203a:	4c 63 44 24 44       	movslq 0x44(%rsp),%r8
    203f:	48 63 c1             	movslq %ecx,%rax
    2042:	49 29 c0             	sub    %rax,%r8
    2045:	49 81 f8 fc ff ff 7f 	cmp    $0x7ffffffc,%r8
    204c:	0f 86 4e ff ff ff    	jbe    1fa0 <reset()+0xf0>
    2052:	49 81 f8 fd ff ff 7f 	cmp    $0x7ffffffd,%r8
    2059:	0f 84 b1 00 00 00    	je     2110 <reset()+0x260>
    205f:	4c 89 c2             	mov    %r8,%rdx
    2062:	48 d1 ea             	shr    %rdx
    2065:	48 b8 09 00 00 00 02 	movabs $0x8000000200000009,%rax
    206c:	00 00 80 
    206f:	48 f7 e2             	mul    %rdx
    2072:	4c 89 6c 24 18       	mov    %r13,0x18(%rsp)
    2077:	4d 89 e5             	mov    %r12,%r13
    207a:	48 89 d3             	mov    %rdx,%rbx
    207d:	48 c1 eb 1d          	shr    $0x1d,%rbx
    2081:	41 89 dc             	mov    %ebx,%r12d
    2084:	4c 89 c3             	mov    %r8,%rbx
    2087:	4c 89 f2             	mov    %r14,%rdx
    208a:	4c 89 ee             	mov    %r13,%rsi
    208d:	4c 89 ff             	mov    %r15,%rdi
    2090:	c7 44 24 38 00 00 00 	movl   $0x0,0x38(%rsp)
    2097:	00 
    2098:	44 89 64 24 3c       	mov    %r12d,0x3c(%rsp)
    209d:	e8 4e 02 00 00       	callq  22f0 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)>
    20a2:	48 69 74 24 48 a7 41 	imul   $0x41a7,0x48(%rsp),%rsi
    20a9:	00 00 
    20ab:	41 89 c0             	mov    %eax,%r8d
    20ae:	48 89 f0             	mov    %rsi,%rax
    20b1:	48 f7 e5             	mul    %rbp
    20b4:	48 89 f0             	mov    %rsi,%rax
    20b7:	48 29 d0             	sub    %rdx,%rax
    20ba:	48 d1 e8             	shr    %rax
    20bd:	48 01 c2             	add    %rax,%rdx
    20c0:	48 c1 ea 1e          	shr    $0x1e,%rdx
    20c4:	48 89 d0             	mov    %rdx,%rax
    20c7:	48 c1 e0 1f          	shl    $0x1f,%rax
    20cb:	48 29 d0             	sub    %rdx,%rax
    20ce:	48 29 c6             	sub    %rax,%rsi
    20d1:	49 63 c0             	movslq %r8d,%rax
    20d4:	48 69 c0 fe ff ff 7f 	imul   $0x7ffffffe,%rax,%rax
    20db:	48 89 f2             	mov    %rsi,%rdx
    20de:	48 ff ca             	dec    %rdx
    20e1:	48 01 c2             	add    %rax,%rdx
    20e4:	0f 92 c0             	setb   %al
    20e7:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
    20ec:	0f b6 c0             	movzbl %al,%eax
    20ef:	48 39 d3             	cmp    %rdx,%rbx
    20f2:	72 93                	jb     2087 <reset()+0x1d7>
    20f4:	48 85 c0             	test   %rax,%rax
    20f7:	75 8e                	jne    2087 <reset()+0x1d7>
    20f9:	4d 89 ec             	mov    %r13,%r12
    20fc:	8b 4c 24 40          	mov    0x40(%rsp),%ecx
    2100:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
    2105:	48 89 d0             	mov    %rdx,%rax
    2108:	e9 f6 fe ff ff       	jmpq   2003 <reset()+0x153>
    210d:	0f 1f 00             	nopl   (%rax)
    2110:	48 69 74 24 48 a7 41 	imul   $0x41a7,0x48(%rsp),%rsi
    2117:	00 00 
    2119:	48 89 f0             	mov    %rsi,%rax
    211c:	48 f7 e5             	mul    %rbp
    211f:	48 89 f0             	mov    %rsi,%rax
    2122:	48 29 d0             	sub    %rdx,%rax
    2125:	48 d1 e8             	shr    %rax
    2128:	48 01 d0             	add    %rdx,%rax
    212b:	48 c1 e8 1e          	shr    $0x1e,%rax
    212f:	48 89 c2             	mov    %rax,%rdx
    2132:	48 c1 e2 1f          	shl    $0x1f,%rdx
    2136:	48 29 c2             	sub    %rax,%rdx
    2139:	48 29 d6             	sub    %rdx,%rsi
    213c:	48 89 f0             	mov    %rsi,%rax
    213f:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
    2144:	48 ff c8             	dec    %rax
    2147:	e9 b7 fe ff ff       	jmpq   2003 <reset()+0x153>
    214c:	0f 1f 40 00          	nopl   0x0(%rax)
    2150:	48 81 44 24 08 48 13 	addq   $0x1348,0x8(%rsp)
    2157:	00 00 
    2159:	48 83 44 24 20 04    	addq   $0x4,0x20(%rsp)
    215f:	48 81 44 24 10 48 13 	addq   $0x1348,0x10(%rsp)
    2166:	00 00 
    2168:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    216d:	48 39 44 24 28       	cmp    %rax,0x28(%rsp)
    2172:	74 0e                	je     2182 <reset()+0x2d2>
    2174:	4c 63 44 24 44       	movslq 0x44(%rsp),%r8
    2179:	8b 4c 24 40          	mov    0x40(%rsp),%ecx
    217d:	e9 ee fd ff ff       	jmpq   1f70 <reset()+0xc0>
    2182:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
    2187:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    218e:	00 00 
    2190:	0f 85 ff 00 00 00    	jne    2295 <reset()+0x3e5>
    2196:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
    219d:	5b                   	pop    %rbx
    219e:	5d                   	pop    %rbp
    219f:	41 5c                	pop    %r12
    21a1:	41 5d                	pop    %r13
    21a3:	41 5e                	pop    %r14
    21a5:	41 5f                	pop    %r15
    21a7:	c3                   	retq   
    21a8:	48 8d 3d 61 d6 57 03 	lea    0x357d661(%rip),%rdi        # 357f810 <guard variable for reset()::generator>
    21af:	e8 3c f1 ff ff       	callq  12f0 <__cxa_guard_acquire@plt>
    21b4:	85 c0                	test   %eax,%eax
    21b6:	0f 84 47 fd ff ff    	je     1f03 <reset()+0x53>
    21bc:	48 8d 3d 7d d6 57 03 	lea    0x357d67d(%rip),%rdi        # 357f840 <reset()::device>
    21c3:	e8 a8 f0 ff ff       	callq  1270 <std::random_device::_M_getval()@plt>
    21c8:	89 c1                	mov    %eax,%ecx
    21ca:	48 89 c8             	mov    %rcx,%rax
    21cd:	48 ba 05 00 00 00 02 	movabs $0x200000005,%rdx
    21d4:	00 00 00 
    21d7:	48 f7 e2             	mul    %rdx
    21da:	48 89 c8             	mov    %rcx,%rax
    21dd:	48 8d 3d 2c d6 57 03 	lea    0x357d62c(%rip),%rdi        # 357f810 <guard variable for reset()::generator>
    21e4:	48 29 d0             	sub    %rdx,%rax
    21e7:	48 d1 e8             	shr    %rax
    21ea:	48 01 d0             	add    %rdx,%rax
    21ed:	48 c1 e8 1e          	shr    $0x1e,%rax
    21f1:	48 89 c2             	mov    %rax,%rdx
    21f4:	48 c1 e2 1f          	shl    $0x1f,%rdx
    21f8:	48 29 c2             	sub    %rax,%rdx
    21fb:	48 29 d1             	sub    %rdx,%rcx
    21fe:	48 89 c8             	mov    %rcx,%rax
    2201:	ba 01 00 00 00       	mov    $0x1,%edx
    2206:	48 0f 44 c2          	cmove  %rdx,%rax
    220a:	48 89 05 07 d6 57 03 	mov    %rax,0x357d607(%rip)        # 357f818 <reset()::generator>
    2211:	e8 ca ef ff ff       	callq  11e0 <__cxa_guard_release@plt>
    2216:	e9 e8 fc ff ff       	jmpq   1f03 <reset()+0x53>
    221b:	48 8d 5c 24 60       	lea    0x60(%rsp),%rbx
    2220:	b8 75 6c 00 00       	mov    $0x6c75,%eax
    2225:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
    222a:	48 8d 3d 0f d6 57 03 	lea    0x357d60f(%rip),%rdi        # 357f840 <reset()::device>
    2231:	48 89 5c 24 50       	mov    %rbx,0x50(%rsp)
    2236:	c7 44 24 60 64 65 66 	movl   $0x61666564,0x60(%rsp)
    223d:	61 
    223e:	66 89 44 24 64       	mov    %ax,0x64(%rsp)
    2243:	c6 44 24 66 74       	movb   $0x74,0x66(%rsp)
    2248:	48 c7 44 24 58 07 00 	movq   $0x7,0x58(%rsp)
    224f:	00 00 
    2251:	c6 44 24 67 00       	movb   $0x0,0x67(%rsp)
    2256:	e8 55 f0 ff ff       	callq  12b0 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    225b:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
    2260:	48 39 df             	cmp    %rbx,%rdi
    2263:	74 05                	je     226a <reset()+0x3ba>
    2265:	e8 b6 ef ff ff       	callq  1220 <operator delete(void*)@plt>
    226a:	48 8d 15 97 2d 00 00 	lea    0x2d97(%rip),%rdx        # 5008 <__dso_handle>
    2271:	48 8d 35 c8 d5 57 03 	lea    0x357d5c8(%rip),%rsi        # 357f840 <reset()::device>
    2278:	48 8d 3d 51 00 00 00 	lea    0x51(%rip),%rdi        # 22d0 <std::random_device::~random_device()>
    227f:	e8 7c ef ff ff       	callq  1200 <__cxa_atexit@plt>
    2284:	48 8d 3d 95 d5 57 03 	lea    0x357d595(%rip),%rdi        # 357f820 <guard variable for reset()::device>
    228b:	e8 50 ef ff ff       	callq  11e0 <__cxa_guard_release@plt>
    2290:	e9 5f fc ff ff       	jmpq   1ef4 <reset()+0x44>
    2295:	e8 96 ef ff ff       	callq  1230 <__stack_chk_fail@plt>
    229a:	f3 0f 1e fa          	endbr64 
    229e:	48 89 c5             	mov    %rax,%rbp
    22a1:	e9 5a f0 ff ff       	jmpq   1300 <reset() [clone .cold]>
    22a6:	f3 0f 1e fa          	endbr64 
    22aa:	48 89 c5             	mov    %rax,%rbp
    22ad:	e9 65 f0 ff ff       	jmpq   1317 <reset() [clone .cold]+0x17>
    22b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    22b9:	00 00 00 
    22bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000022c0 <std::ctype<char>::do_widen(char) const>:
    22c0:	f3 0f 1e fa          	endbr64 
    22c4:	89 f0                	mov    %esi,%eax
    22c6:	c3                   	retq   
    22c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    22ce:	00 00 

00000000000022d0 <std::random_device::~random_device()>:
    22d0:	f3 0f 1e fa          	endbr64 
    22d4:	48 83 ec 08          	sub    $0x8,%rsp
    22d8:	e8 33 ef ff ff       	callq  1210 <std::random_device::_M_fini()@plt>
    22dd:	48 83 c4 08          	add    $0x8,%rsp
    22e1:	c3                   	retq   
    22e2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    22e9:	00 00 00 
    22ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000022f0 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)>:
    22f0:	f3 0f 1e fa          	endbr64 
    22f4:	41 57                	push   %r15
    22f6:	41 56                	push   %r14
    22f8:	41 55                	push   %r13
    22fa:	49 89 f5             	mov    %rsi,%r13
    22fd:	41 54                	push   %r12
    22ff:	55                   	push   %rbp
    2300:	53                   	push   %rbx
    2301:	48 83 ec 18          	sub    $0x18,%rsp
    2305:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    230c:	00 00 
    230e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    2313:	31 c0                	xor    %eax,%eax
    2315:	4c 63 72 04          	movslq 0x4(%rdx),%r14
    2319:	48 63 02             	movslq (%rdx),%rax
    231c:	49 29 c6             	sub    %rax,%r14
    231f:	48 89 c6             	mov    %rax,%rsi
    2322:	49 81 fe fc ff ff 7f 	cmp    $0x7ffffffc,%r14
    2329:	0f 87 91 00 00 00    	ja     23c0 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)+0xd0>
    232f:	49 ff c6             	inc    %r14
    2332:	b8 fd ff ff 7f       	mov    $0x7ffffffd,%eax
    2337:	31 d2                	xor    %edx,%edx
    2339:	49 f7 f6             	div    %r14
    233c:	49 8b 4d 00          	mov    0x0(%r13),%rcx
    2340:	49 b9 05 00 00 00 02 	movabs $0x200000005,%r9
    2347:	00 00 00 
    234a:	4c 0f af f0          	imul   %rax,%r14
    234e:	49 89 c2             	mov    %rax,%r10
    2351:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2358:	4c 69 c1 a7 41 00 00 	imul   $0x41a7,%rcx,%r8
    235f:	4c 89 c0             	mov    %r8,%rax
    2362:	49 f7 e1             	mul    %r9
    2365:	4c 89 c1             	mov    %r8,%rcx
    2368:	48 29 d1             	sub    %rdx,%rcx
    236b:	48 d1 e9             	shr    %rcx
    236e:	48 01 ca             	add    %rcx,%rdx
    2371:	48 c1 ea 1e          	shr    $0x1e,%rdx
    2375:	48 89 d7             	mov    %rdx,%rdi
    2378:	48 c1 e7 1f          	shl    $0x1f,%rdi
    237c:	48 29 d7             	sub    %rdx,%rdi
    237f:	49 29 f8             	sub    %rdi,%r8
    2382:	49 8d 40 ff          	lea    -0x1(%r8),%rax
    2386:	4c 89 c1             	mov    %r8,%rcx
    2389:	49 39 c6             	cmp    %rax,%r14
    238c:	76 ca                	jbe    2358 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)+0x68>
    238e:	31 d2                	xor    %edx,%edx
    2390:	49 f7 f2             	div    %r10
    2393:	4d 89 45 00          	mov    %r8,0x0(%r13)
    2397:	01 f0                	add    %esi,%eax
    2399:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
    239e:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
    23a5:	00 00 
    23a7:	0f 85 07 01 00 00    	jne    24b4 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)+0x1c4>
    23ad:	48 83 c4 18          	add    $0x18,%rsp
    23b1:	5b                   	pop    %rbx
    23b2:	5d                   	pop    %rbp
    23b3:	41 5c                	pop    %r12
    23b5:	41 5d                	pop    %r13
    23b7:	41 5e                	pop    %r14
    23b9:	41 5f                	pop    %r15
    23bb:	c3                   	retq   
    23bc:	0f 1f 40 00          	nopl   0x0(%rax)
    23c0:	49 81 fe fd ff ff 7f 	cmp    $0x7ffffffd,%r14
    23c7:	0f 84 a3 00 00 00    	je     2470 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)+0x180>
    23cd:	49 89 d7             	mov    %rdx,%r15
    23d0:	4c 89 f2             	mov    %r14,%rdx
    23d3:	48 d1 ea             	shr    %rdx
    23d6:	48 bb 09 00 00 00 02 	movabs $0x8000000200000009,%rbx
    23dd:	00 00 80 
    23e0:	48 89 d0             	mov    %rdx,%rax
    23e3:	48 f7 e3             	mul    %rbx
    23e6:	48 89 fd             	mov    %rdi,%rbp
    23e9:	49 89 e4             	mov    %rsp,%r12
    23ec:	48 89 d3             	mov    %rdx,%rbx
    23ef:	48 c1 eb 1d          	shr    $0x1d,%rbx
    23f3:	4c 89 e2             	mov    %r12,%rdx
    23f6:	4c 89 ee             	mov    %r13,%rsi
    23f9:	48 89 ef             	mov    %rbp,%rdi
    23fc:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
    2403:	89 5c 24 04          	mov    %ebx,0x4(%rsp)
    2407:	e8 e4 fe ff ff       	callq  22f0 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)>
    240c:	49 69 4d 00 a7 41 00 	imul   $0x41a7,0x0(%r13),%rcx
    2413:	00 
    2414:	4c 63 c0             	movslq %eax,%r8
    2417:	48 b8 05 00 00 00 02 	movabs $0x200000005,%rax
    241e:	00 00 00 
    2421:	48 f7 e1             	mul    %rcx
    2424:	48 89 c8             	mov    %rcx,%rax
    2427:	48 29 d0             	sub    %rdx,%rax
    242a:	48 d1 e8             	shr    %rax
    242d:	48 01 c2             	add    %rax,%rdx
    2430:	48 c1 ea 1e          	shr    $0x1e,%rdx
    2434:	48 89 d0             	mov    %rdx,%rax
    2437:	48 c1 e0 1f          	shl    $0x1f,%rax
    243b:	48 29 d0             	sub    %rdx,%rax
    243e:	48 89 ca             	mov    %rcx,%rdx
    2441:	48 29 c2             	sub    %rax,%rdx
    2444:	49 69 c0 fe ff ff 7f 	imul   $0x7ffffffe,%r8,%rax
    244b:	49 89 55 00          	mov    %rdx,0x0(%r13)
    244f:	48 ff ca             	dec    %rdx
    2452:	48 01 d0             	add    %rdx,%rax
    2455:	0f 92 c2             	setb   %dl
    2458:	0f b6 d2             	movzbl %dl,%edx
    245b:	49 39 c6             	cmp    %rax,%r14
    245e:	72 93                	jb     23f3 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)+0x103>
    2460:	48 85 d2             	test   %rdx,%rdx
    2463:	75 8e                	jne    23f3 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)+0x103>
    2465:	41 8b 37             	mov    (%r15),%esi
    2468:	e9 2a ff ff ff       	jmpq   2397 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)+0xa7>
    246d:	0f 1f 00             	nopl   (%rax)
    2470:	49 69 4d 00 a7 41 00 	imul   $0x41a7,0x0(%r13),%rcx
    2477:	00 
    2478:	48 ba 05 00 00 00 02 	movabs $0x200000005,%rdx
    247f:	00 00 00 
    2482:	48 89 c8             	mov    %rcx,%rax
    2485:	48 f7 e2             	mul    %rdx
    2488:	48 89 c8             	mov    %rcx,%rax
    248b:	48 29 d0             	sub    %rdx,%rax
    248e:	48 d1 e8             	shr    %rax
    2491:	48 01 d0             	add    %rdx,%rax
    2494:	48 c1 e8 1e          	shr    $0x1e,%rax
    2498:	48 89 c2             	mov    %rax,%rdx
    249b:	48 c1 e2 1f          	shl    $0x1f,%rdx
    249f:	48 29 c2             	sub    %rax,%rdx
    24a2:	48 29 d1             	sub    %rdx,%rcx
    24a5:	48 89 c8             	mov    %rcx,%rax
    24a8:	49 89 4d 00          	mov    %rcx,0x0(%r13)
    24ac:	48 ff c8             	dec    %rax
    24af:	e9 e3 fe ff ff       	jmpq   2397 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&)+0xa7>
    24b4:	e8 77 ed ff ff       	callq  1230 <__stack_chk_fail@plt>
    24b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000024c0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>:
    24c0:	f3 0f 1e fa          	endbr64 
    24c4:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
    24c8:	49 89 c2             	mov    %rax,%r10
    24cb:	49 c1 ea 3f          	shr    $0x3f,%r10
    24cf:	49 01 c2             	add    %rax,%r10
    24d2:	49 89 d3             	mov    %rdx,%r11
    24d5:	49 d1 fa             	sar    %r10
    24d8:	41 83 e3 01          	and    $0x1,%r11d
    24dc:	4c 39 d6             	cmp    %r10,%rsi
    24df:	0f 8d bb 00 00 00    	jge    25a0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xe0>
    24e5:	49 89 f1             	mov    %rsi,%r9
    24e8:	eb 20                	jmp    250a <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x4a>
    24ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    24f0:	48 ff c8             	dec    %rax
    24f3:	4c 8d 04 c7          	lea    (%rdi,%rax,8),%r8
    24f7:	c4 c1 7b 10 08       	vmovsd (%r8),%xmm1
    24fc:	c4 a1 7b 11 0c cf    	vmovsd %xmm1,(%rdi,%r9,8)
    2502:	49 39 c2             	cmp    %rax,%r10
    2505:	7e 30                	jle    2537 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x77>
    2507:	49 89 c1             	mov    %rax,%r9
    250a:	49 8d 49 01          	lea    0x1(%r9),%rcx
    250e:	48 8d 04 09          	lea    (%rcx,%rcx,1),%rax
    2512:	48 c1 e1 04          	shl    $0x4,%rcx
    2516:	c5 fb 10 4c 0f f8    	vmovsd -0x8(%rdi,%rcx,1),%xmm1
    251c:	4c 8d 04 0f          	lea    (%rdi,%rcx,1),%r8
    2520:	c4 c1 79 2f 08       	vcomisd (%r8),%xmm1
    2525:	77 c9                	ja     24f0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x30>
    2527:	c4 c1 7b 10 08       	vmovsd (%r8),%xmm1
    252c:	c4 a1 7b 11 0c cf    	vmovsd %xmm1,(%rdi,%r9,8)
    2532:	49 39 c2             	cmp    %rax,%r10
    2535:	7f d0                	jg     2507 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x47>
    2537:	4d 85 db             	test   %r11,%r11
    253a:	74 74                	je     25b0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xf0>
    253c:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    2540:	48 89 d1             	mov    %rdx,%rcx
    2543:	48 c1 e9 3f          	shr    $0x3f,%rcx
    2547:	48 01 d1             	add    %rdx,%rcx
    254a:	48 d1 f9             	sar    %rcx
    254d:	48 39 f0             	cmp    %rsi,%rax
    2550:	7f 2f                	jg     2581 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xc1>
    2552:	eb 3c                	jmp    2590 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
    2554:	0f 1f 40 00          	nopl   0x0(%rax)
    2558:	48 8d 51 ff          	lea    -0x1(%rcx),%rdx
    255c:	48 89 d0             	mov    %rdx,%rax
    255f:	48 c1 e8 3f          	shr    $0x3f,%rax
    2563:	48 01 d0             	add    %rdx,%rax
    2566:	c4 c1 7b 10 09       	vmovsd (%r9),%xmm1
    256b:	48 d1 f8             	sar    %rax
    256e:	48 89 c2             	mov    %rax,%rdx
    2571:	c4 c1 7b 11 08       	vmovsd %xmm1,(%r8)
    2576:	48 89 c8             	mov    %rcx,%rax
    2579:	48 39 ce             	cmp    %rcx,%rsi
    257c:	7d 72                	jge    25f0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x130>
    257e:	48 89 d1             	mov    %rdx,%rcx
    2581:	4c 8d 0c cf          	lea    (%rdi,%rcx,8),%r9
    2585:	c4 c1 79 2f 01       	vcomisd (%r9),%xmm0
    258a:	4c 8d 04 c7          	lea    (%rdi,%rax,8),%r8
    258e:	77 c8                	ja     2558 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x98>
    2590:	c4 c1 7b 11 00       	vmovsd %xmm0,(%r8)
    2595:	c3                   	retq   
    2596:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    259d:	00 00 00 
    25a0:	4c 8d 04 f7          	lea    (%rdi,%rsi,8),%r8
    25a4:	4d 85 db             	test   %r11,%r11
    25a7:	75 e7                	jne    2590 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
    25a9:	48 89 f0             	mov    %rsi,%rax
    25ac:	0f 1f 40 00          	nopl   0x0(%rax)
    25b0:	48 83 ea 02          	sub    $0x2,%rdx
    25b4:	48 89 d1             	mov    %rdx,%rcx
    25b7:	48 c1 e9 3f          	shr    $0x3f,%rcx
    25bb:	48 01 ca             	add    %rcx,%rdx
    25be:	48 d1 fa             	sar    %rdx
    25c1:	48 39 c2             	cmp    %rax,%rdx
    25c4:	0f 85 72 ff ff ff    	jne    253c <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x7c>
    25ca:	48 8d 44 00 02       	lea    0x2(%rax,%rax,1),%rax
    25cf:	c5 fb 10 4c c7 f8    	vmovsd -0x8(%rdi,%rax,8),%xmm1
    25d5:	48 ff c8             	dec    %rax
    25d8:	c4 c1 7b 11 08       	vmovsd %xmm1,(%r8)
    25dd:	4c 8d 04 c7          	lea    (%rdi,%rax,8),%r8
    25e1:	e9 56 ff ff ff       	jmpq   253c <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x7c>
    25e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    25ed:	00 00 00 
    25f0:	4d 89 c8             	mov    %r9,%r8
    25f3:	c4 c1 7b 11 00       	vmovsd %xmm0,(%r8)
    25f8:	c3                   	retq   
    25f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002600 <void test<void ()>(void ( const&)(), char const*)>:
    2600:	f3 0f 1e fa          	endbr64 
    2604:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    2609:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    260d:	41 ff 72 f8          	pushq  -0x8(%r10)
    2611:	55                   	push   %rbp
    2612:	48 89 e5             	mov    %rsp,%rbp
    2615:	41 57                	push   %r15
    2617:	41 56                	push   %r14
    2619:	49 89 f6             	mov    %rsi,%r14
    261c:	41 55                	push   %r13
    261e:	49 89 fd             	mov    %rdi,%r13
    2621:	41 54                	push   %r12
    2623:	4c 8d 65 c8          	lea    -0x38(%rbp),%r12
    2627:	41 52                	push   %r10
    2629:	53                   	push   %rbx
    262a:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
    2631:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2638:	00 00 
    263a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    263e:	31 c0                	xor    %eax,%eax
    2640:	e8 6b f8 ff ff       	callq  1eb0 <reset()>
    2645:	41 ff d5             	callq  *%r13
    2648:	41 ff d5             	callq  *%r13
    264b:	41 ff d5             	callq  *%r13
    264e:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2655:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    265c:	48 89 c3             	mov    %rax,%rbx
    265f:	90                   	nop
    2660:	e8 4b eb ff ff       	callq  11b0 <std::chrono::_V2::system_clock::now()@plt>
    2665:	49 89 c7             	mov    %rax,%r15
    2668:	41 ff d5             	callq  *%r13
    266b:	e8 40 eb ff ff       	callq  11b0 <std::chrono::_V2::system_clock::now()@plt>
    2670:	4c 29 f8             	sub    %r15,%rax
    2673:	c5 d9 57 e4          	vxorpd %xmm4,%xmm4,%xmm4
    2677:	c4 e1 db 2a c0       	vcvtsi2sd %rax,%xmm4,%xmm0
    267c:	48 83 c3 08          	add    $0x8,%rbx
    2680:	c5 fb 5e 05 38 0a 00 	vdivsd 0xa38(%rip),%xmm0,%xmm0        # 30c0 <_IO_stdin_used+0xc0>
    2687:	00 
    2688:	c5 fb 11 43 f8       	vmovsd %xmm0,-0x8(%rbx)
    268d:	49 39 dc             	cmp    %rbx,%r12
    2690:	75 ce                	jne    2660 <void test<void ()>(void ( const&)(), char const*)+0x60>
    2692:	c5 fb 10 8d 00 ff ff 	vmovsd -0x100(%rbp),%xmm1
    2699:	ff 
    269a:	48 8b 9d e8 fe ff ff 	mov    -0x118(%rbp),%rbx
    26a1:	be 08 00 00 00       	mov    $0x8,%esi
    26a6:	b8 c8 00 00 00       	mov    $0xc8,%eax
    26ab:	4d 89 e7             	mov    %r12,%r15
    26ae:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
    26b5:	0f 1f 00             	nopl   (%rax)
    26b8:	48 c1 f8 04          	sar    $0x4,%rax
    26bc:	48 8d 04 c3          	lea    (%rbx,%rax,8),%rax
    26c0:	c5 fb 10 53 08       	vmovsd 0x8(%rbx),%xmm2
    26c5:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    26c9:	c4 c1 7b 10 5f f8    	vmovsd -0x8(%r15),%xmm3
    26cf:	c5 f9 2f c2          	vcomisd %xmm2,%xmm0
    26d3:	48 8d 53 08          	lea    0x8(%rbx),%rdx
    26d7:	0f 86 33 03 00 00    	jbe    2a10 <void test<void ()>(void ( const&)(), char const*)+0x410>
    26dd:	c5 f9 2f d8          	vcomisd %xmm0,%xmm3
    26e1:	0f 87 3d 03 00 00    	ja     2a24 <void test<void ()>(void ( const&)(), char const*)+0x424>
    26e7:	c5 f9 2f da          	vcomisd %xmm2,%xmm3
    26eb:	0f 86 0f 04 00 00    	jbe    2b00 <void test<void ()>(void ( const&)(), char const*)+0x500>
    26f1:	c5 fb 11 1b          	vmovsd %xmm3,(%rbx)
    26f5:	c5 f9 28 d1          	vmovapd %xmm1,%xmm2
    26f9:	c4 c1 7b 11 4f f8    	vmovsd %xmm1,-0x8(%r15)
    26ff:	c5 fb 10 03          	vmovsd (%rbx),%xmm0
    2703:	4c 89 f8             	mov    %r15,%rax
    2706:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    270d:	00 00 00 
    2710:	c5 fb 10 0a          	vmovsd (%rdx),%xmm1
    2714:	c5 f9 2f c1          	vcomisd %xmm1,%xmm0
    2718:	77 37                	ja     2751 <void test<void ()>(void ( const&)(), char const*)+0x151>
    271a:	48 83 e8 08          	sub    $0x8,%rax
    271e:	c5 f9 2f d0          	vcomisd %xmm0,%xmm2
    2722:	76 13                	jbe    2737 <void test<void ()>(void ( const&)(), char const*)+0x137>
    2724:	0f 1f 40 00          	nopl   0x0(%rax)
    2728:	c5 fb 10 50 f8       	vmovsd -0x8(%rax),%xmm2
    272d:	48 83 e8 08          	sub    $0x8,%rax
    2731:	c5 f9 2f d0          	vcomisd %xmm0,%xmm2
    2735:	77 f1                	ja     2728 <void test<void ()>(void ( const&)(), char const*)+0x128>
    2737:	48 39 d0             	cmp    %rdx,%rax
    273a:	76 24                	jbe    2760 <void test<void ()>(void ( const&)(), char const*)+0x160>
    273c:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    2740:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    2744:	c5 fb 11 08          	vmovsd %xmm1,(%rax)
    2748:	c5 fb 10 50 f8       	vmovsd -0x8(%rax),%xmm2
    274d:	c5 fb 10 03          	vmovsd (%rbx),%xmm0
    2751:	48 83 c2 08          	add    $0x8,%rdx
    2755:	eb b9                	jmp    2710 <void test<void ()>(void ( const&)(), char const*)+0x110>
    2757:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    275e:	00 00 
    2760:	48 39 fa             	cmp    %rdi,%rdx
    2763:	0f 86 d7 02 00 00    	jbe    2a40 <void test<void ()>(void ( const&)(), char const*)+0x440>
    2769:	49 89 d7             	mov    %rdx,%r15
    276c:	4c 89 f8             	mov    %r15,%rax
    276f:	48 29 d8             	sub    %rbx,%rax
    2772:	c5 f9 28 c8          	vmovapd %xmm0,%xmm1
    2776:	48 83 f8 18          	cmp    $0x18,%rax
    277a:	0f 8e d3 02 00 00    	jle    2a53 <void test<void ()>(void ( const&)(), char const*)+0x453>
    2780:	48 ff ce             	dec    %rsi
    2783:	0f 85 2f ff ff ff    	jne    26b8 <void test<void ()>(void ( const&)(), char const*)+0xb8>
    2789:	48 8d 85 68 ff ff ff 	lea    -0x98(%rbp),%rax
    2790:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    2797:	48 29 d8             	sub    %rbx,%rax
    279a:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    27a1:	48 83 f8 08          	cmp    $0x8,%rax
    27a5:	7e 41                	jle    27e8 <void test<void ()>(void ( const&)(), char const*)+0x1e8>
    27a7:	49 89 c4             	mov    %rax,%r12
    27aa:	49 c1 fc 03          	sar    $0x3,%r12
    27ae:	49 8d 54 24 fe       	lea    -0x2(%r12),%rdx
    27b3:	48 89 d0             	mov    %rdx,%rax
    27b6:	48 c1 e8 3f          	shr    $0x3f,%rax
    27ba:	48 01 d0             	add    %rdx,%rax
    27bd:	48 d1 f8             	sar    %rax
    27c0:	49 89 c5             	mov    %rax,%r13
    27c3:	eb 06                	jmp    27cb <void test<void ()>(void ( const&)(), char const*)+0x1cb>
    27c5:	0f 1f 00             	nopl   (%rax)
    27c8:	49 ff cd             	dec    %r13
    27cb:	c4 a1 7b 10 04 eb    	vmovsd (%rbx,%r13,8),%xmm0
    27d1:	4c 89 e2             	mov    %r12,%rdx
    27d4:	4c 89 ee             	mov    %r13,%rsi
    27d7:	48 89 df             	mov    %rbx,%rdi
    27da:	e8 e1 fc ff ff       	callq  24c0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>
    27df:	4d 85 ed             	test   %r13,%r13
    27e2:	75 e4                	jne    27c8 <void test<void ()>(void ( const&)(), char const*)+0x1c8>
    27e4:	c5 fb 10 0b          	vmovsd (%rbx),%xmm1
    27e8:	4c 3b bd e8 fe ff ff 	cmp    -0x118(%rbp),%r15
    27ef:	76 52                	jbe    2843 <void test<void ()>(void ( const&)(), char const*)+0x243>
    27f1:	4c 8b a5 e0 fe ff ff 	mov    -0x120(%rbp),%r12
    27f8:	4c 8b ad e8 fe ff ff 	mov    -0x118(%rbp),%r13
    27ff:	49 c1 fc 03          	sar    $0x3,%r12
    2803:	eb 0c                	jmp    2811 <void test<void ()>(void ( const&)(), char const*)+0x211>
    2805:	0f 1f 00             	nopl   (%rax)
    2808:	49 83 c5 08          	add    $0x8,%r13
    280c:	4d 39 ef             	cmp    %r13,%r15
    280f:	76 32                	jbe    2843 <void test<void ()>(void ( const&)(), char const*)+0x243>
    2811:	c4 c1 79 2f 4d 00    	vcomisd 0x0(%r13),%xmm1
    2817:	76 ef                	jbe    2808 <void test<void ()>(void ( const&)(), char const*)+0x208>
    2819:	c5 fb 10 0b          	vmovsd (%rbx),%xmm1
    281d:	c4 c1 7b 10 45 00    	vmovsd 0x0(%r13),%xmm0
    2823:	4c 89 e2             	mov    %r12,%rdx
    2826:	c4 c1 7b 11 4d 00    	vmovsd %xmm1,0x0(%r13)
    282c:	31 f6                	xor    %esi,%esi
    282e:	48 89 df             	mov    %rbx,%rdi
    2831:	49 83 c5 08          	add    $0x8,%r13
    2835:	e8 86 fc ff ff       	callq  24c0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>
    283a:	c5 fb 10 0b          	vmovsd (%rbx),%xmm1
    283e:	4d 39 ef             	cmp    %r13,%r15
    2841:	77 ce                	ja     2811 <void test<void ()>(void ( const&)(), char const*)+0x211>
    2843:	c5 fb 10 85 60 ff ff 	vmovsd -0xa0(%rbp),%xmm0
    284a:	ff 
    284b:	c5 fb 11 03          	vmovsd %xmm0,(%rbx)
    284f:	c5 fb 11 8d 60 ff ff 	vmovsd %xmm1,-0xa0(%rbp)
    2856:	ff 
    2857:	48 8b 05 e2 27 00 00 	mov    0x27e2(%rip),%rax        # 5040 <std::cout@@GLIBCXX_3.4>
    285e:	4c 8d 25 db 27 00 00 	lea    0x27db(%rip),%r12        # 5040 <std::cout@@GLIBCXX_3.4>
    2865:	48 8b 50 e8          	mov    -0x18(%rax),%rdx
    2869:	49 c7 44 14 10 19 00 	movq   $0x19,0x10(%r12,%rdx,1)
    2870:	00 00 
    2872:	4d 85 f6             	test   %r14,%r14
    2875:	0f 84 d5 02 00 00    	je     2b50 <void test<void ()>(void ( const&)(), char const*)+0x550>
    287b:	4c 89 f7             	mov    %r14,%rdi
    287e:	e8 3d e9 ff ff       	callq  11c0 <strlen@plt>
    2883:	48 89 c2             	mov    %rax,%rdx
    2886:	4c 89 f6             	mov    %r14,%rsi
    2889:	4c 89 e7             	mov    %r12,%rdi
    288c:	e8 af e9 ff ff       	callq  1240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    2891:	48 8d b5 ff fe ff ff 	lea    -0x101(%rbp),%rsi
    2898:	ba 01 00 00 00       	mov    $0x1,%edx
    289d:	48 8d 3d 9c 27 00 00 	lea    0x279c(%rip),%rdi        # 5040 <std::cout@@GLIBCXX_3.4>
    28a4:	c6 85 ff fe ff ff 3a 	movb   $0x3a,-0x101(%rbp)
    28ab:	e8 90 e9 ff ff       	callq  1240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    28b0:	49 89 c4             	mov    %rax,%r12
    28b3:	48 8d 35 4a 07 00 00 	lea    0x74a(%rip),%rsi        # 3004 <_IO_stdin_used+0x4>
    28ba:	ba 08 00 00 00       	mov    $0x8,%edx
    28bf:	48 89 c7             	mov    %rax,%rdi
    28c2:	e8 79 e9 ff ff       	callq  1240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    28c7:	49 8b 0c 24          	mov    (%r12),%rcx
    28cb:	c5 fb 10 85 60 ff ff 	vmovsd -0xa0(%rbp),%xmm0
    28d2:	ff 
    28d3:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    28d7:	4c 89 e7             	mov    %r12,%rdi
    28da:	4c 01 e2             	add    %r12,%rdx
    28dd:	8b 42 18             	mov    0x18(%rdx),%eax
    28e0:	48 c7 42 08 03 00 00 	movq   $0x3,0x8(%rdx)
    28e7:	00 
    28e8:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    28ed:	83 c8 04             	or     $0x4,%eax
    28f0:	89 42 18             	mov    %eax,0x18(%rdx)
    28f3:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    28f7:	49 c7 44 04 10 07 00 	movq   $0x7,0x10(%r12,%rax,1)
    28fe:	00 00 
    2900:	e8 8b e9 ff ff       	callq  1290 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    2905:	49 89 c4             	mov    %rax,%r12
    2908:	ba 02 00 00 00       	mov    $0x2,%edx
    290d:	48 8d 35 f9 06 00 00 	lea    0x6f9(%rip),%rsi        # 300d <_IO_stdin_used+0xd>
    2914:	48 89 c7             	mov    %rax,%rdi
    2917:	e8 24 e9 ff ff       	callq  1240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    291c:	ba 0b 00 00 00       	mov    $0xb,%edx
    2921:	48 8d 35 e8 06 00 00 	lea    0x6e8(%rip),%rsi        # 3010 <_IO_stdin_used+0x10>
    2928:	4c 89 e7             	mov    %r12,%rdi
    292b:	e8 10 e9 ff ff       	callq  1240 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    2930:	48 8d 05 29 28 00 00 	lea    0x2829(%rip),%rax        # 5160 <c>
    2937:	48 8d 90 a0 58 00 00 	lea    0x58a0(%rax),%rdx
    293e:	c5 f1 ef c9          	vpxor  %xmm1,%xmm1,%xmm1
    2942:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2948:	c5 f5 fe 08          	vpaddd (%rax),%ymm1,%ymm1
    294c:	48 83 c0 20          	add    $0x20,%rax
    2950:	48 39 c2             	cmp    %rax,%rdx
    2953:	75 f3                	jne    2948 <void test<void ()>(void ( const&)(), char const*)+0x348>
    2955:	c4 e3 7d 39 c8 01    	vextracti128 $0x1,%ymm1,%xmm0
    295b:	c5 f9 fe c1          	vpaddd %xmm1,%xmm0,%xmm0
    295f:	c5 f1 73 d8 08       	vpsrldq $0x8,%xmm0,%xmm1
    2964:	c5 f9 fe c1          	vpaddd %xmm1,%xmm0,%xmm0
    2968:	c5 f1 73 d8 04       	vpsrldq $0x4,%xmm0,%xmm1
    296d:	c5 f9 fe c1          	vpaddd %xmm1,%xmm0,%xmm0
    2971:	c5 f9 7e c6          	vmovd  %xmm0,%esi
    2975:	03 35 85 80 00 00    	add    0x8085(%rip),%esi        # aa00 <c+0x58a0>
    297b:	03 35 83 80 00 00    	add    0x8083(%rip),%esi        # aa04 <c+0x58a4>
    2981:	03 35 81 80 00 00    	add    0x8081(%rip),%esi        # aa08 <c+0x58a8>
    2987:	03 35 7f 80 00 00    	add    0x807f(%rip),%esi        # aa0c <c+0x58ac>
    298d:	03 35 7d 80 00 00    	add    0x807d(%rip),%esi        # aa10 <c+0x58b0>
    2993:	03 35 7b 80 00 00    	add    0x807b(%rip),%esi        # aa14 <c+0x58b4>
    2999:	4c 89 e7             	mov    %r12,%rdi
    299c:	c5 f8 77             	vzeroupper 
    299f:	e8 2c e9 ff ff       	callq  12d0 <std::ostream::operator<<(int)@plt>
    29a4:	49 89 c4             	mov    %rax,%r12
    29a7:	48 8b 00             	mov    (%rax),%rax
    29aa:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    29ae:	4d 8b ac 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%r13
    29b5:	00 
    29b6:	4d 85 ed             	test   %r13,%r13
    29b9:	0f 84 b9 01 00 00    	je     2b78 <void test<void ()>(void ( const&)(), char const*)+0x578>
    29bf:	41 80 7d 38 00       	cmpb   $0x0,0x38(%r13)
    29c4:	0f 84 4e 01 00 00    	je     2b18 <void test<void ()>(void ( const&)(), char const*)+0x518>
    29ca:	41 0f be 75 43       	movsbl 0x43(%r13),%esi
    29cf:	4c 89 e7             	mov    %r12,%rdi
    29d2:	e8 c9 e7 ff ff       	callq  11a0 <std::ostream::put(char)@plt>
    29d7:	48 89 c7             	mov    %rax,%rdi
    29da:	e8 11 e8 ff ff       	callq  11f0 <std::ostream::flush()@plt>
    29df:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    29e3:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    29ea:	00 00 
    29ec:	0f 85 81 01 00 00    	jne    2b73 <void test<void ()>(void ( const&)(), char const*)+0x573>
    29f2:	48 81 c4 00 01 00 00 	add    $0x100,%rsp
    29f9:	5b                   	pop    %rbx
    29fa:	41 5a                	pop    %r10
    29fc:	41 5c                	pop    %r12
    29fe:	41 5d                	pop    %r13
    2a00:	41 5e                	pop    %r14
    2a02:	41 5f                	pop    %r15
    2a04:	5d                   	pop    %rbp
    2a05:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    2a09:	c3                   	retq   
    2a0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2a10:	c5 f9 2f da          	vcomisd %xmm2,%xmm3
    2a14:	0f 87 e6 00 00 00    	ja     2b00 <void test<void ()>(void ( const&)(), char const*)+0x500>
    2a1a:	c5 f9 2f d8          	vcomisd %xmm0,%xmm3
    2a1e:	0f 87 cd fc ff ff    	ja     26f1 <void test<void ()>(void ( const&)(), char const*)+0xf1>
    2a24:	c5 fb 11 03          	vmovsd %xmm0,(%rbx)
    2a28:	c5 fb 11 08          	vmovsd %xmm1,(%rax)
    2a2c:	c4 c1 7b 10 57 f8    	vmovsd -0x8(%r15),%xmm2
    2a32:	e9 c8 fc ff ff       	jmpq   26ff <void test<void ()>(void ( const&)(), char const*)+0xff>
    2a37:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    2a3e:	00 00 
    2a40:	48 89 d3             	mov    %rdx,%rbx
    2a43:	4c 89 f8             	mov    %r15,%rax
    2a46:	48 29 d8             	sub    %rbx,%rax
    2a49:	48 83 f8 18          	cmp    $0x18,%rax
    2a4d:	0f 8f 2d fd ff ff    	jg     2780 <void test<void ()>(void ( const&)(), char const*)+0x180>
    2a53:	4c 39 fb             	cmp    %r15,%rbx
    2a56:	0f 84 fb fd ff ff    	je     2857 <void test<void ()>(void ( const&)(), char const*)+0x257>
    2a5c:	4c 8d 6b 08          	lea    0x8(%rbx),%r13
    2a60:	4d 39 ef             	cmp    %r13,%r15
    2a63:	0f 84 ee fd ff ff    	je     2857 <void test<void ()>(void ( const&)(), char const*)+0x257>
    2a69:	41 bc 08 00 00 00    	mov    $0x8,%r12d
    2a6f:	eb 43                	jmp    2ab4 <void test<void ()>(void ( const&)(), char const*)+0x4b4>
    2a71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2a78:	49 39 dd             	cmp    %rbx,%r13
    2a7b:	74 22                	je     2a9f <void test<void ()>(void ( const&)(), char const*)+0x49f>
    2a7d:	4c 89 ea             	mov    %r13,%rdx
    2a80:	48 29 da             	sub    %rbx,%rdx
    2a83:	4a 8d 3c 23          	lea    (%rbx,%r12,1),%rdi
    2a87:	48 89 de             	mov    %rbx,%rsi
    2a8a:	c5 fb 11 85 e8 fe ff 	vmovsd %xmm0,-0x118(%rbp)
    2a91:	ff 
    2a92:	e8 09 e8 ff ff       	callq  12a0 <memmove@plt>
    2a97:	c5 fb 10 85 e8 fe ff 	vmovsd -0x118(%rbp),%xmm0
    2a9e:	ff 
    2a9f:	c5 fb 11 03          	vmovsd %xmm0,(%rbx)
    2aa3:	49 83 c5 08          	add    $0x8,%r13
    2aa7:	4d 39 ef             	cmp    %r13,%r15
    2aaa:	0f 84 a7 fd ff ff    	je     2857 <void test<void ()>(void ( const&)(), char const*)+0x257>
    2ab0:	c5 fb 10 0b          	vmovsd (%rbx),%xmm1
    2ab4:	c4 c1 7b 10 45 00    	vmovsd 0x0(%r13),%xmm0
    2aba:	c5 f9 2f c8          	vcomisd %xmm0,%xmm1
    2abe:	77 b8                	ja     2a78 <void test<void ()>(void ( const&)(), char const*)+0x478>
    2ac0:	c4 c1 7b 10 4d f8    	vmovsd -0x8(%r13),%xmm1
    2ac6:	49 8d 45 f8          	lea    -0x8(%r13),%rax
    2aca:	c5 f9 2f c8          	vcomisd %xmm0,%xmm1
    2ace:	0f 86 93 00 00 00    	jbe    2b67 <void test<void ()>(void ( const&)(), char const*)+0x567>
    2ad4:	0f 1f 40 00          	nopl   0x0(%rax)
    2ad8:	c5 fb 10 08          	vmovsd (%rax),%xmm1
    2adc:	48 89 c2             	mov    %rax,%rdx
    2adf:	c5 fb 11 48 08       	vmovsd %xmm1,0x8(%rax)
    2ae4:	c5 fb 10 48 f8       	vmovsd -0x8(%rax),%xmm1
    2ae9:	48 83 e8 08          	sub    $0x8,%rax
    2aed:	c5 f9 2f c8          	vcomisd %xmm0,%xmm1
    2af1:	77 e5                	ja     2ad8 <void test<void ()>(void ( const&)(), char const*)+0x4d8>
    2af3:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    2af7:	eb aa                	jmp    2aa3 <void test<void ()>(void ( const&)(), char const*)+0x4a3>
    2af9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2b00:	c5 fb 11 13          	vmovsd %xmm2,(%rbx)
    2b04:	c5 fb 11 4b 08       	vmovsd %xmm1,0x8(%rbx)
    2b09:	c4 c1 7b 10 57 f8    	vmovsd -0x8(%r15),%xmm2
    2b0f:	e9 eb fb ff ff       	jmpq   26ff <void test<void ()>(void ( const&)(), char const*)+0xff>
    2b14:	0f 1f 40 00          	nopl   0x0(%rax)
    2b18:	4c 89 ef             	mov    %r13,%rdi
    2b1b:	e8 30 e7 ff ff       	callq  1250 <std::ctype<char>::_M_widen_init() const@plt>
    2b20:	49 8b 45 00          	mov    0x0(%r13),%rax
    2b24:	48 8d 15 95 f7 ff ff 	lea    -0x86b(%rip),%rdx        # 22c0 <std::ctype<char>::do_widen(char) const>
    2b2b:	48 8b 40 30          	mov    0x30(%rax),%rax
    2b2f:	be 0a 00 00 00       	mov    $0xa,%esi
    2b34:	48 39 d0             	cmp    %rdx,%rax
    2b37:	0f 84 92 fe ff ff    	je     29cf <void test<void ()>(void ( const&)(), char const*)+0x3cf>
    2b3d:	4c 89 ef             	mov    %r13,%rdi
    2b40:	ff d0                	callq  *%rax
    2b42:	0f be f0             	movsbl %al,%esi
    2b45:	e9 85 fe ff ff       	jmpq   29cf <void test<void ()>(void ( const&)(), char const*)+0x3cf>
    2b4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2b50:	48 8b 78 e8          	mov    -0x18(%rax),%rdi
    2b54:	4c 01 e7             	add    %r12,%rdi
    2b57:	8b 77 20             	mov    0x20(%rdi),%esi
    2b5a:	83 ce 01             	or     $0x1,%esi
    2b5d:	e8 5e e7 ff ff       	callq  12c0 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    2b62:	e9 2a fd ff ff       	jmpq   2891 <void test<void ()>(void ( const&)(), char const*)+0x291>
    2b67:	4c 89 ea             	mov    %r13,%rdx
    2b6a:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    2b6e:	e9 30 ff ff ff       	jmpq   2aa3 <void test<void ()>(void ( const&)(), char const*)+0x4a3>
    2b73:	e8 b8 e6 ff ff       	callq  1230 <__stack_chk_fail@plt>
    2b78:	e8 e3 e6 ff ff       	callq  1260 <std::__throw_bad_cast()@plt>
    2b7d:	0f 1f 00             	nopl   (%rax)

0000000000002b80 <__libc_csu_init>:
    2b80:	f3 0f 1e fa          	endbr64 
    2b84:	41 57                	push   %r15
    2b86:	4c 8d 3d 53 21 00 00 	lea    0x2153(%rip),%r15        # 4ce0 <__frame_dummy_init_array_entry>
    2b8d:	41 56                	push   %r14
    2b8f:	49 89 d6             	mov    %rdx,%r14
    2b92:	41 55                	push   %r13
    2b94:	49 89 f5             	mov    %rsi,%r13
    2b97:	41 54                	push   %r12
    2b99:	41 89 fc             	mov    %edi,%r12d
    2b9c:	55                   	push   %rbp
    2b9d:	48 8d 2d 4c 21 00 00 	lea    0x214c(%rip),%rbp        # 4cf0 <__do_global_dtors_aux_fini_array_entry>
    2ba4:	53                   	push   %rbx
    2ba5:	4c 29 fd             	sub    %r15,%rbp
    2ba8:	48 83 ec 08          	sub    $0x8,%rsp
    2bac:	e8 4f e4 ff ff       	callq  1000 <_init>
    2bb1:	48 c1 fd 03          	sar    $0x3,%rbp
    2bb5:	74 1f                	je     2bd6 <__libc_csu_init+0x56>
    2bb7:	31 db                	xor    %ebx,%ebx
    2bb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2bc0:	4c 89 f2             	mov    %r14,%rdx
    2bc3:	4c 89 ee             	mov    %r13,%rsi
    2bc6:	44 89 e7             	mov    %r12d,%edi
    2bc9:	41 ff 14 df          	callq  *(%r15,%rbx,8)
    2bcd:	48 83 c3 01          	add    $0x1,%rbx
    2bd1:	48 39 dd             	cmp    %rbx,%rbp
    2bd4:	75 ea                	jne    2bc0 <__libc_csu_init+0x40>
    2bd6:	48 83 c4 08          	add    $0x8,%rsp
    2bda:	5b                   	pop    %rbx
    2bdb:	5d                   	pop    %rbp
    2bdc:	41 5c                	pop    %r12
    2bde:	41 5d                	pop    %r13
    2be0:	41 5e                	pop    %r14
    2be2:	41 5f                	pop    %r15
    2be4:	c3                   	retq   
    2be5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2bec:	00 00 00 00 

0000000000002bf0 <__libc_csu_fini>:
    2bf0:	f3 0f 1e fa          	endbr64 
    2bf4:	c3                   	retq   

Desensamblado de la secci贸n .fini:

0000000000002bf8 <_fini>:
    2bf8:	f3 0f 1e fa          	endbr64 
    2bfc:	48 83 ec 08          	sub    $0x8,%rsp
    2c00:	48 83 c4 08          	add    $0x8,%rsp
    2c04:	c3                   	retq   
