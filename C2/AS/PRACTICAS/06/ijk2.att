
ijk2:     formato del fichero elf64-x86-64


Desensamblado de la secci贸n .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 d9 7f 00 00 	mov    0x7fd9(%rip),%rax        # 8fe8 <__gmon_start__>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	callq  *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	retq   

Desensamblado de la secci贸n .plt:

0000000000001020 <.plt>:
    1020:	ff 35 ca 7e 00 00    	pushq  0x7eca(%rip)        # 8ef0 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	f2 ff 25 cb 7e 00 00 	bnd jmpq *0x7ecb(%rip)        # 8ef8 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	0f 1f 00             	nopl   (%rax)
    1030:	f3 0f 1e fa          	endbr64 
    1034:	68 00 00 00 00       	pushq  $0x0
    1039:	f2 e9 e1 ff ff ff    	bnd jmpq 1020 <.plt>
    103f:	90                   	nop
    1040:	f3 0f 1e fa          	endbr64 
    1044:	68 01 00 00 00       	pushq  $0x1
    1049:	f2 e9 d1 ff ff ff    	bnd jmpq 1020 <.plt>
    104f:	90                   	nop
    1050:	f3 0f 1e fa          	endbr64 
    1054:	68 02 00 00 00       	pushq  $0x2
    1059:	f2 e9 c1 ff ff ff    	bnd jmpq 1020 <.plt>
    105f:	90                   	nop
    1060:	f3 0f 1e fa          	endbr64 
    1064:	68 03 00 00 00       	pushq  $0x3
    1069:	f2 e9 b1 ff ff ff    	bnd jmpq 1020 <.plt>
    106f:	90                   	nop
    1070:	f3 0f 1e fa          	endbr64 
    1074:	68 04 00 00 00       	pushq  $0x4
    1079:	f2 e9 a1 ff ff ff    	bnd jmpq 1020 <.plt>
    107f:	90                   	nop
    1080:	f3 0f 1e fa          	endbr64 
    1084:	68 05 00 00 00       	pushq  $0x5
    1089:	f2 e9 91 ff ff ff    	bnd jmpq 1020 <.plt>
    108f:	90                   	nop
    1090:	f3 0f 1e fa          	endbr64 
    1094:	68 06 00 00 00       	pushq  $0x6
    1099:	f2 e9 81 ff ff ff    	bnd jmpq 1020 <.plt>
    109f:	90                   	nop
    10a0:	f3 0f 1e fa          	endbr64 
    10a4:	68 07 00 00 00       	pushq  $0x7
    10a9:	f2 e9 71 ff ff ff    	bnd jmpq 1020 <.plt>
    10af:	90                   	nop
    10b0:	f3 0f 1e fa          	endbr64 
    10b4:	68 08 00 00 00       	pushq  $0x8
    10b9:	f2 e9 61 ff ff ff    	bnd jmpq 1020 <.plt>
    10bf:	90                   	nop
    10c0:	f3 0f 1e fa          	endbr64 
    10c4:	68 09 00 00 00       	pushq  $0x9
    10c9:	f2 e9 51 ff ff ff    	bnd jmpq 1020 <.plt>
    10cf:	90                   	nop
    10d0:	f3 0f 1e fa          	endbr64 
    10d4:	68 0a 00 00 00       	pushq  $0xa
    10d9:	f2 e9 41 ff ff ff    	bnd jmpq 1020 <.plt>
    10df:	90                   	nop
    10e0:	f3 0f 1e fa          	endbr64 
    10e4:	68 0b 00 00 00       	pushq  $0xb
    10e9:	f2 e9 31 ff ff ff    	bnd jmpq 1020 <.plt>
    10ef:	90                   	nop
    10f0:	f3 0f 1e fa          	endbr64 
    10f4:	68 0c 00 00 00       	pushq  $0xc
    10f9:	f2 e9 21 ff ff ff    	bnd jmpq 1020 <.plt>
    10ff:	90                   	nop
    1100:	f3 0f 1e fa          	endbr64 
    1104:	68 0d 00 00 00       	pushq  $0xd
    1109:	f2 e9 11 ff ff ff    	bnd jmpq 1020 <.plt>
    110f:	90                   	nop
    1110:	f3 0f 1e fa          	endbr64 
    1114:	68 0e 00 00 00       	pushq  $0xe
    1119:	f2 e9 01 ff ff ff    	bnd jmpq 1020 <.plt>
    111f:	90                   	nop
    1120:	f3 0f 1e fa          	endbr64 
    1124:	68 0f 00 00 00       	pushq  $0xf
    1129:	f2 e9 f1 fe ff ff    	bnd jmpq 1020 <.plt>
    112f:	90                   	nop
    1130:	f3 0f 1e fa          	endbr64 
    1134:	68 10 00 00 00       	pushq  $0x10
    1139:	f2 e9 e1 fe ff ff    	bnd jmpq 1020 <.plt>
    113f:	90                   	nop
    1140:	f3 0f 1e fa          	endbr64 
    1144:	68 11 00 00 00       	pushq  $0x11
    1149:	f2 e9 d1 fe ff ff    	bnd jmpq 1020 <.plt>
    114f:	90                   	nop
    1150:	f3 0f 1e fa          	endbr64 
    1154:	68 12 00 00 00       	pushq  $0x12
    1159:	f2 e9 c1 fe ff ff    	bnd jmpq 1020 <.plt>
    115f:	90                   	nop
    1160:	f3 0f 1e fa          	endbr64 
    1164:	68 13 00 00 00       	pushq  $0x13
    1169:	f2 e9 b1 fe ff ff    	bnd jmpq 1020 <.plt>
    116f:	90                   	nop
    1170:	f3 0f 1e fa          	endbr64 
    1174:	68 14 00 00 00       	pushq  $0x14
    1179:	f2 e9 a1 fe ff ff    	bnd jmpq 1020 <.plt>
    117f:	90                   	nop
    1180:	f3 0f 1e fa          	endbr64 
    1184:	68 15 00 00 00       	pushq  $0x15
    1189:	f2 e9 91 fe ff ff    	bnd jmpq 1020 <.plt>
    118f:	90                   	nop
    1190:	f3 0f 1e fa          	endbr64 
    1194:	68 16 00 00 00       	pushq  $0x16
    1199:	f2 e9 81 fe ff ff    	bnd jmpq 1020 <.plt>
    119f:	90                   	nop
    11a0:	f3 0f 1e fa          	endbr64 
    11a4:	68 17 00 00 00       	pushq  $0x17
    11a9:	f2 e9 71 fe ff ff    	bnd jmpq 1020 <.plt>
    11af:	90                   	nop
    11b0:	f3 0f 1e fa          	endbr64 
    11b4:	68 18 00 00 00       	pushq  $0x18
    11b9:	f2 e9 61 fe ff ff    	bnd jmpq 1020 <.plt>
    11bf:	90                   	nop

Desensamblado de la secci贸n .plt.got:

00000000000011c0 <__cxa_finalize@plt>:
    11c0:	f3 0f 1e fa          	endbr64 
    11c4:	f2 ff 25 fd 7d 00 00 	bnd jmpq *0x7dfd(%rip)        # 8fc8 <__cxa_finalize@GLIBC_2.2.5>
    11cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la secci贸n .plt.sec:

00000000000011d0 <std::chrono::_V2::system_clock::now()@plt>:
    11d0:	f3 0f 1e fa          	endbr64 
    11d4:	f2 ff 25 25 7d 00 00 	bnd jmpq *0x7d25(%rip)        # 8f00 <std::chrono::_V2::system_clock::now()@GLIBCXX_3.4.19>
    11db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011e0 <std::runtime_error::runtime_error(char const*)@plt>:
    11e0:	f3 0f 1e fa          	endbr64 
    11e4:	f2 ff 25 1d 7d 00 00 	bnd jmpq *0x7d1d(%rip)        # 8f08 <std::runtime_error::runtime_error(char const*)@GLIBCXX_3.4.21>
    11eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011f0 <strlen@plt>:
    11f0:	f3 0f 1e fa          	endbr64 
    11f4:	f2 ff 25 15 7d 00 00 	bnd jmpq *0x7d15(%rip)        # 8f10 <strlen@GLIBC_2.2.5>
    11fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001200 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>:
    1200:	f3 0f 1e fa          	endbr64 
    1204:	f2 ff 25 0d 7d 00 00 	bnd jmpq *0x7d0d(%rip)        # 8f18 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
    120b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001210 <__cxa_allocate_exception@plt>:
    1210:	f3 0f 1e fa          	endbr64 
    1214:	f2 ff 25 05 7d 00 00 	bnd jmpq *0x7d05(%rip)        # 8f20 <__cxa_allocate_exception@CXXABI_1.3>
    121b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001220 <memset@plt>:
    1220:	f3 0f 1e fa          	endbr64 
    1224:	f2 ff 25 fd 7c 00 00 	bnd jmpq *0x7cfd(%rip)        # 8f28 <memset@GLIBC_2.2.5>
    122b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001230 <__assert_fail@plt>:
    1230:	f3 0f 1e fa          	endbr64 
    1234:	f2 ff 25 f5 7c 00 00 	bnd jmpq *0x7cf5(%rip)        # 8f30 <__assert_fail@GLIBC_2.2.5>
    123b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001240 <__multf3@plt>:
    1240:	f3 0f 1e fa          	endbr64 
    1244:	f2 ff 25 ed 7c 00 00 	bnd jmpq *0x7ced(%rip)        # 8f38 <__multf3@GCC_4.3.0>
    124b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001250 <std::__throw_logic_error(char const*)@plt>:
    1250:	f3 0f 1e fa          	endbr64 
    1254:	f2 ff 25 e5 7c 00 00 	bnd jmpq *0x7ce5(%rip)        # 8f40 <std::__throw_logic_error(char const*)@GLIBCXX_3.4>
    125b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001260 <__cxa_free_exception@plt>:
    1260:	f3 0f 1e fa          	endbr64 
    1264:	f2 ff 25 dd 7c 00 00 	bnd jmpq *0x7cdd(%rip)        # 8f48 <__cxa_free_exception@CXXABI_1.3>
    126b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001270 <memcpy@plt>:
    1270:	f3 0f 1e fa          	endbr64 
    1274:	f2 ff 25 d5 7c 00 00 	bnd jmpq *0x7cd5(%rip)        # 8f50 <memcpy@GLIBC_2.14>
    127b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001280 <__cxa_demangle@plt>:
    1280:	f3 0f 1e fa          	endbr64 
    1284:	f2 ff 25 cd 7c 00 00 	bnd jmpq *0x7ccd(%rip)        # 8f58 <__cxa_demangle@CXXABI_1.3>
    128b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001290 <__cxa_atexit@plt>:
    1290:	f3 0f 1e fa          	endbr64 
    1294:	f2 ff 25 c5 7c 00 00 	bnd jmpq *0x7cc5(%rip)        # 8f60 <__cxa_atexit@GLIBC_2.2.5>
    129b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012a0 <__stack_chk_fail@plt>:
    12a0:	f3 0f 1e fa          	endbr64 
    12a4:	f2 ff 25 bd 7c 00 00 	bnd jmpq *0x7cbd(%rip)        # 8f68 <__stack_chk_fail@GLIBC_2.4>
    12ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012b0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>:
    12b0:	f3 0f 1e fa          	endbr64 
    12b4:	f2 ff 25 b5 7c 00 00 	bnd jmpq *0x7cb5(%rip)        # 8f70 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@GLIBCXX_3.4.9>
    12bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012c0 <free@plt>:
    12c0:	f3 0f 1e fa          	endbr64 
    12c4:	f2 ff 25 ad 7c 00 00 	bnd jmpq *0x7cad(%rip)        # 8f78 <free@GLIBC_2.2.5>
    12cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012d0 <__addtf3@plt>:
    12d0:	f3 0f 1e fa          	endbr64 
    12d4:	f2 ff 25 a5 7c 00 00 	bnd jmpq *0x7ca5(%rip)        # 8f80 <__addtf3@GCC_4.3.0>
    12db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012e0 <std::ios_base::Init::Init()@plt>:
    12e0:	f3 0f 1e fa          	endbr64 
    12e4:	f2 ff 25 9d 7c 00 00 	bnd jmpq *0x7c9d(%rip)        # 8f88 <std::ios_base::Init::Init()@GLIBCXX_3.4>
    12eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012f0 <std::ostream& std::ostream::_M_insert<double>(double)@plt>:
    12f0:	f3 0f 1e fa          	endbr64 
    12f4:	f2 ff 25 95 7c 00 00 	bnd jmpq *0x7c95(%rip)        # 8f90 <std::ostream& std::ostream::_M_insert<double>(double)@GLIBCXX_3.4.9>
    12fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001300 <memmove@plt>:
    1300:	f3 0f 1e fa          	endbr64 
    1304:	f2 ff 25 8d 7c 00 00 	bnd jmpq *0x7c8d(%rip)        # 8f98 <memmove@GLIBC_2.2.5>
    130b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001310 <__eqtf2@plt>:
    1310:	f3 0f 1e fa          	endbr64 
    1314:	f2 ff 25 85 7c 00 00 	bnd jmpq *0x7c85(%rip)        # 8fa0 <__eqtf2@GCC_4.3.0>
    131b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001320 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>:
    1320:	f3 0f 1e fa          	endbr64 
    1324:	f2 ff 25 7d 7c 00 00 	bnd jmpq *0x7c7d(%rip)        # 8fa8 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@GLIBCXX_3.4>
    132b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001330 <__cxa_throw@plt>:
    1330:	f3 0f 1e fa          	endbr64 
    1334:	f2 ff 25 75 7c 00 00 	bnd jmpq *0x7c75(%rip)        # 8fb0 <__cxa_throw@CXXABI_1.3>
    133b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001340 <_Unwind_Resume@plt>:
    1340:	f3 0f 1e fa          	endbr64 
    1344:	f2 ff 25 6d 7c 00 00 	bnd jmpq *0x7c6d(%rip)        # 8fb8 <_Unwind_Resume@GCC_3.0>
    134b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>:
    1350:	f3 0f 1e fa          	endbr64 
    1354:	f2 ff 25 65 7c 00 00 	bnd jmpq *0x7c65(%rip)        # 8fc0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@GLIBCXX_3.4.21>
    135b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la secci贸n .text:

0000000000001360 <ec::demangle[abi:cxx11](char const*) [clone .cold]>:
    1360:	bf 10 00 00 00       	mov    $0x10,%edi
    1365:	e8 a6 fe ff ff       	callq  1210 <__cxa_allocate_exception@plt>
    136a:	48 89 c7             	mov    %rax,%rdi
    136d:	48 8d 35 c4 4c 00 00 	lea    0x4cc4(%rip),%rsi        # 6038 <_IO_stdin_used+0x38>
    1374:	49 89 c5             	mov    %rax,%r13
    1377:	e8 64 fe ff ff       	callq  11e0 <std::runtime_error::runtime_error(char const*)@plt>
    137c:	48 8b 15 4d 7c 00 00 	mov    0x7c4d(%rip),%rdx        # 8fd0 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
    1383:	48 8d 35 36 79 00 00 	lea    0x7936(%rip),%rsi        # 8cc0 <typeinfo for std::runtime_error@@GLIBCXX_3.4>
    138a:	4c 89 ef             	mov    %r13,%rdi
    138d:	e8 9e ff ff ff       	callq  1330 <__cxa_throw@plt>
    1392:	f3 0f 1e fa          	endbr64 
    1396:	49 89 c4             	mov    %rax,%r12
    1399:	c5 f8 77             	vzeroupper 
    139c:	eb 12                	jmp    13b0 <ec::demangle[abi:cxx11](char const*) [clone .cold]+0x50>
    139e:	f3 0f 1e fa          	endbr64 
    13a2:	49 89 c4             	mov    %rax,%r12
    13a5:	4c 89 ef             	mov    %r13,%rdi
    13a8:	c5 f8 77             	vzeroupper 
    13ab:	e8 b0 fe ff ff       	callq  1260 <__cxa_free_exception@plt>
    13b0:	48 85 ed             	test   %rbp,%rbp
    13b3:	74 08                	je     13bd <ec::demangle[abi:cxx11](char const*) [clone .cold]+0x5d>
    13b5:	48 89 ef             	mov    %rbp,%rdi
    13b8:	e8 03 ff ff ff       	callq  12c0 <free@plt>
    13bd:	4c 89 e7             	mov    %r12,%rdi
    13c0:	e8 7b ff ff ff       	callq  1340 <_Unwind_Resume@plt>
    13c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    13cc:	00 00 00 
    13cf:	90                   	nop

00000000000013d0 <main>:
    13d0:	f3 0f 1e fa          	endbr64 
    13d4:	41 56                	push   %r14
    13d6:	41 55                	push   %r13
    13d8:	41 54                	push   %r12
    13da:	55                   	push   %rbp
    13db:	53                   	push   %rbx
    13dc:	48 8d 1d 5d 7c 00 00 	lea    0x7c5d(%rip),%rbx        # 9040 <std::cout@@GLIBCXX_3.4>
    13e3:	49 89 de             	mov    %rbx,%r14
    13e6:	48 83 ec 50          	sub    $0x50,%rsp
    13ea:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    13f1:	00 00 
    13f3:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    13f8:	31 c0                	xor    %eax,%eax
    13fa:	48 8d 05 ed 4f 00 00 	lea    0x4fed(%rip),%rax        # 63ee <_IO_stdin_used+0x3ee>
    1401:	48 89 04 24          	mov    %rax,(%rsp)
    1405:	48 8d 05 e7 4f 00 00 	lea    0x4fe7(%rip),%rax        # 63f3 <_IO_stdin_used+0x3f3>
    140c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    1411:	48 8d 05 e1 4f 00 00 	lea    0x4fe1(%rip),%rax        # 63f9 <_IO_stdin_used+0x3f9>
    1418:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    141d:	48 8d 05 d9 4f 00 00 	lea    0x4fd9(%rip),%rax        # 63fd <_IO_stdin_used+0x3fd>
    1424:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    1429:	48 8d 05 d2 4f 00 00 	lea    0x4fd2(%rip),%rax        # 6402 <_IO_stdin_used+0x402>
    1430:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    1435:	48 8d 05 cd 4f 00 00 	lea    0x4fcd(%rip),%rax        # 6409 <_IO_stdin_used+0x409>
    143c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    1441:	48 8d 05 c8 4f 00 00 	lea    0x4fc8(%rip),%rax        # 6410 <_IO_stdin_used+0x410>
    1448:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    144d:	48 8d 05 bb 4f 00 00 	lea    0x4fbb(%rip),%rax        # 640f <_IO_stdin_used+0x40f>
    1454:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    1459:	48 8d 05 b7 4f 00 00 	lea    0x4fb7(%rip),%rax        # 6417 <_IO_stdin_used+0x417>
    1460:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
    1465:	48 89 e5             	mov    %rsp,%rbp
    1468:	4c 8d 6c 24 48       	lea    0x48(%rsp),%r13
    146d:	eb 20                	jmp    148f <main+0xbf>
    146f:	90                   	nop
    1470:	4c 89 e7             	mov    %r12,%rdi
    1473:	e8 78 fd ff ff       	callq  11f0 <strlen@plt>
    1478:	48 89 c2             	mov    %rax,%rdx
    147b:	4c 89 e6             	mov    %r12,%rsi
    147e:	4c 89 f7             	mov    %r14,%rdi
    1481:	48 83 c5 08          	add    $0x8,%rbp
    1485:	e8 26 fe ff ff       	callq  12b0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    148a:	4c 39 ed             	cmp    %r13,%rbp
    148d:	74 34                	je     14c3 <main+0xf3>
    148f:	48 8b 03             	mov    (%rbx),%rax
    1492:	4c 8b 65 00          	mov    0x0(%rbp),%r12
    1496:	48 8b 50 e8          	mov    -0x18(%rax),%rdx
    149a:	48 c7 44 13 10 08 00 	movq   $0x8,0x10(%rbx,%rdx,1)
    14a1:	00 00 
    14a3:	4d 85 e4             	test   %r12,%r12
    14a6:	75 c8                	jne    1470 <main+0xa0>
    14a8:	48 8b 78 e8          	mov    -0x18(%rax),%rdi
    14ac:	48 83 c5 08          	add    $0x8,%rbp
    14b0:	48 01 df             	add    %rbx,%rdi
    14b3:	8b 77 20             	mov    0x20(%rdi),%esi
    14b6:	83 ce 01             	or     $0x1,%esi
    14b9:	e8 62 fe ff ff       	callq  1320 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    14be:	4c 39 ed             	cmp    %r13,%rbp
    14c1:	75 cc                	jne    148f <main+0xbf>
    14c3:	48 8d 3d 76 7b 00 00 	lea    0x7b76(%rip),%rdi        # 9040 <std::cout@@GLIBCXX_3.4>
    14ca:	e8 31 fd ff ff       	callq  1200 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    14cf:	bd 09 00 00 00       	mov    $0x9,%ebp
    14d4:	4c 8d 25 44 4f 00 00 	lea    0x4f44(%rip),%r12        # 641f <_IO_stdin_used+0x41f>
    14db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    14e0:	48 8b 03             	mov    (%rbx),%rax
    14e3:	ba 07 00 00 00       	mov    $0x7,%edx
    14e8:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    14ec:	4c 89 e6             	mov    %r12,%rsi
    14ef:	48 8d 3d 4a 7b 00 00 	lea    0x7b4a(%rip),%rdi        # 9040 <std::cout@@GLIBCXX_3.4>
    14f6:	48 c7 44 03 10 08 00 	movq   $0x8,0x10(%rbx,%rax,1)
    14fd:	00 00 
    14ff:	e8 ac fd ff ff       	callq  12b0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    1504:	ff cd                	dec    %ebp
    1506:	75 d8                	jne    14e0 <main+0x110>
    1508:	48 8d 3d 31 7b 00 00 	lea    0x7b31(%rip),%rdi        # 9040 <std::cout@@GLIBCXX_3.4>
    150f:	e8 ec fc ff ff       	callq  1200 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    1514:	48 8b 03             	mov    (%rbx),%rax
    1517:	48 8d 3d 09 4f 00 00 	lea    0x4f09(%rip),%rdi        # 6427 <_IO_stdin_used+0x427>
    151e:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    1522:	48 c7 44 03 10 08 00 	movq   $0x8,0x10(%rbx,%rax,1)
    1529:	00 00 
    152b:	e8 70 04 00 00       	callq  19a0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) [clone .constprop.0]>
    1530:	48 8d 3d 99 09 00 00 	lea    0x999(%rip),%rdi        # 1ed0 <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])>
    1537:	e8 04 40 00 00       	callq  5540 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    153c:	48 8d 3d 0d 0a 00 00 	lea    0xa0d(%rip),%rdi        # 1f50 <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])>
    1543:	e8 b8 30 00 00       	callq  4600 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    1548:	48 8d 3d 81 0a 00 00 	lea    0xa81(%rip),%rdi        # 1fd0 <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])>
    154f:	e8 2c 38 00 00       	callq  4d80 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    1554:	48 8d 3d f5 0a 00 00 	lea    0xaf5(%rip),%rdi        # 2050 <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    155b:	e8 00 3a 00 00       	callq  4f60 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    1560:	48 8d 3d 99 0b 00 00 	lea    0xb99(%rip),%rdi        # 2100 <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])>
    1567:	e8 44 33 00 00       	callq  48b0 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    156c:	48 8d 3d 0d 0c 00 00 	lea    0xc0d(%rip),%rdi        # 2180 <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])>
    1573:	e8 f8 35 00 00       	callq  4b70 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    1578:	48 8d 3d 81 0c 00 00 	lea    0xc81(%rip),%rdi        # 2200 <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    157f:	e8 dc 3b 00 00       	callq  5160 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    1584:	48 8d 3d f5 0c 00 00 	lea    0xcf5(%rip),%rdi        # 2280 <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    158b:	e8 c0 3d 00 00       	callq  5350 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    1590:	48 8d 3d a9 7a 00 00 	lea    0x7aa9(%rip),%rdi        # 9040 <std::cout@@GLIBCXX_3.4>
    1597:	e8 64 fc ff ff       	callq  1200 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    159c:	48 8b 03             	mov    (%rbx),%rax
    159f:	48 8d 3d 85 4e 00 00 	lea    0x4e85(%rip),%rdi        # 642b <_IO_stdin_used+0x42b>
    15a6:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    15aa:	48 c7 44 03 10 08 00 	movq   $0x8,0x10(%rbx,%rax,1)
    15b1:	00 00 
    15b3:	e8 e8 03 00 00       	callq  19a0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) [clone .constprop.0]>
    15b8:	48 8d 3d a1 0d 00 00 	lea    0xda1(%rip),%rdi        # 2360 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])>
    15bf:	e8 7c 3f 00 00       	callq  5540 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    15c4:	48 8d 3d 15 0f 00 00 	lea    0xf15(%rip),%rdi        # 24e0 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])>
    15cb:	e8 30 30 00 00       	callq  4600 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    15d0:	48 8d 3d 59 11 00 00 	lea    0x1159(%rip),%rdi        # 2730 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])>
    15d7:	e8 a4 37 00 00       	callq  4d80 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    15dc:	48 8d 3d 7d 12 00 00 	lea    0x127d(%rip),%rdi        # 2860 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    15e3:	e8 78 39 00 00       	callq  4f60 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    15e8:	48 8d 3d 01 13 00 00 	lea    0x1301(%rip),%rdi        # 28f0 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])>
    15ef:	e8 bc 32 00 00       	callq  48b0 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    15f4:	48 8d 3d 55 15 00 00 	lea    0x1555(%rip),%rdi        # 2b50 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])>
    15fb:	e8 70 35 00 00       	callq  4b70 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    1600:	48 8d 3d 69 16 00 00 	lea    0x1669(%rip),%rdi        # 2c70 <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    1607:	e8 54 3b 00 00       	callq  5160 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    160c:	48 8d 3d cd 16 00 00 	lea    0x16cd(%rip),%rdi        # 2ce0 <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    1613:	e8 38 3d 00 00       	callq  5350 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    1618:	48 8d 3d 21 7a 00 00 	lea    0x7a21(%rip),%rdi        # 9040 <std::cout@@GLIBCXX_3.4>
    161f:	e8 dc fb ff ff       	callq  1200 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    1624:	48 8b 03             	mov    (%rbx),%rax
    1627:	48 8d 3d 01 4e 00 00 	lea    0x4e01(%rip),%rdi        # 642f <_IO_stdin_used+0x42f>
    162e:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    1632:	48 c7 44 03 10 08 00 	movq   $0x8,0x10(%rbx,%rax,1)
    1639:	00 00 
    163b:	e8 60 03 00 00       	callq  19a0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) [clone .constprop.0]>
    1640:	48 8d 3d 49 17 00 00 	lea    0x1749(%rip),%rdi        # 2d90 <void jik<short>(short (*) [128], short (*) [128], short (*) [128])>
    1647:	e8 f4 3e 00 00       	callq  5540 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    164c:	48 8d 3d bd 17 00 00 	lea    0x17bd(%rip),%rdi        # 2e10 <void jik<int>(int (*) [128], int (*) [128], int (*) [128])>
    1653:	e8 a8 2f 00 00       	callq  4600 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    1658:	48 8d 3d 31 18 00 00 	lea    0x1831(%rip),%rdi        # 2e90 <void jik<long>(long (*) [128], long (*) [128], long (*) [128])>
    165f:	e8 1c 37 00 00       	callq  4d80 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    1664:	48 8d 3d a5 18 00 00 	lea    0x18a5(%rip),%rdi        # 2f10 <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    166b:	e8 f0 38 00 00       	callq  4f60 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    1670:	48 8d 3d 59 19 00 00 	lea    0x1959(%rip),%rdi        # 2fd0 <void jik<float>(float (*) [128], float (*) [128], float (*) [128])>
    1677:	e8 34 32 00 00       	callq  48b0 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    167c:	48 8d 3d cd 19 00 00 	lea    0x19cd(%rip),%rdi        # 3050 <void jik<double>(double (*) [128], double (*) [128], double (*) [128])>
    1683:	e8 e8 34 00 00       	callq  4b70 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    1688:	48 8d 3d 41 1a 00 00 	lea    0x1a41(%rip),%rdi        # 30d0 <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    168f:	e8 cc 3a 00 00       	callq  5160 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    1694:	48 8d 3d b5 1a 00 00 	lea    0x1ab5(%rip),%rdi        # 3150 <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    169b:	e8 b0 3c 00 00       	callq  5350 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    16a0:	48 8d 3d 99 79 00 00 	lea    0x7999(%rip),%rdi        # 9040 <std::cout@@GLIBCXX_3.4>
    16a7:	e8 54 fb ff ff       	callq  1200 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    16ac:	48 8b 03             	mov    (%rbx),%rax
    16af:	48 8d 3d 7d 4d 00 00 	lea    0x4d7d(%rip),%rdi        # 6433 <_IO_stdin_used+0x433>
    16b6:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    16ba:	48 c7 44 03 10 08 00 	movq   $0x8,0x10(%rbx,%rax,1)
    16c1:	00 00 
    16c3:	e8 d8 02 00 00       	callq  19a0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) [clone .constprop.0]>
    16c8:	48 8d 3d 71 1b 00 00 	lea    0x1b71(%rip),%rdi        # 3240 <void jki<short>(short (*) [128], short (*) [128], short (*) [128])>
    16cf:	e8 6c 3e 00 00       	callq  5540 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    16d4:	48 8d 3d d5 1b 00 00 	lea    0x1bd5(%rip),%rdi        # 32b0 <void jki<int>(int (*) [128], int (*) [128], int (*) [128])>
    16db:	e8 20 2f 00 00       	callq  4600 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    16e0:	48 8d 3d 39 1c 00 00 	lea    0x1c39(%rip),%rdi        # 3320 <void jki<long>(long (*) [128], long (*) [128], long (*) [128])>
    16e7:	e8 94 36 00 00       	callq  4d80 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    16ec:	48 8d 3d 9d 1c 00 00 	lea    0x1c9d(%rip),%rdi        # 3390 <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    16f3:	e8 68 38 00 00       	callq  4f60 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    16f8:	48 8d 3d 41 1d 00 00 	lea    0x1d41(%rip),%rdi        # 3440 <void jki<float>(float (*) [128], float (*) [128], float (*) [128])>
    16ff:	e8 ac 31 00 00       	callq  48b0 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    1704:	48 8d 3d b5 1d 00 00 	lea    0x1db5(%rip),%rdi        # 34c0 <void jki<double>(double (*) [128], double (*) [128], double (*) [128])>
    170b:	e8 60 34 00 00       	callq  4b70 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    1710:	48 8d 3d 29 1e 00 00 	lea    0x1e29(%rip),%rdi        # 3540 <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    1717:	e8 44 3a 00 00       	callq  5160 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    171c:	48 8d 3d 9d 1e 00 00 	lea    0x1e9d(%rip),%rdi        # 35c0 <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    1723:	e8 28 3c 00 00       	callq  5350 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    1728:	48 8d 3d 11 79 00 00 	lea    0x7911(%rip),%rdi        # 9040 <std::cout@@GLIBCXX_3.4>
    172f:	e8 cc fa ff ff       	callq  1200 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    1734:	48 8b 03             	mov    (%rbx),%rax
    1737:	48 8d 3d f9 4c 00 00 	lea    0x4cf9(%rip),%rdi        # 6437 <_IO_stdin_used+0x437>
    173e:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    1742:	48 c7 44 03 10 08 00 	movq   $0x8,0x10(%rbx,%rax,1)
    1749:	00 00 
    174b:	e8 50 02 00 00       	callq  19a0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) [clone .constprop.0]>
    1750:	48 8d 3d 39 1f 00 00 	lea    0x1f39(%rip),%rdi        # 3690 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])>
    1757:	e8 e4 3d 00 00       	callq  5540 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    175c:	48 8d 3d 9d 20 00 00 	lea    0x209d(%rip),%rdi        # 3800 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])>
    1763:	e8 98 2e 00 00       	callq  4600 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    1768:	48 8d 3d d1 22 00 00 	lea    0x22d1(%rip),%rdi        # 3a40 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])>
    176f:	e8 0c 36 00 00       	callq  4d80 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    1774:	48 8d 3d f5 23 00 00 	lea    0x23f5(%rip),%rdi        # 3b70 <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    177b:	e8 e0 37 00 00       	callq  4f60 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    1780:	48 8d 3d 79 24 00 00 	lea    0x2479(%rip),%rdi        # 3c00 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])>
    1787:	e8 24 31 00 00       	callq  48b0 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    178c:	48 8d 3d bd 26 00 00 	lea    0x26bd(%rip),%rdi        # 3e50 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])>
    1793:	e8 d8 33 00 00       	callq  4b70 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    1798:	48 8d 3d c1 27 00 00 	lea    0x27c1(%rip),%rdi        # 3f60 <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    179f:	e8 bc 39 00 00       	callq  5160 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    17a4:	48 8d 3d 25 28 00 00 	lea    0x2825(%rip),%rdi        # 3fd0 <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    17ab:	e8 a0 3b 00 00       	callq  5350 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    17b0:	48 8d 3d 89 78 00 00 	lea    0x7889(%rip),%rdi        # 9040 <std::cout@@GLIBCXX_3.4>
    17b7:	e8 44 fa ff ff       	callq  1200 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    17bc:	48 8b 03             	mov    (%rbx),%rax
    17bf:	48 8d 3d 75 4c 00 00 	lea    0x4c75(%rip),%rdi        # 643b <_IO_stdin_used+0x43b>
    17c6:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    17ca:	48 c7 44 03 10 08 00 	movq   $0x8,0x10(%rbx,%rax,1)
    17d1:	00 00 
    17d3:	e8 c8 01 00 00       	callq  19a0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) [clone .constprop.0]>
    17d8:	48 8d 3d a1 28 00 00 	lea    0x28a1(%rip),%rdi        # 4080 <void kji<short>(short (*) [128], short (*) [128], short (*) [128])>
    17df:	e8 5c 3d 00 00       	callq  5540 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    17e4:	48 8d 3d 05 29 00 00 	lea    0x2905(%rip),%rdi        # 40f0 <void kji<int>(int (*) [128], int (*) [128], int (*) [128])>
    17eb:	e8 10 2e 00 00       	callq  4600 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    17f0:	48 8d 3d 69 29 00 00 	lea    0x2969(%rip),%rdi        # 4160 <void kji<long>(long (*) [128], long (*) [128], long (*) [128])>
    17f7:	e8 84 35 00 00       	callq  4d80 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    17fc:	48 8d 3d cd 29 00 00 	lea    0x29cd(%rip),%rdi        # 41d0 <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    1803:	e8 58 37 00 00       	callq  4f60 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    1808:	48 8d 3d 71 2a 00 00 	lea    0x2a71(%rip),%rdi        # 4280 <void kji<float>(float (*) [128], float (*) [128], float (*) [128])>
    180f:	e8 9c 30 00 00       	callq  48b0 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    1814:	48 8d 3d e5 2a 00 00 	lea    0x2ae5(%rip),%rdi        # 4300 <void kji<double>(double (*) [128], double (*) [128], double (*) [128])>
    181b:	e8 50 33 00 00       	callq  4b70 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    1820:	48 8d 3d 59 2b 00 00 	lea    0x2b59(%rip),%rdi        # 4380 <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    1827:	e8 34 39 00 00       	callq  5160 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    182c:	48 8d 3d cd 2b 00 00 	lea    0x2bcd(%rip),%rdi        # 4400 <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    1833:	e8 18 3b 00 00       	callq  5350 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    1838:	48 8d 3d 01 78 00 00 	lea    0x7801(%rip),%rdi        # 9040 <std::cout@@GLIBCXX_3.4>
    183f:	e8 bc f9 ff ff       	callq  1200 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    1844:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
    1849:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    1850:	00 00 
    1852:	75 0f                	jne    1863 <main+0x493>
    1854:	48 83 c4 50          	add    $0x50,%rsp
    1858:	5b                   	pop    %rbx
    1859:	5d                   	pop    %rbp
    185a:	41 5c                	pop    %r12
    185c:	41 5d                	pop    %r13
    185e:	31 c0                	xor    %eax,%eax
    1860:	41 5e                	pop    %r14
    1862:	c3                   	retq   
    1863:	e8 38 fa ff ff       	callq  12a0 <__stack_chk_fail@plt>
    1868:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    186f:	00 

0000000000001870 <_GLOBAL__sub_I__ZN2ec8demangleB5cxx11EPKc>:
    1870:	f3 0f 1e fa          	endbr64 
    1874:	48 83 ec 08          	sub    $0x8,%rsp
    1878:	48 8d 3d d2 78 00 00 	lea    0x78d2(%rip),%rdi        # 9151 <std::__ioinit>
    187f:	e8 5c fa ff ff       	callq  12e0 <std::ios_base::Init::Init()@plt>
    1884:	48 8b 3d 6d 77 00 00 	mov    0x776d(%rip),%rdi        # 8ff8 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
    188b:	48 8d 15 76 77 00 00 	lea    0x7776(%rip),%rdx        # 9008 <__dso_handle>
    1892:	48 8d 35 b8 78 00 00 	lea    0x78b8(%rip),%rsi        # 9151 <std::__ioinit>
    1899:	48 83 c4 08          	add    $0x8,%rsp
    189d:	e9 ee f9 ff ff       	jmpq   1290 <__cxa_atexit@plt>
    18a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    18a9:	00 00 00 
    18ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000018b0 <_start>:
    18b0:	f3 0f 1e fa          	endbr64 
    18b4:	31 ed                	xor    %ebp,%ebp
    18b6:	49 89 d1             	mov    %rdx,%r9
    18b9:	5e                   	pop    %rsi
    18ba:	48 89 e2             	mov    %rsp,%rdx
    18bd:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    18c1:	50                   	push   %rax
    18c2:	54                   	push   %rsp
    18c3:	4c 8d 05 16 3f 00 00 	lea    0x3f16(%rip),%r8        # 57e0 <__libc_csu_fini>
    18ca:	48 8d 0d 9f 3e 00 00 	lea    0x3e9f(%rip),%rcx        # 5770 <__libc_csu_init>
    18d1:	48 8d 3d f8 fa ff ff 	lea    -0x508(%rip),%rdi        # 13d0 <main>
    18d8:	ff 15 02 77 00 00    	callq  *0x7702(%rip)        # 8fe0 <__libc_start_main@GLIBC_2.2.5>
    18de:	f4                   	hlt    
    18df:	90                   	nop

00000000000018e0 <deregister_tm_clones>:
    18e0:	48 8d 3d 31 77 00 00 	lea    0x7731(%rip),%rdi        # 9018 <__TMC_END__>
    18e7:	48 8d 05 2a 77 00 00 	lea    0x772a(%rip),%rax        # 9018 <__TMC_END__>
    18ee:	48 39 f8             	cmp    %rdi,%rax
    18f1:	74 15                	je     1908 <deregister_tm_clones+0x28>
    18f3:	48 8b 05 de 76 00 00 	mov    0x76de(%rip),%rax        # 8fd8 <_ITM_deregisterTMCloneTable>
    18fa:	48 85 c0             	test   %rax,%rax
    18fd:	74 09                	je     1908 <deregister_tm_clones+0x28>
    18ff:	ff e0                	jmpq   *%rax
    1901:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1908:	c3                   	retq   
    1909:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001910 <register_tm_clones>:
    1910:	48 8d 3d 01 77 00 00 	lea    0x7701(%rip),%rdi        # 9018 <__TMC_END__>
    1917:	48 8d 35 fa 76 00 00 	lea    0x76fa(%rip),%rsi        # 9018 <__TMC_END__>
    191e:	48 29 fe             	sub    %rdi,%rsi
    1921:	48 89 f0             	mov    %rsi,%rax
    1924:	48 c1 ee 3f          	shr    $0x3f,%rsi
    1928:	48 c1 f8 03          	sar    $0x3,%rax
    192c:	48 01 c6             	add    %rax,%rsi
    192f:	48 d1 fe             	sar    %rsi
    1932:	74 14                	je     1948 <register_tm_clones+0x38>
    1934:	48 8b 05 b5 76 00 00 	mov    0x76b5(%rip),%rax        # 8ff0 <_ITM_registerTMCloneTable>
    193b:	48 85 c0             	test   %rax,%rax
    193e:	74 08                	je     1948 <register_tm_clones+0x38>
    1940:	ff e0                	jmpq   *%rax
    1942:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1948:	c3                   	retq   
    1949:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001950 <__do_global_dtors_aux>:
    1950:	f3 0f 1e fa          	endbr64 
    1954:	80 3d f5 77 00 00 00 	cmpb   $0x0,0x77f5(%rip)        # 9150 <completed.8061>
    195b:	75 2b                	jne    1988 <__do_global_dtors_aux+0x38>
    195d:	55                   	push   %rbp
    195e:	48 83 3d 62 76 00 00 	cmpq   $0x0,0x7662(%rip)        # 8fc8 <__cxa_finalize@GLIBC_2.2.5>
    1965:	00 
    1966:	48 89 e5             	mov    %rsp,%rbp
    1969:	74 0c                	je     1977 <__do_global_dtors_aux+0x27>
    196b:	48 8b 3d 96 76 00 00 	mov    0x7696(%rip),%rdi        # 9008 <__dso_handle>
    1972:	e8 49 f8 ff ff       	callq  11c0 <__cxa_finalize@plt>
    1977:	e8 64 ff ff ff       	callq  18e0 <deregister_tm_clones>
    197c:	c6 05 cd 77 00 00 01 	movb   $0x1,0x77cd(%rip)        # 9150 <completed.8061>
    1983:	5d                   	pop    %rbp
    1984:	c3                   	retq   
    1985:	0f 1f 00             	nopl   (%rax)
    1988:	c3                   	retq   
    1989:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001990 <frame_dummy>:
    1990:	f3 0f 1e fa          	endbr64 
    1994:	e9 77 ff ff ff       	jmpq   1910 <register_tm_clones>
    1999:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000019a0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) [clone .constprop.0]>:
    19a0:	55                   	push   %rbp
    19a1:	48 85 ff             	test   %rdi,%rdi
    19a4:	74 23                	je     19c9 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) [clone .constprop.0]+0x29>
    19a6:	48 89 fd             	mov    %rdi,%rbp
    19a9:	e8 42 f8 ff ff       	callq  11f0 <strlen@plt>
    19ae:	48 89 c2             	mov    %rax,%rdx
    19b1:	48 89 ee             	mov    %rbp,%rsi
    19b4:	48 8d 3d 85 76 00 00 	lea    0x7685(%rip),%rdi        # 9040 <std::cout@@GLIBCXX_3.4>
    19bb:	e8 f0 f8 ff ff       	callq  12b0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    19c0:	48 8d 05 79 76 00 00 	lea    0x7679(%rip),%rax        # 9040 <std::cout@@GLIBCXX_3.4>
    19c7:	5d                   	pop    %rbp
    19c8:	c3                   	retq   
    19c9:	48 8b 05 70 76 00 00 	mov    0x7670(%rip),%rax        # 9040 <std::cout@@GLIBCXX_3.4>
    19d0:	48 8d 3d 69 76 00 00 	lea    0x7669(%rip),%rdi        # 9040 <std::cout@@GLIBCXX_3.4>
    19d7:	48 03 78 e8          	add    -0x18(%rax),%rdi
    19db:	8b 77 20             	mov    0x20(%rdi),%esi
    19de:	83 ce 01             	or     $0x1,%esi
    19e1:	e8 3a f9 ff ff       	callq  1320 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    19e6:	eb d8                	jmp    19c0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) [clone .constprop.0]+0x20>
    19e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    19ef:	00 

00000000000019f0 <ec::demangle[abi:cxx11](char const*)>:
    19f0:	f3 0f 1e fa          	endbr64 
    19f4:	41 57                	push   %r15
    19f6:	31 d2                	xor    %edx,%edx
    19f8:	41 56                	push   %r14
    19fa:	41 55                	push   %r13
    19fc:	49 89 f5             	mov    %rsi,%r13
    19ff:	31 f6                	xor    %esi,%esi
    1a01:	41 54                	push   %r12
    1a03:	49 89 fc             	mov    %rdi,%r12
    1a06:	4c 89 ef             	mov    %r13,%rdi
    1a09:	55                   	push   %rbp
    1a0a:	48 83 ec 20          	sub    $0x20,%rsp
    1a0e:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx
    1a13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1a1a:	00 00 
    1a1c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    1a21:	31 c0                	xor    %eax,%eax
    1a23:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
    1a2a:	00 
    1a2b:	e8 50 f8 ff ff       	callq  1280 <__cxa_demangle@plt>
    1a30:	48 89 c5             	mov    %rax,%rbp
    1a33:	8b 44 24 0c          	mov    0xc(%rsp),%eax
    1a37:	83 f8 ff             	cmp    $0xffffffff,%eax
    1a3a:	0f 84 20 f9 ff ff    	je     1360 <ec::demangle[abi:cxx11](char const*) [clone .cold]>
    1a40:	85 c0                	test   %eax,%eax
    1a42:	75 7c                	jne    1ac0 <ec::demangle[abi:cxx11](char const*)+0xd0>
    1a44:	4d 8d 74 24 10       	lea    0x10(%r12),%r14
    1a49:	4d 89 34 24          	mov    %r14,(%r12)
    1a4d:	48 85 ed             	test   %rbp,%rbp
    1a50:	0f 84 da 00 00 00    	je     1b30 <ec::demangle[abi:cxx11](char const*)+0x140>
    1a56:	48 89 ef             	mov    %rbp,%rdi
    1a59:	e8 92 f7 ff ff       	callq  11f0 <strlen@plt>
    1a5e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    1a63:	49 89 c5             	mov    %rax,%r13
    1a66:	48 83 f8 0f          	cmp    $0xf,%rax
    1a6a:	0f 87 10 01 00 00    	ja     1b80 <ec::demangle[abi:cxx11](char const*)+0x190>
    1a70:	48 83 f8 01          	cmp    $0x1,%rax
    1a74:	0f 85 96 00 00 00    	jne    1b10 <ec::demangle[abi:cxx11](char const*)+0x120>
    1a7a:	0f b6 55 00          	movzbl 0x0(%rbp),%edx
    1a7e:	41 88 54 24 10       	mov    %dl,0x10(%r12)
    1a83:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    1a88:	41 c6 04 06 00       	movb   $0x0,(%r14,%rax,1)
    1a8d:	48 89 ef             	mov    %rbp,%rdi
    1a90:	e8 2b f8 ff ff       	callq  12c0 <free@plt>
    1a95:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    1a9a:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    1aa1:	00 00 
    1aa3:	0f 85 13 01 00 00    	jne    1bbc <ec::demangle[abi:cxx11](char const*)+0x1cc>
    1aa9:	48 83 c4 20          	add    $0x20,%rsp
    1aad:	5d                   	pop    %rbp
    1aae:	4c 89 e0             	mov    %r12,%rax
    1ab1:	41 5c                	pop    %r12
    1ab3:	41 5d                	pop    %r13
    1ab5:	41 5e                	pop    %r14
    1ab7:	41 5f                	pop    %r15
    1ab9:	c3                   	retq   
    1aba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1ac0:	4d 8d 7c 24 10       	lea    0x10(%r12),%r15
    1ac5:	4d 89 3c 24          	mov    %r15,(%r12)
    1ac9:	4d 85 ed             	test   %r13,%r13
    1acc:	74 52                	je     1b20 <ec::demangle[abi:cxx11](char const*)+0x130>
    1ace:	4c 89 ef             	mov    %r13,%rdi
    1ad1:	e8 1a f7 ff ff       	callq  11f0 <strlen@plt>
    1ad6:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    1adb:	49 89 c6             	mov    %rax,%r14
    1ade:	48 83 f8 0f          	cmp    $0xf,%rax
    1ae2:	77 5c                	ja     1b40 <ec::demangle[abi:cxx11](char const*)+0x150>
    1ae4:	48 83 f8 01          	cmp    $0x1,%rax
    1ae8:	75 1e                	jne    1b08 <ec::demangle[abi:cxx11](char const*)+0x118>
    1aea:	41 0f b6 55 00       	movzbl 0x0(%r13),%edx
    1aef:	41 88 54 24 10       	mov    %dl,0x10(%r12)
    1af4:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    1af9:	41 c6 04 07 00       	movb   $0x0,(%r15,%rax,1)
    1afe:	48 85 ed             	test   %rbp,%rbp
    1b01:	74 92                	je     1a95 <ec::demangle[abi:cxx11](char const*)+0xa5>
    1b03:	eb 88                	jmp    1a8d <ec::demangle[abi:cxx11](char const*)+0x9d>
    1b05:	0f 1f 00             	nopl   (%rax)
    1b08:	48 85 c0             	test   %rax,%rax
    1b0b:	74 e7                	je     1af4 <ec::demangle[abi:cxx11](char const*)+0x104>
    1b0d:	eb 51                	jmp    1b60 <ec::demangle[abi:cxx11](char const*)+0x170>
    1b0f:	90                   	nop
    1b10:	48 85 c0             	test   %rax,%rax
    1b13:	0f 84 6a ff ff ff    	je     1a83 <ec::demangle[abi:cxx11](char const*)+0x93>
    1b19:	e9 82 00 00 00       	jmpq   1ba0 <ec::demangle[abi:cxx11](char const*)+0x1b0>
    1b1e:	66 90                	xchg   %ax,%ax
    1b20:	48 8d 3d e1 44 00 00 	lea    0x44e1(%rip),%rdi        # 6008 <_IO_stdin_used+0x8>
    1b27:	e8 24 f7 ff ff       	callq  1250 <std::__throw_logic_error(char const*)@plt>
    1b2c:	0f 1f 40 00          	nopl   0x0(%rax)
    1b30:	48 8d 3d d1 44 00 00 	lea    0x44d1(%rip),%rdi        # 6008 <_IO_stdin_used+0x8>
    1b37:	e8 14 f7 ff ff       	callq  1250 <std::__throw_logic_error(char const*)@plt>
    1b3c:	0f 1f 40 00          	nopl   0x0(%rax)
    1b40:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    1b45:	31 d2                	xor    %edx,%edx
    1b47:	4c 89 e7             	mov    %r12,%rdi
    1b4a:	e8 01 f8 ff ff       	callq  1350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
    1b4f:	49 89 04 24          	mov    %rax,(%r12)
    1b53:	49 89 c7             	mov    %rax,%r15
    1b56:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    1b5b:	49 89 44 24 10       	mov    %rax,0x10(%r12)
    1b60:	4c 89 ff             	mov    %r15,%rdi
    1b63:	4c 89 f2             	mov    %r14,%rdx
    1b66:	4c 89 ee             	mov    %r13,%rsi
    1b69:	e8 02 f7 ff ff       	callq  1270 <memcpy@plt>
    1b6e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    1b73:	4d 8b 3c 24          	mov    (%r12),%r15
    1b77:	e9 78 ff ff ff       	jmpq   1af4 <ec::demangle[abi:cxx11](char const*)+0x104>
    1b7c:	0f 1f 40 00          	nopl   0x0(%rax)
    1b80:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    1b85:	31 d2                	xor    %edx,%edx
    1b87:	4c 89 e7             	mov    %r12,%rdi
    1b8a:	e8 c1 f7 ff ff       	callq  1350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
    1b8f:	49 89 04 24          	mov    %rax,(%r12)
    1b93:	49 89 c6             	mov    %rax,%r14
    1b96:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    1b9b:	49 89 44 24 10       	mov    %rax,0x10(%r12)
    1ba0:	4c 89 f7             	mov    %r14,%rdi
    1ba3:	4c 89 ea             	mov    %r13,%rdx
    1ba6:	48 89 ee             	mov    %rbp,%rsi
    1ba9:	e8 c2 f6 ff ff       	callq  1270 <memcpy@plt>
    1bae:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    1bb3:	4d 8b 34 24          	mov    (%r12),%r14
    1bb7:	e9 c7 fe ff ff       	jmpq   1a83 <ec::demangle[abi:cxx11](char const*)+0x93>
    1bbc:	e8 df f6 ff ff       	callq  12a0 <__stack_chk_fail@plt>
    1bc1:	f3 0f 1e fa          	endbr64 
    1bc5:	49 89 c4             	mov    %rax,%r12
    1bc8:	c5 f8 77             	vzeroupper 
    1bcb:	e9 e5 f7 ff ff       	jmpq   13b5 <ec::demangle[abi:cxx11](char const*) [clone .cold]+0x55>
    1bd0:	f3 0f 1e fa          	endbr64 
    1bd4:	49 89 c4             	mov    %rax,%r12
    1bd7:	c5 f8 77             	vzeroupper 
    1bda:	e9 de f7 ff ff       	jmpq   13bd <ec::demangle[abi:cxx11](char const*) [clone .cold]+0x5d>
    1bdf:	f3 0f 1e fa          	endbr64 
    1be3:	e9 ae f7 ff ff       	jmpq   1396 <ec::demangle[abi:cxx11](char const*) [clone .cold]+0x36>
    1be8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    1bef:	00 

0000000000001bf0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]>:
    1bf0:	41 57                	push   %r15
    1bf2:	48 89 d0             	mov    %rdx,%rax
    1bf5:	48 29 f8             	sub    %rdi,%rax
    1bf8:	41 56                	push   %r14
    1bfa:	41 55                	push   %r13
    1bfc:	41 54                	push   %r12
    1bfe:	55                   	push   %rbp
    1bff:	48 89 d5             	mov    %rdx,%rbp
    1c02:	53                   	push   %rbx
    1c03:	48 89 fb             	mov    %rdi,%rbx
    1c06:	48 83 ec 18          	sub    $0x18,%rsp
    1c0a:	48 83 f8 18          	cmp    $0x18,%rax
    1c0e:	0f 8e ef 01 00 00    	jle    1e03 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x213>
    1c14:	49 89 f4             	mov    %rsi,%r12
    1c17:	48 85 c9             	test   %rcx,%rcx
    1c1a:	0f 84 d9 00 00 00    	je     1cf9 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x109>
    1c20:	c5 fb 10 0f          	vmovsd (%rdi),%xmm1
    1c24:	0f 1f 40 00          	nopl   0x0(%rax)
    1c28:	48 c1 f8 04          	sar    $0x4,%rax
    1c2c:	48 8d 04 c3          	lea    (%rbx,%rax,8),%rax
    1c30:	c5 fb 10 53 08       	vmovsd 0x8(%rbx),%xmm2
    1c35:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    1c39:	48 ff c9             	dec    %rcx
    1c3c:	c5 f9 2f c2          	vcomisd %xmm2,%xmm0
    1c40:	c5 fb 10 5d f8       	vmovsd -0x8(%rbp),%xmm3
    1c45:	48 8d 53 08          	lea    0x8(%rbx),%rdx
    1c49:	0f 86 71 01 00 00    	jbe    1dc0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x1d0>
    1c4f:	c5 f9 2f d8          	vcomisd %xmm0,%xmm3
    1c53:	0f 87 7b 01 00 00    	ja     1dd4 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x1e4>
    1c59:	c5 f9 2f da          	vcomisd %xmm2,%xmm3
    1c5d:	0f 86 45 02 00 00    	jbe    1ea8 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x2b8>
    1c63:	c5 fb 11 1b          	vmovsd %xmm3,(%rbx)
    1c67:	c5 f9 28 d1          	vmovapd %xmm1,%xmm2
    1c6b:	c5 fb 11 4d f8       	vmovsd %xmm1,-0x8(%rbp)
    1c70:	c5 fb 10 03          	vmovsd (%rbx),%xmm0
    1c74:	48 89 e8             	mov    %rbp,%rax
    1c77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    1c7e:	00 00 
    1c80:	c5 fb 10 0a          	vmovsd (%rdx),%xmm1
    1c84:	c5 f9 2f c1          	vcomisd %xmm1,%xmm0
    1c88:	77 37                	ja     1cc1 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0xd1>
    1c8a:	48 83 e8 08          	sub    $0x8,%rax
    1c8e:	c5 f9 2f d0          	vcomisd %xmm0,%xmm2
    1c92:	76 13                	jbe    1ca7 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0xb7>
    1c94:	0f 1f 40 00          	nopl   0x0(%rax)
    1c98:	c5 fb 10 50 f8       	vmovsd -0x8(%rax),%xmm2
    1c9d:	48 83 e8 08          	sub    $0x8,%rax
    1ca1:	c5 f9 2f d0          	vcomisd %xmm0,%xmm2
    1ca5:	77 f1                	ja     1c98 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0xa8>
    1ca7:	48 39 c2             	cmp    %rax,%rdx
    1caa:	73 24                	jae    1cd0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0xe0>
    1cac:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    1cb0:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    1cb4:	c5 fb 11 08          	vmovsd %xmm1,(%rax)
    1cb8:	c5 fb 10 03          	vmovsd (%rbx),%xmm0
    1cbc:	c5 fb 10 50 f8       	vmovsd -0x8(%rax),%xmm2
    1cc1:	48 83 c2 08          	add    $0x8,%rdx
    1cc5:	eb b9                	jmp    1c80 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x90>
    1cc7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    1cce:	00 00 
    1cd0:	49 39 d4             	cmp    %rdx,%r12
    1cd3:	0f 83 17 01 00 00    	jae    1df0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x200>
    1cd9:	48 89 d5             	mov    %rdx,%rbp
    1cdc:	48 89 e8             	mov    %rbp,%rax
    1cdf:	48 29 d8             	sub    %rbx,%rax
    1ce2:	c5 f9 28 c8          	vmovapd %xmm0,%xmm1
    1ce6:	48 83 f8 18          	cmp    $0x18,%rax
    1cea:	0f 8e 13 01 00 00    	jle    1e03 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x213>
    1cf0:	48 85 c9             	test   %rcx,%rcx
    1cf3:	0f 85 2f ff ff ff    	jne    1c28 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x38>
    1cf9:	4d 8d 6c 24 08       	lea    0x8(%r12),%r13
    1cfe:	4c 89 e8             	mov    %r13,%rax
    1d01:	48 29 d8             	sub    %rbx,%rax
    1d04:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    1d09:	48 83 f8 08          	cmp    $0x8,%rax
    1d0d:	7e 3d                	jle    1d4c <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x15c>
    1d0f:	49 89 c7             	mov    %rax,%r15
    1d12:	49 c1 ff 03          	sar    $0x3,%r15
    1d16:	49 8d 57 fe          	lea    -0x2(%r15),%rdx
    1d1a:	48 89 d0             	mov    %rdx,%rax
    1d1d:	48 c1 e8 3f          	shr    $0x3f,%rax
    1d21:	48 01 d0             	add    %rdx,%rax
    1d24:	48 d1 f8             	sar    %rax
    1d27:	49 89 c6             	mov    %rax,%r14
    1d2a:	eb 07                	jmp    1d33 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x143>
    1d2c:	0f 1f 40 00          	nopl   0x0(%rax)
    1d30:	49 ff ce             	dec    %r14
    1d33:	c4 a1 7b 10 04 f3    	vmovsd (%rbx,%r14,8),%xmm0
    1d39:	4c 89 fa             	mov    %r15,%rdx
    1d3c:	4c 89 f6             	mov    %r14,%rsi
    1d3f:	48 89 df             	mov    %rbx,%rdi
    1d42:	e8 79 27 00 00       	callq  44c0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>
    1d47:	4d 85 f6             	test   %r14,%r14
    1d4a:	75 e4                	jne    1d30 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x140>
    1d4c:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
    1d51:	c5 fb 10 03          	vmovsd (%rbx),%xmm0
    1d55:	49 c1 fe 03          	sar    $0x3,%r14
    1d59:	49 39 ed             	cmp    %rbp,%r13
    1d5c:	72 0b                	jb     1d69 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x179>
    1d5e:	eb 3b                	jmp    1d9b <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x1ab>
    1d60:	49 83 c5 08          	add    $0x8,%r13
    1d64:	49 39 ed             	cmp    %rbp,%r13
    1d67:	73 32                	jae    1d9b <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x1ab>
    1d69:	c4 c1 79 2f 45 00    	vcomisd 0x0(%r13),%xmm0
    1d6f:	76 ef                	jbe    1d60 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x170>
    1d71:	c5 fb 10 0b          	vmovsd (%rbx),%xmm1
    1d75:	c4 c1 7b 10 45 00    	vmovsd 0x0(%r13),%xmm0
    1d7b:	4c 89 f2             	mov    %r14,%rdx
    1d7e:	c4 c1 7b 11 4d 00    	vmovsd %xmm1,0x0(%r13)
    1d84:	31 f6                	xor    %esi,%esi
    1d86:	48 89 df             	mov    %rbx,%rdi
    1d89:	49 83 c5 08          	add    $0x8,%r13
    1d8d:	e8 2e 27 00 00       	callq  44c0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>
    1d92:	c5 fb 10 03          	vmovsd (%rbx),%xmm0
    1d96:	49 39 ed             	cmp    %rbp,%r13
    1d99:	72 ce                	jb     1d69 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x179>
    1d9b:	c4 c1 7b 10 0c 24    	vmovsd (%r12),%xmm1
    1da1:	c5 fb 11 0b          	vmovsd %xmm1,(%rbx)
    1da5:	c4 c1 7b 11 04 24    	vmovsd %xmm0,(%r12)
    1dab:	48 83 c4 18          	add    $0x18,%rsp
    1daf:	5b                   	pop    %rbx
    1db0:	5d                   	pop    %rbp
    1db1:	41 5c                	pop    %r12
    1db3:	41 5d                	pop    %r13
    1db5:	41 5e                	pop    %r14
    1db7:	41 5f                	pop    %r15
    1db9:	c3                   	retq   
    1dba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1dc0:	c5 f9 2f da          	vcomisd %xmm2,%xmm3
    1dc4:	0f 87 de 00 00 00    	ja     1ea8 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x2b8>
    1dca:	c5 f9 2f d8          	vcomisd %xmm0,%xmm3
    1dce:	0f 87 8f fe ff ff    	ja     1c63 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x73>
    1dd4:	c5 fb 11 03          	vmovsd %xmm0,(%rbx)
    1dd8:	c5 fb 11 08          	vmovsd %xmm1,(%rax)
    1ddc:	c5 fb 10 55 f8       	vmovsd -0x8(%rbp),%xmm2
    1de1:	e9 8a fe ff ff       	jmpq   1c70 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x80>
    1de6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1ded:	00 00 00 
    1df0:	48 89 d3             	mov    %rdx,%rbx
    1df3:	48 89 e8             	mov    %rbp,%rax
    1df6:	48 29 d8             	sub    %rbx,%rax
    1df9:	48 83 f8 18          	cmp    $0x18,%rax
    1dfd:	0f 8f ed fe ff ff    	jg     1cf0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x100>
    1e03:	48 39 dd             	cmp    %rbx,%rbp
    1e06:	74 a3                	je     1dab <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x1bb>
    1e08:	4c 8d 63 08          	lea    0x8(%rbx),%r12
    1e0c:	49 39 ec             	cmp    %rbp,%r12
    1e0f:	74 9a                	je     1dab <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x1bb>
    1e11:	41 bd 08 00 00 00    	mov    $0x8,%r13d
    1e17:	eb 3b                	jmp    1e54 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x264>
    1e19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1e20:	49 39 dc             	cmp    %rbx,%r12
    1e23:	74 1e                	je     1e43 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x253>
    1e25:	4c 89 e2             	mov    %r12,%rdx
    1e28:	48 29 da             	sub    %rbx,%rdx
    1e2b:	4a 8d 3c 2b          	lea    (%rbx,%r13,1),%rdi
    1e2f:	48 89 de             	mov    %rbx,%rsi
    1e32:	c5 fb 11 44 24 08    	vmovsd %xmm0,0x8(%rsp)
    1e38:	e8 c3 f4 ff ff       	callq  1300 <memmove@plt>
    1e3d:	c5 fb 10 44 24 08    	vmovsd 0x8(%rsp),%xmm0
    1e43:	c5 fb 11 03          	vmovsd %xmm0,(%rbx)
    1e47:	49 83 c4 08          	add    $0x8,%r12
    1e4b:	49 39 ec             	cmp    %rbp,%r12
    1e4e:	0f 84 57 ff ff ff    	je     1dab <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x1bb>
    1e54:	c4 c1 7b 10 04 24    	vmovsd (%r12),%xmm0
    1e5a:	c5 fb 10 0b          	vmovsd (%rbx),%xmm1
    1e5e:	c5 f9 2f c8          	vcomisd %xmm0,%xmm1
    1e62:	77 bc                	ja     1e20 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x230>
    1e64:	c4 c1 7b 10 4c 24 f8 	vmovsd -0x8(%r12),%xmm1
    1e6b:	49 8d 44 24 f8       	lea    -0x8(%r12),%rax
    1e70:	c5 f9 2f c8          	vcomisd %xmm0,%xmm1
    1e74:	76 4a                	jbe    1ec0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x2d0>
    1e76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1e7d:	00 00 00 
    1e80:	c5 fb 10 08          	vmovsd (%rax),%xmm1
    1e84:	48 89 c2             	mov    %rax,%rdx
    1e87:	c5 fb 11 48 08       	vmovsd %xmm1,0x8(%rax)
    1e8c:	c5 fb 10 48 f8       	vmovsd -0x8(%rax),%xmm1
    1e91:	48 83 e8 08          	sub    $0x8,%rax
    1e95:	c5 f9 2f c8          	vcomisd %xmm0,%xmm1
    1e99:	77 e5                	ja     1e80 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x290>
    1e9b:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    1e9f:	eb a6                	jmp    1e47 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x257>
    1ea1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1ea8:	c5 fb 11 13          	vmovsd %xmm2,(%rbx)
    1eac:	c5 fb 11 4b 08       	vmovsd %xmm1,0x8(%rbx)
    1eb1:	c5 fb 10 55 f8       	vmovsd -0x8(%rbp),%xmm2
    1eb6:	e9 b5 fd ff ff       	jmpq   1c70 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x80>
    1ebb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    1ec0:	4c 89 e2             	mov    %r12,%rdx
    1ec3:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    1ec7:	e9 7b ff ff ff       	jmpq   1e47 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]+0x257>
    1ecc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001ed0 <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])>:
    1ed0:	f3 0f 1e fa          	endbr64 
    1ed4:	55                   	push   %rbp
    1ed5:	49 89 f1             	mov    %rsi,%r9
    1ed8:	49 89 fb             	mov    %rdi,%r11
    1edb:	53                   	push   %rbx
    1edc:	48 8d aa 00 80 00 00 	lea    0x8000(%rdx),%rbp
    1ee3:	31 db                	xor    %ebx,%ebx
    1ee5:	4c 8d 92 00 81 00 00 	lea    0x8100(%rdx),%r10
    1eec:	48 89 ef             	mov    %rbp,%rdi
    1eef:	4d 89 d8             	mov    %r11,%r8
    1ef2:	41 0f b7 30          	movzwl (%r8),%esi
    1ef6:	48 8d 87 00 80 ff ff 	lea    -0x8000(%rdi),%rax
    1efd:	4c 89 c9             	mov    %r9,%rcx
    1f00:	0f b7 11             	movzwl (%rcx),%edx
    1f03:	48 05 00 01 00 00    	add    $0x100,%rax
    1f09:	66 0f af 90 00 ff ff 	imul   -0x100(%rax),%dx
    1f10:	ff 
    1f11:	48 83 c1 02          	add    $0x2,%rcx
    1f15:	01 d6                	add    %edx,%esi
    1f17:	66 41 89 30          	mov    %si,(%r8)
    1f1b:	48 39 c7             	cmp    %rax,%rdi
    1f1e:	75 e0                	jne    1f00 <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])+0x30>
    1f20:	48 83 c7 02          	add    $0x2,%rdi
    1f24:	49 83 c0 02          	add    $0x2,%r8
    1f28:	49 39 fa             	cmp    %rdi,%r10
    1f2b:	75 c5                	jne    1ef2 <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])+0x22>
    1f2d:	48 83 eb 80          	sub    $0xffffffffffffff80,%rbx
    1f31:	49 81 c1 00 01 00 00 	add    $0x100,%r9
    1f38:	49 81 c3 00 01 00 00 	add    $0x100,%r11
    1f3f:	48 81 fb 00 40 00 00 	cmp    $0x4000,%rbx
    1f46:	75 a4                	jne    1eec <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])+0x1c>
    1f48:	5b                   	pop    %rbx
    1f49:	5d                   	pop    %rbp
    1f4a:	c3                   	retq   
    1f4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001f50 <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])>:
    1f50:	f3 0f 1e fa          	endbr64 
    1f54:	55                   	push   %rbp
    1f55:	49 89 f1             	mov    %rsi,%r9
    1f58:	49 89 fb             	mov    %rdi,%r11
    1f5b:	53                   	push   %rbx
    1f5c:	48 8d aa 00 00 01 00 	lea    0x10000(%rdx),%rbp
    1f63:	31 db                	xor    %ebx,%ebx
    1f65:	4c 8d 92 00 02 01 00 	lea    0x10200(%rdx),%r10
    1f6c:	48 89 ef             	mov    %rbp,%rdi
    1f6f:	4d 89 d8             	mov    %r11,%r8
    1f72:	41 8b 30             	mov    (%r8),%esi
    1f75:	48 8d 87 00 00 ff ff 	lea    -0x10000(%rdi),%rax
    1f7c:	4c 89 c9             	mov    %r9,%rcx
    1f7f:	90                   	nop
    1f80:	8b 11                	mov    (%rcx),%edx
    1f82:	48 05 00 02 00 00    	add    $0x200,%rax
    1f88:	0f af 90 00 fe ff ff 	imul   -0x200(%rax),%edx
    1f8f:	48 83 c1 04          	add    $0x4,%rcx
    1f93:	01 d6                	add    %edx,%esi
    1f95:	41 89 30             	mov    %esi,(%r8)
    1f98:	48 39 c7             	cmp    %rax,%rdi
    1f9b:	75 e3                	jne    1f80 <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])+0x30>
    1f9d:	48 83 c7 04          	add    $0x4,%rdi
    1fa1:	49 83 c0 04          	add    $0x4,%r8
    1fa5:	49 39 fa             	cmp    %rdi,%r10
    1fa8:	75 c8                	jne    1f72 <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])+0x22>
    1faa:	48 83 eb 80          	sub    $0xffffffffffffff80,%rbx
    1fae:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    1fb5:	49 81 c3 00 02 00 00 	add    $0x200,%r11
    1fbc:	48 81 fb 00 40 00 00 	cmp    $0x4000,%rbx
    1fc3:	75 a7                	jne    1f6c <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])+0x1c>
    1fc5:	5b                   	pop    %rbx
    1fc6:	5d                   	pop    %rbp
    1fc7:	c3                   	retq   
    1fc8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    1fcf:	00 

0000000000001fd0 <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])>:
    1fd0:	f3 0f 1e fa          	endbr64 
    1fd4:	55                   	push   %rbp
    1fd5:	49 89 f1             	mov    %rsi,%r9
    1fd8:	49 89 fb             	mov    %rdi,%r11
    1fdb:	53                   	push   %rbx
    1fdc:	48 8d aa 00 00 02 00 	lea    0x20000(%rdx),%rbp
    1fe3:	31 db                	xor    %ebx,%ebx
    1fe5:	4c 8d 92 00 04 02 00 	lea    0x20400(%rdx),%r10
    1fec:	48 89 ef             	mov    %rbp,%rdi
    1fef:	4d 89 d8             	mov    %r11,%r8
    1ff2:	49 8b 30             	mov    (%r8),%rsi
    1ff5:	48 8d 87 00 00 fe ff 	lea    -0x20000(%rdi),%rax
    1ffc:	4c 89 c9             	mov    %r9,%rcx
    1fff:	90                   	nop
    2000:	48 8b 11             	mov    (%rcx),%rdx
    2003:	48 05 00 04 00 00    	add    $0x400,%rax
    2009:	48 0f af 90 00 fc ff 	imul   -0x400(%rax),%rdx
    2010:	ff 
    2011:	48 83 c1 08          	add    $0x8,%rcx
    2015:	48 01 d6             	add    %rdx,%rsi
    2018:	49 89 30             	mov    %rsi,(%r8)
    201b:	48 39 c7             	cmp    %rax,%rdi
    201e:	75 e0                	jne    2000 <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])+0x30>
    2020:	48 83 c7 08          	add    $0x8,%rdi
    2024:	49 83 c0 08          	add    $0x8,%r8
    2028:	49 39 fa             	cmp    %rdi,%r10
    202b:	75 c5                	jne    1ff2 <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])+0x22>
    202d:	48 83 eb 80          	sub    $0xffffffffffffff80,%rbx
    2031:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    2038:	49 81 c3 00 04 00 00 	add    $0x400,%r11
    203f:	48 81 fb 00 40 00 00 	cmp    $0x4000,%rbx
    2046:	75 a4                	jne    1fec <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])+0x1c>
    2048:	5b                   	pop    %rbx
    2049:	5d                   	pop    %rbp
    204a:	c3                   	retq   
    204b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002050 <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    2050:	f3 0f 1e fa          	endbr64 
    2054:	41 57                	push   %r15
    2056:	4c 8d ba 00 00 04 00 	lea    0x40000(%rdx),%r15
    205d:	41 56                	push   %r14
    205f:	45 31 f6             	xor    %r14d,%r14d
    2062:	41 55                	push   %r13
    2064:	49 89 fd             	mov    %rdi,%r13
    2067:	41 54                	push   %r12
    2069:	4c 8d a2 00 08 04 00 	lea    0x40800(%rdx),%r12
    2070:	55                   	push   %rbp
    2071:	48 89 f5             	mov    %rsi,%rbp
    2074:	53                   	push   %rbx
    2075:	4c 89 ff             	mov    %r15,%rdi
    2078:	4c 89 eb             	mov    %r13,%rbx
    207b:	4c 8b 13             	mov    (%rbx),%r10
    207e:	4c 8b 5b 08          	mov    0x8(%rbx),%r11
    2082:	48 8d 87 00 00 fc ff 	lea    -0x40000(%rdi),%rax
    2089:	48 89 ee             	mov    %rbp,%rsi
    208c:	0f 1f 40 00          	nopl   0x0(%rax)
    2090:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
    2094:	48 8b 10             	mov    (%rax),%rdx
    2097:	48 0f af d1          	imul   %rcx,%rdx
    209b:	48 8b 48 08          	mov    0x8(%rax),%rcx
    209f:	48 0f af 0e          	imul   (%rsi),%rcx
    20a3:	48 01 d1             	add    %rdx,%rcx
    20a6:	48 8b 10             	mov    (%rax),%rdx
    20a9:	c4 62 bb f6 0e       	mulx   (%rsi),%r8,%r9
    20ae:	49 01 c9             	add    %rcx,%r9
    20b1:	4d 01 c2             	add    %r8,%r10
    20b4:	4d 11 cb             	adc    %r9,%r11
    20b7:	48 05 00 08 00 00    	add    $0x800,%rax
    20bd:	4c 89 13             	mov    %r10,(%rbx)
    20c0:	4c 89 5b 08          	mov    %r11,0x8(%rbx)
    20c4:	48 83 c6 10          	add    $0x10,%rsi
    20c8:	48 39 c7             	cmp    %rax,%rdi
    20cb:	75 c3                	jne    2090 <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x40>
    20cd:	48 83 c7 10          	add    $0x10,%rdi
    20d1:	48 83 c3 10          	add    $0x10,%rbx
    20d5:	49 39 fc             	cmp    %rdi,%r12
    20d8:	75 a1                	jne    207b <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x2b>
    20da:	49 83 ee 80          	sub    $0xffffffffffffff80,%r14
    20de:	48 81 c5 00 08 00 00 	add    $0x800,%rbp
    20e5:	49 81 c5 00 08 00 00 	add    $0x800,%r13
    20ec:	49 81 fe 00 40 00 00 	cmp    $0x4000,%r14
    20f3:	75 80                	jne    2075 <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x25>
    20f5:	5b                   	pop    %rbx
    20f6:	5d                   	pop    %rbp
    20f7:	41 5c                	pop    %r12
    20f9:	41 5d                	pop    %r13
    20fb:	41 5e                	pop    %r14
    20fd:	41 5f                	pop    %r15
    20ff:	c3                   	retq   

0000000000002100 <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])>:
    2100:	f3 0f 1e fa          	endbr64 
    2104:	49 89 f9             	mov    %rdi,%r9
    2107:	45 31 d2             	xor    %r10d,%r10d
    210a:	48 89 f7             	mov    %rsi,%rdi
    210d:	4c 8d 9a 00 00 01 00 	lea    0x10000(%rdx),%r11
    2114:	4c 8d 82 00 02 01 00 	lea    0x10200(%rdx),%r8
    211b:	4c 89 d9             	mov    %r11,%rcx
    211e:	4c 89 ce             	mov    %r9,%rsi
    2121:	c5 fa 10 06          	vmovss (%rsi),%xmm0
    2125:	48 8d 81 00 00 ff ff 	lea    -0x10000(%rcx),%rax
    212c:	48 89 fa             	mov    %rdi,%rdx
    212f:	90                   	nop
    2130:	c5 fa 10 0a          	vmovss (%rdx),%xmm1
    2134:	48 05 00 02 00 00    	add    $0x200,%rax
    213a:	c4 e2 71 b9 80 00 fe 	vfmadd231ss -0x200(%rax),%xmm1,%xmm0
    2141:	ff ff 
    2143:	48 83 c2 04          	add    $0x4,%rdx
    2147:	c5 fa 11 06          	vmovss %xmm0,(%rsi)
    214b:	48 39 c1             	cmp    %rax,%rcx
    214e:	75 e0                	jne    2130 <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])+0x30>
    2150:	48 83 c1 04          	add    $0x4,%rcx
    2154:	48 83 c6 04          	add    $0x4,%rsi
    2158:	49 39 c8             	cmp    %rcx,%r8
    215b:	75 c4                	jne    2121 <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])+0x21>
    215d:	49 83 ea 80          	sub    $0xffffffffffffff80,%r10
    2161:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    2168:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    216f:	49 81 fa 00 40 00 00 	cmp    $0x4000,%r10
    2176:	75 a3                	jne    211b <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])+0x1b>
    2178:	c3                   	retq   
    2179:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002180 <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])>:
    2180:	f3 0f 1e fa          	endbr64 
    2184:	49 89 f9             	mov    %rdi,%r9
    2187:	45 31 d2             	xor    %r10d,%r10d
    218a:	48 89 f7             	mov    %rsi,%rdi
    218d:	4c 8d 9a 00 00 02 00 	lea    0x20000(%rdx),%r11
    2194:	4c 8d 82 00 04 02 00 	lea    0x20400(%rdx),%r8
    219b:	4c 89 d9             	mov    %r11,%rcx
    219e:	4c 89 ce             	mov    %r9,%rsi
    21a1:	c5 fb 10 06          	vmovsd (%rsi),%xmm0
    21a5:	48 8d 81 00 00 fe ff 	lea    -0x20000(%rcx),%rax
    21ac:	48 89 fa             	mov    %rdi,%rdx
    21af:	90                   	nop
    21b0:	c5 fb 10 0a          	vmovsd (%rdx),%xmm1
    21b4:	48 05 00 04 00 00    	add    $0x400,%rax
    21ba:	c4 e2 f1 b9 80 00 fc 	vfmadd231sd -0x400(%rax),%xmm1,%xmm0
    21c1:	ff ff 
    21c3:	48 83 c2 08          	add    $0x8,%rdx
    21c7:	c5 fb 11 06          	vmovsd %xmm0,(%rsi)
    21cb:	48 39 c1             	cmp    %rax,%rcx
    21ce:	75 e0                	jne    21b0 <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])+0x30>
    21d0:	48 83 c1 08          	add    $0x8,%rcx
    21d4:	48 83 c6 08          	add    $0x8,%rsi
    21d8:	49 39 c8             	cmp    %rcx,%r8
    21db:	75 c4                	jne    21a1 <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])+0x21>
    21dd:	49 83 ea 80          	sub    $0xffffffffffffff80,%r10
    21e1:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    21e8:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    21ef:	49 81 fa 00 40 00 00 	cmp    $0x4000,%r10
    21f6:	75 a3                	jne    219b <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])+0x1b>
    21f8:	c3                   	retq   
    21f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002200 <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    2200:	f3 0f 1e fa          	endbr64 
    2204:	49 89 f9             	mov    %rdi,%r9
    2207:	45 31 d2             	xor    %r10d,%r10d
    220a:	48 89 f7             	mov    %rsi,%rdi
    220d:	4c 8d 9a 00 00 04 00 	lea    0x40000(%rdx),%r11
    2214:	4c 8d 82 00 08 04 00 	lea    0x40800(%rdx),%r8
    221b:	4c 89 d9             	mov    %r11,%rcx
    221e:	4c 89 ce             	mov    %r9,%rsi
    2221:	db 2e                	fldt   (%rsi)
    2223:	48 8d 81 00 00 fc ff 	lea    -0x40000(%rcx),%rax
    222a:	48 89 fa             	mov    %rdi,%rdx
    222d:	0f 1f 00             	nopl   (%rax)
    2230:	db 2a                	fldt   (%rdx)
    2232:	48 05 00 08 00 00    	add    $0x800,%rax
    2238:	48 83 c2 10          	add    $0x10,%rdx
    223c:	db a8 00 f8 ff ff    	fldt   -0x800(%rax)
    2242:	de c9                	fmulp  %st,%st(1)
    2244:	de c1                	faddp  %st,%st(1)
    2246:	d9 c0                	fld    %st(0)
    2248:	db 3e                	fstpt  (%rsi)
    224a:	48 39 c1             	cmp    %rax,%rcx
    224d:	75 e1                	jne    2230 <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x30>
    224f:	dd d8                	fstp   %st(0)
    2251:	48 83 c1 10          	add    $0x10,%rcx
    2255:	48 83 c6 10          	add    $0x10,%rsi
    2259:	49 39 c8             	cmp    %rcx,%r8
    225c:	75 c3                	jne    2221 <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x21>
    225e:	49 83 ea 80          	sub    $0xffffffffffffff80,%r10
    2262:	48 81 c7 00 08 00 00 	add    $0x800,%rdi
    2269:	49 81 c1 00 08 00 00 	add    $0x800,%r9
    2270:	49 81 fa 00 40 00 00 	cmp    $0x4000,%r10
    2277:	75 a2                	jne    221b <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x1b>
    2279:	c3                   	retq   
    227a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000002280 <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    2280:	f3 0f 1e fa          	endbr64 
    2284:	41 57                	push   %r15
    2286:	48 8d 8a 00 00 04 00 	lea    0x40000(%rdx),%rcx
    228d:	41 56                	push   %r14
    228f:	41 55                	push   %r13
    2291:	4c 8d aa 00 08 04 00 	lea    0x40800(%rdx),%r13
    2298:	41 54                	push   %r12
    229a:	49 89 f4             	mov    %rsi,%r12
    229d:	55                   	push   %rbp
    229e:	53                   	push   %rbx
    229f:	48 83 ec 38          	sub    $0x38,%rsp
    22a3:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    22a8:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
    22af:	00 00 
    22b1:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
    22b6:	48 8b 5c 24 28       	mov    0x28(%rsp),%rbx
    22bb:	48 8b 6c 24 20       	mov    0x20(%rsp),%rbp
    22c0:	c5 f9 6f 55 00       	vmovdqa 0x0(%rbp),%xmm2
    22c5:	4c 8d bb 00 00 fc ff 	lea    -0x40000(%rbx),%r15
    22cc:	4d 89 e6             	mov    %r12,%r14
    22cf:	90                   	nop
    22d0:	c4 c1 79 6f 0f       	vmovdqa (%r15),%xmm1
    22d5:	c4 c1 79 6f 06       	vmovdqa (%r14),%xmm0
    22da:	c5 f8 29 14 24       	vmovaps %xmm2,(%rsp)
    22df:	e8 5c ef ff ff       	callq  1240 <__multf3@plt>
    22e4:	c5 f9 6f 14 24       	vmovdqa (%rsp),%xmm2
    22e9:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    22ed:	c5 f9 6f c2          	vmovdqa %xmm2,%xmm0
    22f1:	e8 da ef ff ff       	callq  12d0 <__addtf3@plt>
    22f6:	49 81 c7 00 08 00 00 	add    $0x800,%r15
    22fd:	c5 f9 6f d0          	vmovdqa %xmm0,%xmm2
    2301:	c5 f8 29 45 00       	vmovaps %xmm0,0x0(%rbp)
    2306:	49 83 c6 10          	add    $0x10,%r14
    230a:	4c 39 fb             	cmp    %r15,%rbx
    230d:	75 c1                	jne    22d0 <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x50>
    230f:	48 83 c3 10          	add    $0x10,%rbx
    2313:	48 83 c5 10          	add    $0x10,%rbp
    2317:	49 39 dd             	cmp    %rbx,%r13
    231a:	75 a4                	jne    22c0 <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x40>
    231c:	48 83 6c 24 18 80    	subq   $0xffffffffffffff80,0x18(%rsp)
    2322:	48 81 44 24 20 00 08 	addq   $0x800,0x20(%rsp)
    2329:	00 00 
    232b:	49 81 c4 00 08 00 00 	add    $0x800,%r12
    2332:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    2337:	48 3d 00 40 00 00    	cmp    $0x4000,%rax
    233d:	0f 85 73 ff ff ff    	jne    22b6 <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x36>
    2343:	48 83 c4 38          	add    $0x38,%rsp
    2347:	5b                   	pop    %rbx
    2348:	5d                   	pop    %rbp
    2349:	41 5c                	pop    %r12
    234b:	41 5d                	pop    %r13
    234d:	41 5e                	pop    %r14
    234f:	41 5f                	pop    %r15
    2351:	c3                   	retq   
    2352:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    2359:	00 00 00 
    235c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000002360 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])>:
    2360:	f3 0f 1e fa          	endbr64 
    2364:	55                   	push   %rbp
    2365:	48 89 f9             	mov    %rdi,%rcx
    2368:	4c 8d 97 00 01 00 00 	lea    0x100(%rdi),%r10
    236f:	48 89 e5             	mov    %rsp,%rbp
    2372:	41 56                	push   %r14
    2374:	4c 8d 4f 20          	lea    0x20(%rdi),%r9
    2378:	4c 8d 9a 00 80 00 00 	lea    0x8000(%rdx),%r11
    237f:	41 55                	push   %r13
    2381:	45 31 ed             	xor    %r13d,%r13d
    2384:	41 54                	push   %r12
    2386:	49 89 d4             	mov    %rdx,%r12
    2389:	53                   	push   %rbx
    238a:	48 89 f3             	mov    %rsi,%rbx
    238d:	4c 89 e6             	mov    %r12,%rsi
    2390:	48 89 df             	mov    %rbx,%rdi
    2393:	49 89 d8             	mov    %rbx,%r8
    2396:	e9 be 00 00 00       	jmpq   2459 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0xf9>
    239b:	4c 39 c1             	cmp    %r8,%rcx
    239e:	0f 93 c0             	setae  %al
    23a1:	44 08 f0             	or     %r14b,%al
    23a4:	0f 84 d2 00 00 00    	je     247c <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x11c>
    23aa:	c4 e2 7d 79 07       	vpbroadcastw (%rdi),%ymm0
    23af:	48 81 c6 00 01 00 00 	add    $0x100,%rsi
    23b6:	c5 fd d5 8e 00 ff ff 	vpmullw -0x100(%rsi),%ymm0,%ymm1
    23bd:	ff 
    23be:	c5 f5 fd 09          	vpaddw (%rcx),%ymm1,%ymm1
    23c2:	48 83 c7 02          	add    $0x2,%rdi
    23c6:	c5 fe 7f 09          	vmovdqu %ymm1,(%rcx)
    23ca:	c5 fd d5 8e 20 ff ff 	vpmullw -0xe0(%rsi),%ymm0,%ymm1
    23d1:	ff 
    23d2:	c5 f5 fd 49 20       	vpaddw 0x20(%rcx),%ymm1,%ymm1
    23d7:	c5 fe 7f 49 20       	vmovdqu %ymm1,0x20(%rcx)
    23dc:	c5 fd d5 8e 40 ff ff 	vpmullw -0xc0(%rsi),%ymm0,%ymm1
    23e3:	ff 
    23e4:	c5 f5 fd 49 40       	vpaddw 0x40(%rcx),%ymm1,%ymm1
    23e9:	c5 fe 7f 49 40       	vmovdqu %ymm1,0x40(%rcx)
    23ee:	c5 fd d5 8e 60 ff ff 	vpmullw -0xa0(%rsi),%ymm0,%ymm1
    23f5:	ff 
    23f6:	c5 f5 fd 49 60       	vpaddw 0x60(%rcx),%ymm1,%ymm1
    23fb:	c5 fe 7f 49 60       	vmovdqu %ymm1,0x60(%rcx)
    2400:	c5 fd d5 4e 80       	vpmullw -0x80(%rsi),%ymm0,%ymm1
    2405:	c5 f5 fd 89 80 00 00 	vpaddw 0x80(%rcx),%ymm1,%ymm1
    240c:	00 
    240d:	c5 fe 7f 89 80 00 00 	vmovdqu %ymm1,0x80(%rcx)
    2414:	00 
    2415:	c5 fd d5 4e a0       	vpmullw -0x60(%rsi),%ymm0,%ymm1
    241a:	c5 f5 fd 89 a0 00 00 	vpaddw 0xa0(%rcx),%ymm1,%ymm1
    2421:	00 
    2422:	c5 fe 7f 89 a0 00 00 	vmovdqu %ymm1,0xa0(%rcx)
    2429:	00 
    242a:	c5 fd d5 4e c0       	vpmullw -0x40(%rsi),%ymm0,%ymm1
    242f:	c5 f5 fd 89 c0 00 00 	vpaddw 0xc0(%rcx),%ymm1,%ymm1
    2436:	00 
    2437:	c5 fe 7f 89 c0 00 00 	vmovdqu %ymm1,0xc0(%rcx)
    243e:	00 
    243f:	c5 fd d5 46 e0       	vpmullw -0x20(%rsi),%ymm0,%ymm0
    2444:	c5 fd fd 81 e0 00 00 	vpaddw 0xe0(%rcx),%ymm0,%ymm0
    244b:	00 
    244c:	c5 fe 7f 81 e0 00 00 	vmovdqu %ymm0,0xe0(%rcx)
    2453:	00 
    2454:	49 39 f3             	cmp    %rsi,%r11
    2457:	74 4e                	je     24a7 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x147>
    2459:	4d 39 d0             	cmp    %r10,%r8
    245c:	48 8d 46 20          	lea    0x20(%rsi),%rax
    2460:	41 0f 93 c6          	setae  %r14b
    2464:	49 83 c0 02          	add    $0x2,%r8
    2468:	48 39 c1             	cmp    %rax,%rcx
    246b:	0f 93 c2             	setae  %dl
    246e:	4c 39 ce             	cmp    %r9,%rsi
    2471:	0f 93 c0             	setae  %al
    2474:	08 c2                	or     %al,%dl
    2476:	0f 85 1f ff ff ff    	jne    239b <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x3b>
    247c:	31 c0                	xor    %eax,%eax
    247e:	66 90                	xchg   %ax,%ax
    2480:	0f b7 14 46          	movzwl (%rsi,%rax,2),%edx
    2484:	66 0f af 17          	imul   (%rdi),%dx
    2488:	66 01 14 41          	add    %dx,(%rcx,%rax,2)
    248c:	48 ff c0             	inc    %rax
    248f:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    2495:	75 e9                	jne    2480 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x120>
    2497:	48 81 c6 00 01 00 00 	add    $0x100,%rsi
    249e:	48 83 c7 02          	add    $0x2,%rdi
    24a2:	49 39 f3             	cmp    %rsi,%r11
    24a5:	75 b2                	jne    2459 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0xf9>
    24a7:	49 83 ed 80          	sub    $0xffffffffffffff80,%r13
    24ab:	48 81 c1 00 01 00 00 	add    $0x100,%rcx
    24b2:	48 81 c3 00 01 00 00 	add    $0x100,%rbx
    24b9:	49 81 c2 00 01 00 00 	add    $0x100,%r10
    24c0:	49 81 c1 00 01 00 00 	add    $0x100,%r9
    24c7:	49 81 fd 00 40 00 00 	cmp    $0x4000,%r13
    24ce:	0f 85 b9 fe ff ff    	jne    238d <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x2d>
    24d4:	c5 f8 77             	vzeroupper 
    24d7:	5b                   	pop    %rbx
    24d8:	41 5c                	pop    %r12
    24da:	41 5d                	pop    %r13
    24dc:	41 5e                	pop    %r14
    24de:	5d                   	pop    %rbp
    24df:	c3                   	retq   

00000000000024e0 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])>:
    24e0:	f3 0f 1e fa          	endbr64 
    24e4:	55                   	push   %rbp
    24e5:	48 89 f9             	mov    %rdi,%rcx
    24e8:	4c 8d 97 00 02 00 00 	lea    0x200(%rdi),%r10
    24ef:	48 89 e5             	mov    %rsp,%rbp
    24f2:	41 56                	push   %r14
    24f4:	4c 8d 4f 20          	lea    0x20(%rdi),%r9
    24f8:	4c 8d 9a 00 00 01 00 	lea    0x10000(%rdx),%r11
    24ff:	41 55                	push   %r13
    2501:	45 31 ed             	xor    %r13d,%r13d
    2504:	41 54                	push   %r12
    2506:	49 89 d4             	mov    %rdx,%r12
    2509:	53                   	push   %rbx
    250a:	48 89 f3             	mov    %rsi,%rbx
    250d:	4c 89 e6             	mov    %r12,%rsi
    2510:	48 89 df             	mov    %rbx,%rdi
    2513:	49 89 d8             	mov    %rbx,%r8
    2516:	e9 8e 01 00 00       	jmpq   26a9 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x1c9>
    251b:	4c 39 c1             	cmp    %r8,%rcx
    251e:	0f 93 c0             	setae  %al
    2521:	44 08 f0             	or     %r14b,%al
    2524:	0f 84 a2 01 00 00    	je     26cc <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x1ec>
    252a:	c4 e2 7d 58 07       	vpbroadcastd (%rdi),%ymm0
    252f:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    2536:	c4 e2 7d 40 8e 00 fe 	vpmulld -0x200(%rsi),%ymm0,%ymm1
    253d:	ff ff 
    253f:	c5 f5 fe 09          	vpaddd (%rcx),%ymm1,%ymm1
    2543:	48 83 c7 04          	add    $0x4,%rdi
    2547:	c5 fe 7f 09          	vmovdqu %ymm1,(%rcx)
    254b:	c4 e2 7d 40 8e 20 fe 	vpmulld -0x1e0(%rsi),%ymm0,%ymm1
    2552:	ff ff 
    2554:	c5 f5 fe 49 20       	vpaddd 0x20(%rcx),%ymm1,%ymm1
    2559:	c5 fe 7f 49 20       	vmovdqu %ymm1,0x20(%rcx)
    255e:	c4 e2 7d 40 8e 40 fe 	vpmulld -0x1c0(%rsi),%ymm0,%ymm1
    2565:	ff ff 
    2567:	c5 f5 fe 49 40       	vpaddd 0x40(%rcx),%ymm1,%ymm1
    256c:	c5 fe 7f 49 40       	vmovdqu %ymm1,0x40(%rcx)
    2571:	c4 e2 7d 40 8e 60 fe 	vpmulld -0x1a0(%rsi),%ymm0,%ymm1
    2578:	ff ff 
    257a:	c5 f5 fe 49 60       	vpaddd 0x60(%rcx),%ymm1,%ymm1
    257f:	c5 fe 7f 49 60       	vmovdqu %ymm1,0x60(%rcx)
    2584:	c4 e2 7d 40 8e 80 fe 	vpmulld -0x180(%rsi),%ymm0,%ymm1
    258b:	ff ff 
    258d:	c5 f5 fe 89 80 00 00 	vpaddd 0x80(%rcx),%ymm1,%ymm1
    2594:	00 
    2595:	c5 fe 7f 89 80 00 00 	vmovdqu %ymm1,0x80(%rcx)
    259c:	00 
    259d:	c4 e2 7d 40 8e a0 fe 	vpmulld -0x160(%rsi),%ymm0,%ymm1
    25a4:	ff ff 
    25a6:	c5 f5 fe 89 a0 00 00 	vpaddd 0xa0(%rcx),%ymm1,%ymm1
    25ad:	00 
    25ae:	c5 fe 7f 89 a0 00 00 	vmovdqu %ymm1,0xa0(%rcx)
    25b5:	00 
    25b6:	c4 e2 7d 40 8e c0 fe 	vpmulld -0x140(%rsi),%ymm0,%ymm1
    25bd:	ff ff 
    25bf:	c5 f5 fe 89 c0 00 00 	vpaddd 0xc0(%rcx),%ymm1,%ymm1
    25c6:	00 
    25c7:	c5 fe 7f 89 c0 00 00 	vmovdqu %ymm1,0xc0(%rcx)
    25ce:	00 
    25cf:	c4 e2 7d 40 8e e0 fe 	vpmulld -0x120(%rsi),%ymm0,%ymm1
    25d6:	ff ff 
    25d8:	c5 f5 fe 89 e0 00 00 	vpaddd 0xe0(%rcx),%ymm1,%ymm1
    25df:	00 
    25e0:	c5 fe 7f 89 e0 00 00 	vmovdqu %ymm1,0xe0(%rcx)
    25e7:	00 
    25e8:	c4 e2 7d 40 8e 00 ff 	vpmulld -0x100(%rsi),%ymm0,%ymm1
    25ef:	ff ff 
    25f1:	c5 f5 fe 89 00 01 00 	vpaddd 0x100(%rcx),%ymm1,%ymm1
    25f8:	00 
    25f9:	c5 fe 7f 89 00 01 00 	vmovdqu %ymm1,0x100(%rcx)
    2600:	00 
    2601:	c4 e2 7d 40 8e 20 ff 	vpmulld -0xe0(%rsi),%ymm0,%ymm1
    2608:	ff ff 
    260a:	c5 f5 fe 89 20 01 00 	vpaddd 0x120(%rcx),%ymm1,%ymm1
    2611:	00 
    2612:	c5 fe 7f 89 20 01 00 	vmovdqu %ymm1,0x120(%rcx)
    2619:	00 
    261a:	c4 e2 7d 40 8e 40 ff 	vpmulld -0xc0(%rsi),%ymm0,%ymm1
    2621:	ff ff 
    2623:	c5 f5 fe 89 40 01 00 	vpaddd 0x140(%rcx),%ymm1,%ymm1
    262a:	00 
    262b:	c5 fe 7f 89 40 01 00 	vmovdqu %ymm1,0x140(%rcx)
    2632:	00 
    2633:	c4 e2 7d 40 8e 60 ff 	vpmulld -0xa0(%rsi),%ymm0,%ymm1
    263a:	ff ff 
    263c:	c5 f5 fe 89 60 01 00 	vpaddd 0x160(%rcx),%ymm1,%ymm1
    2643:	00 
    2644:	c5 fe 7f 89 60 01 00 	vmovdqu %ymm1,0x160(%rcx)
    264b:	00 
    264c:	c4 e2 7d 40 4e 80    	vpmulld -0x80(%rsi),%ymm0,%ymm1
    2652:	c5 f5 fe 89 80 01 00 	vpaddd 0x180(%rcx),%ymm1,%ymm1
    2659:	00 
    265a:	c5 fe 7f 89 80 01 00 	vmovdqu %ymm1,0x180(%rcx)
    2661:	00 
    2662:	c4 e2 7d 40 4e a0    	vpmulld -0x60(%rsi),%ymm0,%ymm1
    2668:	c5 f5 fe 89 a0 01 00 	vpaddd 0x1a0(%rcx),%ymm1,%ymm1
    266f:	00 
    2670:	c5 fe 7f 89 a0 01 00 	vmovdqu %ymm1,0x1a0(%rcx)
    2677:	00 
    2678:	c4 e2 7d 40 4e c0    	vpmulld -0x40(%rsi),%ymm0,%ymm1
    267e:	c5 f5 fe 89 c0 01 00 	vpaddd 0x1c0(%rcx),%ymm1,%ymm1
    2685:	00 
    2686:	c5 fe 7f 89 c0 01 00 	vmovdqu %ymm1,0x1c0(%rcx)
    268d:	00 
    268e:	c4 e2 7d 40 46 e0    	vpmulld -0x20(%rsi),%ymm0,%ymm0
    2694:	c5 fd fe 81 e0 01 00 	vpaddd 0x1e0(%rcx),%ymm0,%ymm0
    269b:	00 
    269c:	c5 fe 7f 81 e0 01 00 	vmovdqu %ymm0,0x1e0(%rcx)
    26a3:	00 
    26a4:	49 39 f3             	cmp    %rsi,%r11
    26a7:	74 4b                	je     26f4 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x214>
    26a9:	4d 39 d0             	cmp    %r10,%r8
    26ac:	48 8d 46 20          	lea    0x20(%rsi),%rax
    26b0:	41 0f 93 c6          	setae  %r14b
    26b4:	49 83 c0 04          	add    $0x4,%r8
    26b8:	48 39 c1             	cmp    %rax,%rcx
    26bb:	0f 93 c2             	setae  %dl
    26be:	4c 39 ce             	cmp    %r9,%rsi
    26c1:	0f 93 c0             	setae  %al
    26c4:	08 c2                	or     %al,%dl
    26c6:	0f 85 4f fe ff ff    	jne    251b <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x3b>
    26cc:	31 c0                	xor    %eax,%eax
    26ce:	66 90                	xchg   %ax,%ax
    26d0:	8b 17                	mov    (%rdi),%edx
    26d2:	0f af 14 86          	imul   (%rsi,%rax,4),%edx
    26d6:	01 14 81             	add    %edx,(%rcx,%rax,4)
    26d9:	48 ff c0             	inc    %rax
    26dc:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    26e2:	75 ec                	jne    26d0 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x1f0>
    26e4:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    26eb:	48 83 c7 04          	add    $0x4,%rdi
    26ef:	49 39 f3             	cmp    %rsi,%r11
    26f2:	75 b5                	jne    26a9 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x1c9>
    26f4:	49 83 ed 80          	sub    $0xffffffffffffff80,%r13
    26f8:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    26ff:	48 81 c3 00 02 00 00 	add    $0x200,%rbx
    2706:	49 81 c2 00 02 00 00 	add    $0x200,%r10
    270d:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    2714:	49 81 fd 00 40 00 00 	cmp    $0x4000,%r13
    271b:	0f 85 ec fd ff ff    	jne    250d <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x2d>
    2721:	c5 f8 77             	vzeroupper 
    2724:	5b                   	pop    %rbx
    2725:	41 5c                	pop    %r12
    2727:	41 5d                	pop    %r13
    2729:	41 5e                	pop    %r14
    272b:	5d                   	pop    %rbp
    272c:	c3                   	retq   
    272d:	0f 1f 00             	nopl   (%rax)

0000000000002730 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])>:
    2730:	f3 0f 1e fa          	endbr64 
    2734:	55                   	push   %rbp
    2735:	4c 8d 97 00 04 00 00 	lea    0x400(%rdi),%r10
    273c:	4c 8d 4f 20          	lea    0x20(%rdi),%r9
    2740:	48 89 e5             	mov    %rsp,%rbp
    2743:	41 56                	push   %r14
    2745:	41 55                	push   %r13
    2747:	45 31 ed             	xor    %r13d,%r13d
    274a:	41 54                	push   %r12
    274c:	49 89 d4             	mov    %rdx,%r12
    274f:	4d 8d 9c 24 00 00 02 	lea    0x20000(%r12),%r11
    2756:	00 
    2757:	53                   	push   %rbx
    2758:	48 89 fa             	mov    %rdi,%rdx
    275b:	48 89 f3             	mov    %rsi,%rbx
    275e:	4c 89 e6             	mov    %r12,%rsi
    2761:	48 89 df             	mov    %rbx,%rdi
    2764:	49 89 d8             	mov    %rbx,%r8
    2767:	4d 39 d0             	cmp    %r10,%r8
    276a:	48 8d 46 20          	lea    0x20(%rsi),%rax
    276e:	41 0f 93 c6          	setae  %r14b
    2772:	49 83 c0 08          	add    $0x8,%r8
    2776:	48 39 c2             	cmp    %rax,%rdx
    2779:	0f 93 c1             	setae  %cl
    277c:	4c 39 ce             	cmp    %r9,%rsi
    277f:	0f 93 c0             	setae  %al
    2782:	08 c1                	or     %al,%cl
    2784:	0f 84 a4 00 00 00    	je     282e <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0xfe>
    278a:	4c 39 c2             	cmp    %r8,%rdx
    278d:	0f 93 c0             	setae  %al
    2790:	44 08 f0             	or     %r14b,%al
    2793:	0f 84 95 00 00 00    	je     282e <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0xfe>
    2799:	c4 e2 7d 59 1f       	vpbroadcastq (%rdi),%ymm3
    279e:	31 c0                	xor    %eax,%eax
    27a0:	c5 dd 73 d3 20       	vpsrlq $0x20,%ymm3,%ymm4
    27a5:	0f 1f 00             	nopl   (%rax)
    27a8:	c5 fe 6f 14 06       	vmovdqu (%rsi,%rax,1),%ymm2
    27ad:	c5 fd 73 d2 20       	vpsrlq $0x20,%ymm2,%ymm0
    27b2:	c5 ed f4 cb          	vpmuludq %ymm3,%ymm2,%ymm1
    27b6:	c5 fd f4 c3          	vpmuludq %ymm3,%ymm0,%ymm0
    27ba:	c5 dd f4 d2          	vpmuludq %ymm2,%ymm4,%ymm2
    27be:	c5 fd d4 c2          	vpaddq %ymm2,%ymm0,%ymm0
    27c2:	c5 fd 73 f0 20       	vpsllq $0x20,%ymm0,%ymm0
    27c7:	c5 f5 d4 c0          	vpaddq %ymm0,%ymm1,%ymm0
    27cb:	c5 fd d4 04 02       	vpaddq (%rdx,%rax,1),%ymm0,%ymm0
    27d0:	c5 fe 7f 04 02       	vmovdqu %ymm0,(%rdx,%rax,1)
    27d5:	48 83 c0 20          	add    $0x20,%rax
    27d9:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    27df:	75 c7                	jne    27a8 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0x78>
    27e1:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    27e8:	48 83 c7 08          	add    $0x8,%rdi
    27ec:	4c 39 de             	cmp    %r11,%rsi
    27ef:	0f 85 72 ff ff ff    	jne    2767 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0x37>
    27f5:	49 83 ed 80          	sub    $0xffffffffffffff80,%r13
    27f9:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    2800:	48 81 c3 00 04 00 00 	add    $0x400,%rbx
    2807:	49 81 c2 00 04 00 00 	add    $0x400,%r10
    280e:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    2815:	49 81 fd 00 40 00 00 	cmp    $0x4000,%r13
    281c:	0f 85 3c ff ff ff    	jne    275e <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0x2e>
    2822:	c5 f8 77             	vzeroupper 
    2825:	5b                   	pop    %rbx
    2826:	41 5c                	pop    %r12
    2828:	41 5d                	pop    %r13
    282a:	41 5e                	pop    %r14
    282c:	5d                   	pop    %rbp
    282d:	c3                   	retq   
    282e:	31 c0                	xor    %eax,%eax
    2830:	48 8b 0f             	mov    (%rdi),%rcx
    2833:	48 0f af 0c c6       	imul   (%rsi,%rax,8),%rcx
    2838:	48 01 0c c2          	add    %rcx,(%rdx,%rax,8)
    283c:	48 ff c0             	inc    %rax
    283f:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    2845:	75 e9                	jne    2830 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0x100>
    2847:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    284e:	48 83 c7 08          	add    $0x8,%rdi
    2852:	4c 39 de             	cmp    %r11,%rsi
    2855:	0f 85 0c ff ff ff    	jne    2767 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0x37>
    285b:	eb 98                	jmp    27f5 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0xc5>
    285d:	0f 1f 00             	nopl   (%rax)

0000000000002860 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    2860:	f3 0f 1e fa          	endbr64 
    2864:	55                   	push   %rbp
    2865:	4c 8d 9e 00 08 00 00 	lea    0x800(%rsi),%r11
    286c:	49 89 fa             	mov    %rdi,%r10
    286f:	53                   	push   %rbx
    2870:	48 8d ae 00 08 04 00 	lea    0x40800(%rsi),%rbp
    2877:	48 89 d3             	mov    %rdx,%rbx
    287a:	4d 8d 83 00 f8 ff ff 	lea    -0x800(%r11),%r8
    2881:	49 89 d9             	mov    %rbx,%r9
    2884:	31 c0                	xor    %eax,%eax
    2886:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    288d:	00 00 00 
    2890:	49 8b 48 08          	mov    0x8(%r8),%rcx
    2894:	49 8b 14 01          	mov    (%r9,%rax,1),%rdx
    2898:	48 0f af d1          	imul   %rcx,%rdx
    289c:	49 8b 4c 01 08       	mov    0x8(%r9,%rax,1),%rcx
    28a1:	49 0f af 08          	imul   (%r8),%rcx
    28a5:	48 01 d1             	add    %rdx,%rcx
    28a8:	49 8b 14 01          	mov    (%r9,%rax,1),%rdx
    28ac:	c4 c2 cb f6 38       	mulx   (%r8),%rsi,%rdi
    28b1:	48 01 cf             	add    %rcx,%rdi
    28b4:	49 01 34 02          	add    %rsi,(%r10,%rax,1)
    28b8:	49 11 7c 02 08       	adc    %rdi,0x8(%r10,%rax,1)
    28bd:	48 83 c0 10          	add    $0x10,%rax
    28c1:	48 3d 00 08 00 00    	cmp    $0x800,%rax
    28c7:	75 c7                	jne    2890 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x30>
    28c9:	49 83 c0 10          	add    $0x10,%r8
    28cd:	49 81 c1 00 08 00 00 	add    $0x800,%r9
    28d4:	4d 39 c3             	cmp    %r8,%r11
    28d7:	75 ab                	jne    2884 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x24>
    28d9:	49 81 c3 00 08 00 00 	add    $0x800,%r11
    28e0:	49 81 c2 00 08 00 00 	add    $0x800,%r10
    28e7:	4c 39 dd             	cmp    %r11,%rbp
    28ea:	75 8e                	jne    287a <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x1a>
    28ec:	5b                   	pop    %rbx
    28ed:	5d                   	pop    %rbp
    28ee:	c3                   	retq   
    28ef:	90                   	nop

00000000000028f0 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])>:
    28f0:	f3 0f 1e fa          	endbr64 
    28f4:	55                   	push   %rbp
    28f5:	4c 8d 97 00 02 00 00 	lea    0x200(%rdi),%r10
    28fc:	4c 8d 4f 20          	lea    0x20(%rdi),%r9
    2900:	48 89 e5             	mov    %rsp,%rbp
    2903:	41 56                	push   %r14
    2905:	41 55                	push   %r13
    2907:	45 31 ed             	xor    %r13d,%r13d
    290a:	41 54                	push   %r12
    290c:	49 89 d4             	mov    %rdx,%r12
    290f:	4d 8d 9c 24 00 00 01 	lea    0x10000(%r12),%r11
    2916:	00 
    2917:	53                   	push   %rbx
    2918:	48 89 fa             	mov    %rdi,%rdx
    291b:	48 89 f3             	mov    %rsi,%rbx
    291e:	4c 89 e1             	mov    %r12,%rcx
    2921:	48 89 de             	mov    %rbx,%rsi
    2924:	48 89 df             	mov    %rbx,%rdi
    2927:	e9 8a 01 00 00       	jmpq   2ab6 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x1c6>
    292c:	48 39 fa             	cmp    %rdi,%rdx
    292f:	0f 93 c0             	setae  %al
    2932:	44 08 f0             	or     %r14b,%al
    2935:	0f 84 a0 01 00 00    	je     2adb <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x1eb>
    293b:	c4 e2 7d 18 06       	vbroadcastss (%rsi),%ymm0
    2940:	c5 fc 10 09          	vmovups (%rcx),%ymm1
    2944:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    294b:	c4 e2 7d a8 0a       	vfmadd213ps (%rdx),%ymm0,%ymm1
    2950:	48 83 c6 04          	add    $0x4,%rsi
    2954:	c5 fc 11 0a          	vmovups %ymm1,(%rdx)
    2958:	c5 fc 10 89 20 fe ff 	vmovups -0x1e0(%rcx),%ymm1
    295f:	ff 
    2960:	c4 e2 7d a8 4a 20    	vfmadd213ps 0x20(%rdx),%ymm0,%ymm1
    2966:	c5 fc 11 4a 20       	vmovups %ymm1,0x20(%rdx)
    296b:	c5 fc 10 89 40 fe ff 	vmovups -0x1c0(%rcx),%ymm1
    2972:	ff 
    2973:	c4 e2 7d a8 4a 40    	vfmadd213ps 0x40(%rdx),%ymm0,%ymm1
    2979:	c5 fc 11 4a 40       	vmovups %ymm1,0x40(%rdx)
    297e:	c5 fc 10 89 60 fe ff 	vmovups -0x1a0(%rcx),%ymm1
    2985:	ff 
    2986:	c4 e2 7d a8 4a 60    	vfmadd213ps 0x60(%rdx),%ymm0,%ymm1
    298c:	c5 fc 11 4a 60       	vmovups %ymm1,0x60(%rdx)
    2991:	c5 fc 10 89 80 fe ff 	vmovups -0x180(%rcx),%ymm1
    2998:	ff 
    2999:	c4 e2 7d a8 8a 80 00 	vfmadd213ps 0x80(%rdx),%ymm0,%ymm1
    29a0:	00 00 
    29a2:	c5 fc 11 8a 80 00 00 	vmovups %ymm1,0x80(%rdx)
    29a9:	00 
    29aa:	c5 fc 10 89 a0 fe ff 	vmovups -0x160(%rcx),%ymm1
    29b1:	ff 
    29b2:	c4 e2 7d a8 8a a0 00 	vfmadd213ps 0xa0(%rdx),%ymm0,%ymm1
    29b9:	00 00 
    29bb:	c5 fc 11 8a a0 00 00 	vmovups %ymm1,0xa0(%rdx)
    29c2:	00 
    29c3:	c5 fc 10 89 c0 fe ff 	vmovups -0x140(%rcx),%ymm1
    29ca:	ff 
    29cb:	c4 e2 7d a8 8a c0 00 	vfmadd213ps 0xc0(%rdx),%ymm0,%ymm1
    29d2:	00 00 
    29d4:	c5 fc 11 8a c0 00 00 	vmovups %ymm1,0xc0(%rdx)
    29db:	00 
    29dc:	c5 fc 10 89 e0 fe ff 	vmovups -0x120(%rcx),%ymm1
    29e3:	ff 
    29e4:	c4 e2 7d a8 8a e0 00 	vfmadd213ps 0xe0(%rdx),%ymm0,%ymm1
    29eb:	00 00 
    29ed:	c5 fc 11 8a e0 00 00 	vmovups %ymm1,0xe0(%rdx)
    29f4:	00 
    29f5:	c5 fc 10 89 00 ff ff 	vmovups -0x100(%rcx),%ymm1
    29fc:	ff 
    29fd:	c4 e2 7d a8 8a 00 01 	vfmadd213ps 0x100(%rdx),%ymm0,%ymm1
    2a04:	00 00 
    2a06:	c5 fc 11 8a 00 01 00 	vmovups %ymm1,0x100(%rdx)
    2a0d:	00 
    2a0e:	c5 fc 10 89 20 ff ff 	vmovups -0xe0(%rcx),%ymm1
    2a15:	ff 
    2a16:	c4 e2 7d a8 8a 20 01 	vfmadd213ps 0x120(%rdx),%ymm0,%ymm1
    2a1d:	00 00 
    2a1f:	c5 fc 11 8a 20 01 00 	vmovups %ymm1,0x120(%rdx)
    2a26:	00 
    2a27:	c5 fc 10 89 40 ff ff 	vmovups -0xc0(%rcx),%ymm1
    2a2e:	ff 
    2a2f:	c4 e2 7d a8 8a 40 01 	vfmadd213ps 0x140(%rdx),%ymm0,%ymm1
    2a36:	00 00 
    2a38:	c5 fc 10 9a e0 01 00 	vmovups 0x1e0(%rdx),%ymm3
    2a3f:	00 
    2a40:	c5 fc 11 8a 40 01 00 	vmovups %ymm1,0x140(%rdx)
    2a47:	00 
    2a48:	c5 fc 10 89 60 ff ff 	vmovups -0xa0(%rcx),%ymm1
    2a4f:	ff 
    2a50:	c4 e2 7d a8 8a 60 01 	vfmadd213ps 0x160(%rdx),%ymm0,%ymm1
    2a57:	00 00 
    2a59:	c5 fc 11 8a 60 01 00 	vmovups %ymm1,0x160(%rdx)
    2a60:	00 
    2a61:	c5 fc 10 49 80       	vmovups -0x80(%rcx),%ymm1
    2a66:	c4 e2 7d a8 8a 80 01 	vfmadd213ps 0x180(%rdx),%ymm0,%ymm1
    2a6d:	00 00 
    2a6f:	c5 fc 11 8a 80 01 00 	vmovups %ymm1,0x180(%rdx)
    2a76:	00 
    2a77:	c5 fc 10 49 a0       	vmovups -0x60(%rcx),%ymm1
    2a7c:	c4 e2 7d a8 8a a0 01 	vfmadd213ps 0x1a0(%rdx),%ymm0,%ymm1
    2a83:	00 00 
    2a85:	c5 fc 11 8a a0 01 00 	vmovups %ymm1,0x1a0(%rdx)
    2a8c:	00 
    2a8d:	c5 fc 10 49 c0       	vmovups -0x40(%rcx),%ymm1
    2a92:	c4 e2 7d a8 8a c0 01 	vfmadd213ps 0x1c0(%rdx),%ymm0,%ymm1
    2a99:	00 00 
    2a9b:	c5 fc 11 8a c0 01 00 	vmovups %ymm1,0x1c0(%rdx)
    2aa2:	00 
    2aa3:	c4 e2 65 98 41 e0    	vfmadd132ps -0x20(%rcx),%ymm3,%ymm0
    2aa9:	c5 fc 11 82 e0 01 00 	vmovups %ymm0,0x1e0(%rdx)
    2ab0:	00 
    2ab1:	49 39 cb             	cmp    %rcx,%r11
    2ab4:	74 59                	je     2b0f <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x21f>
    2ab6:	4c 39 d7             	cmp    %r10,%rdi
    2ab9:	48 8d 41 20          	lea    0x20(%rcx),%rax
    2abd:	41 0f 93 c6          	setae  %r14b
    2ac1:	48 83 c7 04          	add    $0x4,%rdi
    2ac5:	48 39 c2             	cmp    %rax,%rdx
    2ac8:	41 0f 93 c0          	setae  %r8b
    2acc:	4c 39 c9             	cmp    %r9,%rcx
    2acf:	0f 93 c0             	setae  %al
    2ad2:	41 08 c0             	or     %al,%r8b
    2ad5:	0f 85 51 fe ff ff    	jne    292c <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x3c>
    2adb:	31 c0                	xor    %eax,%eax
    2add:	0f 1f 00             	nopl   (%rax)
    2ae0:	c5 fa 10 14 82       	vmovss (%rdx,%rax,4),%xmm2
    2ae5:	c5 fa 10 06          	vmovss (%rsi),%xmm0
    2ae9:	c4 e2 69 99 04 81    	vfmadd132ss (%rcx,%rax,4),%xmm2,%xmm0
    2aef:	c5 fa 11 04 82       	vmovss %xmm0,(%rdx,%rax,4)
    2af4:	48 ff c0             	inc    %rax
    2af7:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    2afd:	75 e1                	jne    2ae0 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x1f0>
    2aff:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    2b06:	48 83 c6 04          	add    $0x4,%rsi
    2b0a:	49 39 cb             	cmp    %rcx,%r11
    2b0d:	75 a7                	jne    2ab6 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x1c6>
    2b0f:	49 83 ed 80          	sub    $0xffffffffffffff80,%r13
    2b13:	48 81 c2 00 02 00 00 	add    $0x200,%rdx
    2b1a:	48 81 c3 00 02 00 00 	add    $0x200,%rbx
    2b21:	49 81 c2 00 02 00 00 	add    $0x200,%r10
    2b28:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    2b2f:	49 81 fd 00 40 00 00 	cmp    $0x4000,%r13
    2b36:	0f 85 e2 fd ff ff    	jne    291e <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x2e>
    2b3c:	c5 f8 77             	vzeroupper 
    2b3f:	5b                   	pop    %rbx
    2b40:	41 5c                	pop    %r12
    2b42:	41 5d                	pop    %r13
    2b44:	41 5e                	pop    %r14
    2b46:	5d                   	pop    %rbp
    2b47:	c3                   	retq   
    2b48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    2b4f:	00 

0000000000002b50 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])>:
    2b50:	f3 0f 1e fa          	endbr64 
    2b54:	55                   	push   %rbp
    2b55:	4c 8d 97 00 04 00 00 	lea    0x400(%rdi),%r10
    2b5c:	4c 8d 4f 20          	lea    0x20(%rdi),%r9
    2b60:	48 89 e5             	mov    %rsp,%rbp
    2b63:	41 56                	push   %r14
    2b65:	41 55                	push   %r13
    2b67:	45 31 ed             	xor    %r13d,%r13d
    2b6a:	41 54                	push   %r12
    2b6c:	49 89 d4             	mov    %rdx,%r12
    2b6f:	4d 8d 9c 24 00 00 02 	lea    0x20000(%r12),%r11
    2b76:	00 
    2b77:	53                   	push   %rbx
    2b78:	48 89 fa             	mov    %rdi,%rdx
    2b7b:	48 89 f3             	mov    %rsi,%rbx
    2b7e:	4c 89 e1             	mov    %r12,%rcx
    2b81:	48 89 de             	mov    %rbx,%rsi
    2b84:	48 89 df             	mov    %rbx,%rdi
    2b87:	4c 39 d7             	cmp    %r10,%rdi
    2b8a:	48 8d 41 20          	lea    0x20(%rcx),%rax
    2b8e:	41 0f 93 c6          	setae  %r14b
    2b92:	48 83 c7 08          	add    $0x8,%rdi
    2b96:	48 39 c2             	cmp    %rax,%rdx
    2b99:	41 0f 93 c0          	setae  %r8b
    2b9d:	4c 39 c9             	cmp    %r9,%rcx
    2ba0:	0f 93 c0             	setae  %al
    2ba3:	41 08 c0             	or     %al,%r8b
    2ba6:	74 7d                	je     2c25 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0xd5>
    2ba8:	48 39 fa             	cmp    %rdi,%rdx
    2bab:	0f 93 c0             	setae  %al
    2bae:	44 08 f0             	or     %r14b,%al
    2bb1:	74 72                	je     2c25 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0xd5>
    2bb3:	c4 e2 7d 19 0e       	vbroadcastsd (%rsi),%ymm1
    2bb8:	31 c0                	xor    %eax,%eax
    2bba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2bc0:	c5 fd 10 04 01       	vmovupd (%rcx,%rax,1),%ymm0
    2bc5:	c4 e2 f5 a8 04 02    	vfmadd213pd (%rdx,%rax,1),%ymm1,%ymm0
    2bcb:	c5 fd 11 04 02       	vmovupd %ymm0,(%rdx,%rax,1)
    2bd0:	48 83 c0 20          	add    $0x20,%rax
    2bd4:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    2bda:	75 e4                	jne    2bc0 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0x70>
    2bdc:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    2be3:	48 83 c6 08          	add    $0x8,%rsi
    2be7:	4c 39 d9             	cmp    %r11,%rcx
    2bea:	75 9b                	jne    2b87 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0x37>
    2bec:	49 83 ed 80          	sub    $0xffffffffffffff80,%r13
    2bf0:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    2bf7:	48 81 c3 00 04 00 00 	add    $0x400,%rbx
    2bfe:	49 81 c2 00 04 00 00 	add    $0x400,%r10
    2c05:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    2c0c:	49 81 fd 00 40 00 00 	cmp    $0x4000,%r13
    2c13:	0f 85 65 ff ff ff    	jne    2b7e <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0x2e>
    2c19:	c5 f8 77             	vzeroupper 
    2c1c:	5b                   	pop    %rbx
    2c1d:	41 5c                	pop    %r12
    2c1f:	41 5d                	pop    %r13
    2c21:	41 5e                	pop    %r14
    2c23:	5d                   	pop    %rbp
    2c24:	c3                   	retq   
    2c25:	31 c0                	xor    %eax,%eax
    2c27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    2c2e:	00 00 
    2c30:	c5 fb 10 14 c2       	vmovsd (%rdx,%rax,8),%xmm2
    2c35:	c5 fb 10 06          	vmovsd (%rsi),%xmm0
    2c39:	c4 e2 e9 99 04 c1    	vfmadd132sd (%rcx,%rax,8),%xmm2,%xmm0
    2c3f:	c5 fb 11 04 c2       	vmovsd %xmm0,(%rdx,%rax,8)
    2c44:	48 ff c0             	inc    %rax
    2c47:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    2c4d:	75 e1                	jne    2c30 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0xe0>
    2c4f:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    2c56:	48 83 c6 08          	add    $0x8,%rsi
    2c5a:	4c 39 d9             	cmp    %r11,%rcx
    2c5d:	0f 85 24 ff ff ff    	jne    2b87 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0x37>
    2c63:	eb 87                	jmp    2bec <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0x9c>
    2c65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    2c6c:	00 00 00 
    2c6f:	90                   	nop

0000000000002c70 <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    2c70:	f3 0f 1e fa          	endbr64 
    2c74:	49 89 d1             	mov    %rdx,%r9
    2c77:	4c 8d 86 00 08 00 00 	lea    0x800(%rsi),%r8
    2c7e:	48 89 fa             	mov    %rdi,%rdx
    2c81:	48 8d be 00 08 04 00 	lea    0x40800(%rsi),%rdi
    2c88:	49 8d 88 00 f8 ff ff 	lea    -0x800(%r8),%rcx
    2c8f:	4c 89 ce             	mov    %r9,%rsi
    2c92:	31 c0                	xor    %eax,%eax
    2c94:	0f 1f 40 00          	nopl   0x0(%rax)
    2c98:	db 29                	fldt   (%rcx)
    2c9a:	db 2c 06             	fldt   (%rsi,%rax,1)
    2c9d:	de c9                	fmulp  %st,%st(1)
    2c9f:	db 2c 02             	fldt   (%rdx,%rax,1)
    2ca2:	de c1                	faddp  %st,%st(1)
    2ca4:	db 3c 02             	fstpt  (%rdx,%rax,1)
    2ca7:	48 83 c0 10          	add    $0x10,%rax
    2cab:	48 3d 00 08 00 00    	cmp    $0x800,%rax
    2cb1:	75 e5                	jne    2c98 <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x28>
    2cb3:	48 83 c1 10          	add    $0x10,%rcx
    2cb7:	48 81 c6 00 08 00 00 	add    $0x800,%rsi
    2cbe:	49 39 c8             	cmp    %rcx,%r8
    2cc1:	75 cf                	jne    2c92 <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x22>
    2cc3:	49 81 c0 00 08 00 00 	add    $0x800,%r8
    2cca:	48 81 c2 00 08 00 00 	add    $0x800,%rdx
    2cd1:	4c 39 c7             	cmp    %r8,%rdi
    2cd4:	75 b2                	jne    2c88 <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x18>
    2cd6:	c3                   	retq   
    2cd7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    2cde:	00 00 

0000000000002ce0 <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    2ce0:	f3 0f 1e fa          	endbr64 
    2ce4:	41 57                	push   %r15
    2ce6:	48 89 f0             	mov    %rsi,%rax
    2ce9:	48 05 00 08 04 00    	add    $0x40800,%rax
    2cef:	41 56                	push   %r14
    2cf1:	49 89 d6             	mov    %rdx,%r14
    2cf4:	41 55                	push   %r13
    2cf6:	4c 8d ae 00 08 00 00 	lea    0x800(%rsi),%r13
    2cfd:	41 54                	push   %r12
    2cff:	55                   	push   %rbp
    2d00:	53                   	push   %rbx
    2d01:	48 89 fb             	mov    %rdi,%rbx
    2d04:	48 83 ec 18          	sub    $0x18,%rsp
    2d08:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    2d0d:	49 8d ad 00 f8 ff ff 	lea    -0x800(%r13),%rbp
    2d14:	4d 89 f4             	mov    %r14,%r12
    2d17:	45 31 ff             	xor    %r15d,%r15d
    2d1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2d20:	c4 81 79 6f 0c 3c    	vmovdqa (%r12,%r15,1),%xmm1
    2d26:	c5 f9 6f 45 00       	vmovdqa 0x0(%rbp),%xmm0
    2d2b:	e8 10 e5 ff ff       	callq  1240 <__multf3@plt>
    2d30:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    2d34:	c4 a1 79 6f 04 3b    	vmovdqa (%rbx,%r15,1),%xmm0
    2d3a:	e8 91 e5 ff ff       	callq  12d0 <__addtf3@plt>
    2d3f:	c4 a1 78 29 04 3b    	vmovaps %xmm0,(%rbx,%r15,1)
    2d45:	49 83 c7 10          	add    $0x10,%r15
    2d49:	49 81 ff 00 08 00 00 	cmp    $0x800,%r15
    2d50:	75 ce                	jne    2d20 <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x40>
    2d52:	48 83 c5 10          	add    $0x10,%rbp
    2d56:	49 81 c4 00 08 00 00 	add    $0x800,%r12
    2d5d:	49 39 ed             	cmp    %rbp,%r13
    2d60:	75 b5                	jne    2d17 <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x37>
    2d62:	49 81 c5 00 08 00 00 	add    $0x800,%r13
    2d69:	48 81 c3 00 08 00 00 	add    $0x800,%rbx
    2d70:	4c 39 6c 24 08       	cmp    %r13,0x8(%rsp)
    2d75:	75 96                	jne    2d0d <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x2d>
    2d77:	48 83 c4 18          	add    $0x18,%rsp
    2d7b:	5b                   	pop    %rbx
    2d7c:	5d                   	pop    %rbp
    2d7d:	41 5c                	pop    %r12
    2d7f:	41 5d                	pop    %r13
    2d81:	41 5e                	pop    %r14
    2d83:	41 5f                	pop    %r15
    2d85:	c3                   	retq   
    2d86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    2d8d:	00 00 00 

0000000000002d90 <void jik<short>(short (*) [128], short (*) [128], short (*) [128])>:
    2d90:	f3 0f 1e fa          	endbr64 
    2d94:	55                   	push   %rbp
    2d95:	4c 8d 9f 00 80 00 00 	lea    0x8000(%rdi),%r11
    2d9c:	48 89 f5             	mov    %rsi,%rbp
    2d9f:	53                   	push   %rbx
    2da0:	49 89 d2             	mov    %rdx,%r10
    2da3:	4c 8d 82 00 80 00 00 	lea    0x8000(%rdx),%r8
    2daa:	31 db                	xor    %ebx,%ebx
    2dac:	49 8d bb 00 80 ff ff 	lea    -0x8000(%r11),%rdi
    2db3:	49 89 e9             	mov    %rbp,%r9
    2db6:	0f b7 37             	movzwl (%rdi),%esi
    2db9:	4c 89 d0             	mov    %r10,%rax
    2dbc:	4c 89 c9             	mov    %r9,%rcx
    2dbf:	90                   	nop
    2dc0:	0f b7 11             	movzwl (%rcx),%edx
    2dc3:	48 05 00 01 00 00    	add    $0x100,%rax
    2dc9:	66 0f af 90 00 ff ff 	imul   -0x100(%rax),%dx
    2dd0:	ff 
    2dd1:	48 83 c1 02          	add    $0x2,%rcx
    2dd5:	01 d6                	add    %edx,%esi
    2dd7:	66 89 37             	mov    %si,(%rdi)
    2dda:	49 39 c0             	cmp    %rax,%r8
    2ddd:	75 e1                	jne    2dc0 <void jik<short>(short (*) [128], short (*) [128], short (*) [128])+0x30>
    2ddf:	48 81 c7 00 01 00 00 	add    $0x100,%rdi
    2de6:	49 81 c1 00 01 00 00 	add    $0x100,%r9
    2ded:	49 39 fb             	cmp    %rdi,%r11
    2df0:	75 c4                	jne    2db6 <void jik<short>(short (*) [128], short (*) [128], short (*) [128])+0x26>
    2df2:	48 ff c3             	inc    %rbx
    2df5:	49 83 c3 02          	add    $0x2,%r11
    2df9:	49 83 c2 02          	add    $0x2,%r10
    2dfd:	49 83 c0 02          	add    $0x2,%r8
    2e01:	48 81 fb 80 00 00 00 	cmp    $0x80,%rbx
    2e08:	75 a2                	jne    2dac <void jik<short>(short (*) [128], short (*) [128], short (*) [128])+0x1c>
    2e0a:	5b                   	pop    %rbx
    2e0b:	5d                   	pop    %rbp
    2e0c:	c3                   	retq   
    2e0d:	0f 1f 00             	nopl   (%rax)

0000000000002e10 <void jik<int>(int (*) [128], int (*) [128], int (*) [128])>:
    2e10:	f3 0f 1e fa          	endbr64 
    2e14:	55                   	push   %rbp
    2e15:	4c 8d 9f 00 00 01 00 	lea    0x10000(%rdi),%r11
    2e1c:	48 89 f5             	mov    %rsi,%rbp
    2e1f:	53                   	push   %rbx
    2e20:	49 89 d2             	mov    %rdx,%r10
    2e23:	4c 8d 82 00 00 01 00 	lea    0x10000(%rdx),%r8
    2e2a:	31 db                	xor    %ebx,%ebx
    2e2c:	49 8d bb 00 00 ff ff 	lea    -0x10000(%r11),%rdi
    2e33:	49 89 e9             	mov    %rbp,%r9
    2e36:	8b 37                	mov    (%rdi),%esi
    2e38:	4c 89 d0             	mov    %r10,%rax
    2e3b:	4c 89 c9             	mov    %r9,%rcx
    2e3e:	66 90                	xchg   %ax,%ax
    2e40:	8b 11                	mov    (%rcx),%edx
    2e42:	48 05 00 02 00 00    	add    $0x200,%rax
    2e48:	0f af 90 00 fe ff ff 	imul   -0x200(%rax),%edx
    2e4f:	48 83 c1 04          	add    $0x4,%rcx
    2e53:	01 d6                	add    %edx,%esi
    2e55:	89 37                	mov    %esi,(%rdi)
    2e57:	4c 39 c0             	cmp    %r8,%rax
    2e5a:	75 e4                	jne    2e40 <void jik<int>(int (*) [128], int (*) [128], int (*) [128])+0x30>
    2e5c:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    2e63:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    2e6a:	4c 39 df             	cmp    %r11,%rdi
    2e6d:	75 c7                	jne    2e36 <void jik<int>(int (*) [128], int (*) [128], int (*) [128])+0x26>
    2e6f:	48 ff c3             	inc    %rbx
    2e72:	4c 8d 5f 04          	lea    0x4(%rdi),%r11
    2e76:	49 83 c2 04          	add    $0x4,%r10
    2e7a:	4c 8d 40 04          	lea    0x4(%rax),%r8
    2e7e:	48 81 fb 80 00 00 00 	cmp    $0x80,%rbx
    2e85:	75 a5                	jne    2e2c <void jik<int>(int (*) [128], int (*) [128], int (*) [128])+0x1c>
    2e87:	5b                   	pop    %rbx
    2e88:	5d                   	pop    %rbp
    2e89:	c3                   	retq   
    2e8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000002e90 <void jik<long>(long (*) [128], long (*) [128], long (*) [128])>:
    2e90:	f3 0f 1e fa          	endbr64 
    2e94:	55                   	push   %rbp
    2e95:	4c 8d 9f 00 00 02 00 	lea    0x20000(%rdi),%r11
    2e9c:	48 89 f5             	mov    %rsi,%rbp
    2e9f:	53                   	push   %rbx
    2ea0:	49 89 d2             	mov    %rdx,%r10
    2ea3:	4c 8d 82 00 00 02 00 	lea    0x20000(%rdx),%r8
    2eaa:	31 db                	xor    %ebx,%ebx
    2eac:	49 8d bb 00 00 fe ff 	lea    -0x20000(%r11),%rdi
    2eb3:	49 89 e9             	mov    %rbp,%r9
    2eb6:	48 8b 37             	mov    (%rdi),%rsi
    2eb9:	4c 89 d0             	mov    %r10,%rax
    2ebc:	4c 89 c9             	mov    %r9,%rcx
    2ebf:	90                   	nop
    2ec0:	48 8b 11             	mov    (%rcx),%rdx
    2ec3:	48 05 00 04 00 00    	add    $0x400,%rax
    2ec9:	48 0f af 90 00 fc ff 	imul   -0x400(%rax),%rdx
    2ed0:	ff 
    2ed1:	48 83 c1 08          	add    $0x8,%rcx
    2ed5:	48 01 d6             	add    %rdx,%rsi
    2ed8:	48 89 37             	mov    %rsi,(%rdi)
    2edb:	4c 39 c0             	cmp    %r8,%rax
    2ede:	75 e0                	jne    2ec0 <void jik<long>(long (*) [128], long (*) [128], long (*) [128])+0x30>
    2ee0:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    2ee7:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    2eee:	4c 39 df             	cmp    %r11,%rdi
    2ef1:	75 c3                	jne    2eb6 <void jik<long>(long (*) [128], long (*) [128], long (*) [128])+0x26>
    2ef3:	48 ff c3             	inc    %rbx
    2ef6:	4c 8d 5f 08          	lea    0x8(%rdi),%r11
    2efa:	49 83 c2 08          	add    $0x8,%r10
    2efe:	4c 8d 40 08          	lea    0x8(%rax),%r8
    2f02:	48 81 fb 80 00 00 00 	cmp    $0x80,%rbx
    2f09:	75 a1                	jne    2eac <void jik<long>(long (*) [128], long (*) [128], long (*) [128])+0x1c>
    2f0b:	5b                   	pop    %rbx
    2f0c:	5d                   	pop    %rbp
    2f0d:	c3                   	retq   
    2f0e:	66 90                	xchg   %ax,%ax

0000000000002f10 <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    2f10:	f3 0f 1e fa          	endbr64 
    2f14:	41 57                	push   %r15
    2f16:	45 31 ff             	xor    %r15d,%r15d
    2f19:	41 56                	push   %r14
    2f1b:	49 89 f6             	mov    %rsi,%r14
    2f1e:	41 55                	push   %r13
    2f20:	4c 8d af 00 00 04 00 	lea    0x40000(%rdi),%r13
    2f27:	41 54                	push   %r12
    2f29:	49 89 d4             	mov    %rdx,%r12
    2f2c:	55                   	push   %rbp
    2f2d:	53                   	push   %rbx
    2f2e:	48 8d 9a 00 00 04 00 	lea    0x40000(%rdx),%rbx
    2f35:	49 8d bd 00 00 fc ff 	lea    -0x40000(%r13),%rdi
    2f3c:	4c 89 f5             	mov    %r14,%rbp
    2f3f:	4c 8b 17             	mov    (%rdi),%r10
    2f42:	4c 8b 5f 08          	mov    0x8(%rdi),%r11
    2f46:	4c 89 e0             	mov    %r12,%rax
    2f49:	48 89 ee             	mov    %rbp,%rsi
    2f4c:	0f 1f 40 00          	nopl   0x0(%rax)
    2f50:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
    2f54:	48 8b 10             	mov    (%rax),%rdx
    2f57:	48 0f af d1          	imul   %rcx,%rdx
    2f5b:	48 8b 48 08          	mov    0x8(%rax),%rcx
    2f5f:	48 0f af 0e          	imul   (%rsi),%rcx
    2f63:	48 01 d1             	add    %rdx,%rcx
    2f66:	48 8b 10             	mov    (%rax),%rdx
    2f69:	c4 62 bb f6 0e       	mulx   (%rsi),%r8,%r9
    2f6e:	49 01 c9             	add    %rcx,%r9
    2f71:	4d 01 c2             	add    %r8,%r10
    2f74:	4d 11 cb             	adc    %r9,%r11
    2f77:	48 05 00 08 00 00    	add    $0x800,%rax
    2f7d:	4c 89 17             	mov    %r10,(%rdi)
    2f80:	4c 89 5f 08          	mov    %r11,0x8(%rdi)
    2f84:	48 83 c6 10          	add    $0x10,%rsi
    2f88:	48 39 d8             	cmp    %rbx,%rax
    2f8b:	75 c3                	jne    2f50 <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x40>
    2f8d:	48 81 c7 00 08 00 00 	add    $0x800,%rdi
    2f94:	48 81 c5 00 08 00 00 	add    $0x800,%rbp
    2f9b:	4c 39 ef             	cmp    %r13,%rdi
    2f9e:	75 9f                	jne    2f3f <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x2f>
    2fa0:	49 ff c7             	inc    %r15
    2fa3:	4c 8d 6f 10          	lea    0x10(%rdi),%r13
    2fa7:	49 83 c4 10          	add    $0x10,%r12
    2fab:	48 8d 58 10          	lea    0x10(%rax),%rbx
    2faf:	49 81 ff 80 00 00 00 	cmp    $0x80,%r15
    2fb6:	0f 85 79 ff ff ff    	jne    2f35 <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x25>
    2fbc:	5b                   	pop    %rbx
    2fbd:	5d                   	pop    %rbp
    2fbe:	41 5c                	pop    %r12
    2fc0:	41 5d                	pop    %r13
    2fc2:	41 5e                	pop    %r14
    2fc4:	41 5f                	pop    %r15
    2fc6:	c3                   	retq   
    2fc7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    2fce:	00 00 

0000000000002fd0 <void jik<float>(float (*) [128], float (*) [128], float (*) [128])>:
    2fd0:	f3 0f 1e fa          	endbr64 
    2fd4:	49 89 f3             	mov    %rsi,%r11
    2fd7:	4c 8d 8f 00 00 01 00 	lea    0x10000(%rdi),%r9
    2fde:	49 89 d0             	mov    %rdx,%r8
    2fe1:	48 8d b2 00 00 01 00 	lea    0x10000(%rdx),%rsi
    2fe8:	45 31 d2             	xor    %r10d,%r10d
    2feb:	49 8d 89 00 00 ff ff 	lea    -0x10000(%r9),%rcx
    2ff2:	4c 89 df             	mov    %r11,%rdi
    2ff5:	c5 fa 10 01          	vmovss (%rcx),%xmm0
    2ff9:	4c 89 c0             	mov    %r8,%rax
    2ffc:	48 89 fa             	mov    %rdi,%rdx
    2fff:	90                   	nop
    3000:	c5 fa 10 0a          	vmovss (%rdx),%xmm1
    3004:	48 05 00 02 00 00    	add    $0x200,%rax
    300a:	c4 e2 71 b9 80 00 fe 	vfmadd231ss -0x200(%rax),%xmm1,%xmm0
    3011:	ff ff 
    3013:	48 83 c2 04          	add    $0x4,%rdx
    3017:	c5 fa 11 01          	vmovss %xmm0,(%rcx)
    301b:	48 39 f0             	cmp    %rsi,%rax
    301e:	75 e0                	jne    3000 <void jik<float>(float (*) [128], float (*) [128], float (*) [128])+0x30>
    3020:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    3027:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    302e:	4c 39 c9             	cmp    %r9,%rcx
    3031:	75 c2                	jne    2ff5 <void jik<float>(float (*) [128], float (*) [128], float (*) [128])+0x25>
    3033:	49 ff c2             	inc    %r10
    3036:	4c 8d 49 04          	lea    0x4(%rcx),%r9
    303a:	49 83 c0 04          	add    $0x4,%r8
    303e:	48 8d 70 04          	lea    0x4(%rax),%rsi
    3042:	49 81 fa 80 00 00 00 	cmp    $0x80,%r10
    3049:	75 a0                	jne    2feb <void jik<float>(float (*) [128], float (*) [128], float (*) [128])+0x1b>
    304b:	c3                   	retq   
    304c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000003050 <void jik<double>(double (*) [128], double (*) [128], double (*) [128])>:
    3050:	f3 0f 1e fa          	endbr64 
    3054:	49 89 f3             	mov    %rsi,%r11
    3057:	4c 8d 8f 00 00 02 00 	lea    0x20000(%rdi),%r9
    305e:	49 89 d0             	mov    %rdx,%r8
    3061:	48 8d b2 00 00 02 00 	lea    0x20000(%rdx),%rsi
    3068:	45 31 d2             	xor    %r10d,%r10d
    306b:	49 8d 89 00 00 fe ff 	lea    -0x20000(%r9),%rcx
    3072:	4c 89 df             	mov    %r11,%rdi
    3075:	c5 fb 10 01          	vmovsd (%rcx),%xmm0
    3079:	4c 89 c0             	mov    %r8,%rax
    307c:	48 89 fa             	mov    %rdi,%rdx
    307f:	90                   	nop
    3080:	c5 fb 10 0a          	vmovsd (%rdx),%xmm1
    3084:	48 05 00 04 00 00    	add    $0x400,%rax
    308a:	c4 e2 f1 b9 80 00 fc 	vfmadd231sd -0x400(%rax),%xmm1,%xmm0
    3091:	ff ff 
    3093:	48 83 c2 08          	add    $0x8,%rdx
    3097:	c5 fb 11 01          	vmovsd %xmm0,(%rcx)
    309b:	48 39 f0             	cmp    %rsi,%rax
    309e:	75 e0                	jne    3080 <void jik<double>(double (*) [128], double (*) [128], double (*) [128])+0x30>
    30a0:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    30a7:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    30ae:	4c 39 c9             	cmp    %r9,%rcx
    30b1:	75 c2                	jne    3075 <void jik<double>(double (*) [128], double (*) [128], double (*) [128])+0x25>
    30b3:	49 ff c2             	inc    %r10
    30b6:	4c 8d 49 08          	lea    0x8(%rcx),%r9
    30ba:	49 83 c0 08          	add    $0x8,%r8
    30be:	48 8d 70 08          	lea    0x8(%rax),%rsi
    30c2:	49 81 fa 80 00 00 00 	cmp    $0x80,%r10
    30c9:	75 a0                	jne    306b <void jik<double>(double (*) [128], double (*) [128], double (*) [128])+0x1b>
    30cb:	c3                   	retq   
    30cc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000030d0 <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    30d0:	f3 0f 1e fa          	endbr64 
    30d4:	49 89 f3             	mov    %rsi,%r11
    30d7:	4c 8d 8f 00 00 04 00 	lea    0x40000(%rdi),%r9
    30de:	49 89 d0             	mov    %rdx,%r8
    30e1:	48 8d b2 00 00 04 00 	lea    0x40000(%rdx),%rsi
    30e8:	45 31 d2             	xor    %r10d,%r10d
    30eb:	49 8d 89 00 00 fc ff 	lea    -0x40000(%r9),%rcx
    30f2:	4c 89 df             	mov    %r11,%rdi
    30f5:	db 29                	fldt   (%rcx)
    30f7:	4c 89 c0             	mov    %r8,%rax
    30fa:	48 89 fa             	mov    %rdi,%rdx
    30fd:	0f 1f 00             	nopl   (%rax)
    3100:	db 2a                	fldt   (%rdx)
    3102:	48 05 00 08 00 00    	add    $0x800,%rax
    3108:	48 83 c2 10          	add    $0x10,%rdx
    310c:	db a8 00 f8 ff ff    	fldt   -0x800(%rax)
    3112:	de c9                	fmulp  %st,%st(1)
    3114:	de c1                	faddp  %st,%st(1)
    3116:	d9 c0                	fld    %st(0)
    3118:	db 39                	fstpt  (%rcx)
    311a:	48 39 f0             	cmp    %rsi,%rax
    311d:	75 e1                	jne    3100 <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x30>
    311f:	dd d8                	fstp   %st(0)
    3121:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    3128:	48 81 c7 00 08 00 00 	add    $0x800,%rdi
    312f:	4c 39 c9             	cmp    %r9,%rcx
    3132:	75 c1                	jne    30f5 <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x25>
    3134:	49 ff c2             	inc    %r10
    3137:	4c 8d 49 10          	lea    0x10(%rcx),%r9
    313b:	49 83 c0 10          	add    $0x10,%r8
    313f:	48 8d 70 10          	lea    0x10(%rax),%rsi
    3143:	49 81 fa 80 00 00 00 	cmp    $0x80,%r10
    314a:	75 9f                	jne    30eb <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x1b>
    314c:	c3                   	retq   
    314d:	0f 1f 00             	nopl   (%rax)

0000000000003150 <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    3150:	f3 0f 1e fa          	endbr64 
    3154:	41 57                	push   %r15
    3156:	48 8d 87 00 00 04 00 	lea    0x40000(%rdi),%rax
    315d:	41 56                	push   %r14
    315f:	41 55                	push   %r13
    3161:	49 89 d5             	mov    %rdx,%r13
    3164:	41 54                	push   %r12
    3166:	55                   	push   %rbp
    3167:	48 8d aa 00 00 04 00 	lea    0x40000(%rdx),%rbp
    316e:	53                   	push   %rbx
    316f:	48 83 ec 38          	sub    $0x38,%rsp
    3173:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    3178:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    317d:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
    3184:	00 00 
    3186:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    318b:	4c 8b 64 24 28       	mov    0x28(%rsp),%r12
    3190:	48 8d 98 00 00 fc ff 	lea    -0x40000(%rax),%rbx
    3197:	c5 f9 6f 13          	vmovdqa (%rbx),%xmm2
    319b:	4d 89 ef             	mov    %r13,%r15
    319e:	4d 89 e6             	mov    %r12,%r14
    31a1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    31a8:	c4 c1 79 6f 0f       	vmovdqa (%r15),%xmm1
    31ad:	c4 c1 79 6f 06       	vmovdqa (%r14),%xmm0
    31b2:	c5 f8 29 14 24       	vmovaps %xmm2,(%rsp)
    31b7:	e8 84 e0 ff ff       	callq  1240 <__multf3@plt>
    31bc:	c5 f9 6f 14 24       	vmovdqa (%rsp),%xmm2
    31c1:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    31c5:	c5 f9 6f c2          	vmovdqa %xmm2,%xmm0
    31c9:	e8 02 e1 ff ff       	callq  12d0 <__addtf3@plt>
    31ce:	49 81 c7 00 08 00 00 	add    $0x800,%r15
    31d5:	c5 f9 6f d0          	vmovdqa %xmm0,%xmm2
    31d9:	c5 f8 29 03          	vmovaps %xmm0,(%rbx)
    31dd:	49 83 c6 10          	add    $0x10,%r14
    31e1:	49 39 ef             	cmp    %rbp,%r15
    31e4:	75 c2                	jne    31a8 <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x58>
    31e6:	48 81 c3 00 08 00 00 	add    $0x800,%rbx
    31ed:	49 81 c4 00 08 00 00 	add    $0x800,%r12
    31f4:	48 3b 5c 24 18       	cmp    0x18(%rsp),%rbx
    31f9:	75 9c                	jne    3197 <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x47>
    31fb:	48 ff 44 24 20       	incq   0x20(%rsp)
    3200:	48 8d 4b 10          	lea    0x10(%rbx),%rcx
    3204:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
    3209:	49 83 c5 10          	add    $0x10,%r13
    320d:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    3212:	49 8d 6f 10          	lea    0x10(%r15),%rbp
    3216:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    321c:	0f 85 64 ff ff ff    	jne    3186 <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x36>
    3222:	48 83 c4 38          	add    $0x38,%rsp
    3226:	5b                   	pop    %rbx
    3227:	5d                   	pop    %rbp
    3228:	41 5c                	pop    %r12
    322a:	41 5d                	pop    %r13
    322c:	41 5e                	pop    %r14
    322e:	41 5f                	pop    %r15
    3230:	c3                   	retq   
    3231:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3238:	00 00 00 
    323b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003240 <void jki<short>(short (*) [128], short (*) [128], short (*) [128])>:
    3240:	f3 0f 1e fa          	endbr64 
    3244:	55                   	push   %rbp
    3245:	49 89 f9             	mov    %rdi,%r9
    3248:	49 89 d3             	mov    %rdx,%r11
    324b:	53                   	push   %rbx
    324c:	48 8d bf 00 80 00 00 	lea    0x8000(%rdi),%rdi
    3253:	48 89 f3             	mov    %rsi,%rbx
    3256:	49 8d a9 00 01 00 00 	lea    0x100(%r9),%rbp
    325d:	4c 8d 96 00 01 00 00 	lea    0x100(%rsi),%r10
    3264:	49 89 d8             	mov    %rbx,%r8
    3267:	4c 89 de             	mov    %r11,%rsi
    326a:	4c 89 c1             	mov    %r8,%rcx
    326d:	4c 89 c8             	mov    %r9,%rax
    3270:	0f b7 11             	movzwl (%rcx),%edx
    3273:	48 81 c1 00 01 00 00 	add    $0x100,%rcx
    327a:	66 0f af 16          	imul   (%rsi),%dx
    327e:	66 01 10             	add    %dx,(%rax)
    3281:	48 05 00 01 00 00    	add    $0x100,%rax
    3287:	48 39 c7             	cmp    %rax,%rdi
    328a:	75 e4                	jne    3270 <void jki<short>(short (*) [128], short (*) [128], short (*) [128])+0x30>
    328c:	49 83 c0 02          	add    $0x2,%r8
    3290:	48 81 c6 00 01 00 00 	add    $0x100,%rsi
    3297:	4d 39 c2             	cmp    %r8,%r10
    329a:	75 ce                	jne    326a <void jki<short>(short (*) [128], short (*) [128], short (*) [128])+0x2a>
    329c:	49 83 c1 02          	add    $0x2,%r9
    32a0:	48 83 c7 02          	add    $0x2,%rdi
    32a4:	49 83 c3 02          	add    $0x2,%r11
    32a8:	4c 39 cd             	cmp    %r9,%rbp
    32ab:	75 b7                	jne    3264 <void jki<short>(short (*) [128], short (*) [128], short (*) [128])+0x24>
    32ad:	5b                   	pop    %rbx
    32ae:	5d                   	pop    %rbp
    32af:	c3                   	retq   

00000000000032b0 <void jki<int>(int (*) [128], int (*) [128], int (*) [128])>:
    32b0:	f3 0f 1e fa          	endbr64 
    32b4:	55                   	push   %rbp
    32b5:	49 89 f9             	mov    %rdi,%r9
    32b8:	49 89 d3             	mov    %rdx,%r11
    32bb:	53                   	push   %rbx
    32bc:	48 8d bf 00 00 01 00 	lea    0x10000(%rdi),%rdi
    32c3:	48 89 f3             	mov    %rsi,%rbx
    32c6:	49 8d a9 00 02 00 00 	lea    0x200(%r9),%rbp
    32cd:	4c 8d 96 00 02 00 00 	lea    0x200(%rsi),%r10
    32d4:	49 89 d8             	mov    %rbx,%r8
    32d7:	4c 89 de             	mov    %r11,%rsi
    32da:	4c 89 c1             	mov    %r8,%rcx
    32dd:	4c 89 c8             	mov    %r9,%rax
    32e0:	8b 11                	mov    (%rcx),%edx
    32e2:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    32e9:	0f af 16             	imul   (%rsi),%edx
    32ec:	01 10                	add    %edx,(%rax)
    32ee:	48 05 00 02 00 00    	add    $0x200,%rax
    32f4:	48 39 f8             	cmp    %rdi,%rax
    32f7:	75 e7                	jne    32e0 <void jki<int>(int (*) [128], int (*) [128], int (*) [128])+0x30>
    32f9:	49 83 c0 04          	add    $0x4,%r8
    32fd:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    3304:	4d 39 d0             	cmp    %r10,%r8
    3307:	75 d1                	jne    32da <void jki<int>(int (*) [128], int (*) [128], int (*) [128])+0x2a>
    3309:	49 83 c1 04          	add    $0x4,%r9
    330d:	48 8d 78 04          	lea    0x4(%rax),%rdi
    3311:	49 83 c3 04          	add    $0x4,%r11
    3315:	49 39 e9             	cmp    %rbp,%r9
    3318:	75 ba                	jne    32d4 <void jki<int>(int (*) [128], int (*) [128], int (*) [128])+0x24>
    331a:	5b                   	pop    %rbx
    331b:	5d                   	pop    %rbp
    331c:	c3                   	retq   
    331d:	0f 1f 00             	nopl   (%rax)

0000000000003320 <void jki<long>(long (*) [128], long (*) [128], long (*) [128])>:
    3320:	f3 0f 1e fa          	endbr64 
    3324:	55                   	push   %rbp
    3325:	49 89 f9             	mov    %rdi,%r9
    3328:	49 89 d3             	mov    %rdx,%r11
    332b:	53                   	push   %rbx
    332c:	48 8d bf 00 00 02 00 	lea    0x20000(%rdi),%rdi
    3333:	48 89 f3             	mov    %rsi,%rbx
    3336:	49 8d a9 00 04 00 00 	lea    0x400(%r9),%rbp
    333d:	4c 8d 96 00 04 00 00 	lea    0x400(%rsi),%r10
    3344:	49 89 d8             	mov    %rbx,%r8
    3347:	4c 89 de             	mov    %r11,%rsi
    334a:	4c 89 c1             	mov    %r8,%rcx
    334d:	4c 89 c8             	mov    %r9,%rax
    3350:	48 8b 11             	mov    (%rcx),%rdx
    3353:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    335a:	48 0f af 16          	imul   (%rsi),%rdx
    335e:	48 01 10             	add    %rdx,(%rax)
    3361:	48 05 00 04 00 00    	add    $0x400,%rax
    3367:	48 39 f8             	cmp    %rdi,%rax
    336a:	75 e4                	jne    3350 <void jki<long>(long (*) [128], long (*) [128], long (*) [128])+0x30>
    336c:	49 83 c0 08          	add    $0x8,%r8
    3370:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    3377:	4d 39 d0             	cmp    %r10,%r8
    337a:	75 ce                	jne    334a <void jki<long>(long (*) [128], long (*) [128], long (*) [128])+0x2a>
    337c:	49 83 c1 08          	add    $0x8,%r9
    3380:	48 8d 78 08          	lea    0x8(%rax),%rdi
    3384:	49 83 c3 08          	add    $0x8,%r11
    3388:	49 39 e9             	cmp    %rbp,%r9
    338b:	75 b7                	jne    3344 <void jki<long>(long (*) [128], long (*) [128], long (*) [128])+0x24>
    338d:	5b                   	pop    %rbx
    338e:	5d                   	pop    %rbp
    338f:	c3                   	retq   

0000000000003390 <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    3390:	f3 0f 1e fa          	endbr64 
    3394:	41 57                	push   %r15
    3396:	4c 8d 97 00 00 04 00 	lea    0x40000(%rdi),%r10
    339d:	41 56                	push   %r14
    339f:	4c 8d b7 00 08 00 00 	lea    0x800(%rdi),%r14
    33a6:	41 55                	push   %r13
    33a8:	49 89 f5             	mov    %rsi,%r13
    33ab:	41 54                	push   %r12
    33ad:	49 89 d4             	mov    %rdx,%r12
    33b0:	55                   	push   %rbp
    33b1:	48 8d ae 00 08 00 00 	lea    0x800(%rsi),%rbp
    33b8:	53                   	push   %rbx
    33b9:	48 89 fb             	mov    %rdi,%rbx
    33bc:	4d 89 eb             	mov    %r13,%r11
    33bf:	4c 89 e7             	mov    %r12,%rdi
    33c2:	4c 89 de             	mov    %r11,%rsi
    33c5:	48 89 d9             	mov    %rbx,%rcx
    33c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    33cf:	00 
    33d0:	48 8b 56 08          	mov    0x8(%rsi),%rdx
    33d4:	48 8b 07             	mov    (%rdi),%rax
    33d7:	48 0f af c2          	imul   %rdx,%rax
    33db:	48 8b 57 08          	mov    0x8(%rdi),%rdx
    33df:	48 0f af 16          	imul   (%rsi),%rdx
    33e3:	4c 8d 3c 02          	lea    (%rdx,%rax,1),%r15
    33e7:	48 8b 07             	mov    (%rdi),%rax
    33ea:	48 89 c2             	mov    %rax,%rdx
    33ed:	c4 62 bb f6 0e       	mulx   (%rsi),%r8,%r9
    33f2:	4d 01 f9             	add    %r15,%r9
    33f5:	4c 01 01             	add    %r8,(%rcx)
    33f8:	4c 11 49 08          	adc    %r9,0x8(%rcx)
    33fc:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    3403:	48 81 c6 00 08 00 00 	add    $0x800,%rsi
    340a:	4c 39 d1             	cmp    %r10,%rcx
    340d:	75 c1                	jne    33d0 <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x40>
    340f:	49 83 c3 10          	add    $0x10,%r11
    3413:	48 81 c7 00 08 00 00 	add    $0x800,%rdi
    341a:	49 39 eb             	cmp    %rbp,%r11
    341d:	75 a3                	jne    33c2 <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x32>
    341f:	48 83 c3 10          	add    $0x10,%rbx
    3423:	4c 8d 51 10          	lea    0x10(%rcx),%r10
    3427:	49 83 c4 10          	add    $0x10,%r12
    342b:	4c 39 f3             	cmp    %r14,%rbx
    342e:	75 8c                	jne    33bc <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x2c>
    3430:	5b                   	pop    %rbx
    3431:	5d                   	pop    %rbp
    3432:	41 5c                	pop    %r12
    3434:	41 5d                	pop    %r13
    3436:	41 5e                	pop    %r14
    3438:	41 5f                	pop    %r15
    343a:	c3                   	retq   
    343b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003440 <void jki<float>(float (*) [128], float (*) [128], float (*) [128])>:
    3440:	f3 0f 1e fa          	endbr64 
    3444:	49 89 f3             	mov    %rsi,%r11
    3447:	53                   	push   %rbx
    3448:	49 89 f8             	mov    %rdi,%r8
    344b:	48 8d b7 00 00 01 00 	lea    0x10000(%rdi),%rsi
    3452:	49 89 d2             	mov    %rdx,%r10
    3455:	48 8d 9f 00 02 00 00 	lea    0x200(%rdi),%rbx
    345c:	4d 8d 8b 00 02 00 00 	lea    0x200(%r11),%r9
    3463:	4c 89 df             	mov    %r11,%rdi
    3466:	4c 89 d1             	mov    %r10,%rcx
    3469:	48 89 fa             	mov    %rdi,%rdx
    346c:	4c 89 c0             	mov    %r8,%rax
    346f:	90                   	nop
    3470:	c5 fa 10 02          	vmovss (%rdx),%xmm0
    3474:	c5 fa 10 08          	vmovss (%rax),%xmm1
    3478:	48 05 00 02 00 00    	add    $0x200,%rax
    347e:	c4 e2 71 99 01       	vfmadd132ss (%rcx),%xmm1,%xmm0
    3483:	48 81 c2 00 02 00 00 	add    $0x200,%rdx
    348a:	c5 fa 11 80 00 fe ff 	vmovss %xmm0,-0x200(%rax)
    3491:	ff 
    3492:	48 39 f0             	cmp    %rsi,%rax
    3495:	75 d9                	jne    3470 <void jki<float>(float (*) [128], float (*) [128], float (*) [128])+0x30>
    3497:	48 83 c7 04          	add    $0x4,%rdi
    349b:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    34a2:	4c 39 cf             	cmp    %r9,%rdi
    34a5:	75 c2                	jne    3469 <void jki<float>(float (*) [128], float (*) [128], float (*) [128])+0x29>
    34a7:	49 83 c0 04          	add    $0x4,%r8
    34ab:	48 8d 70 04          	lea    0x4(%rax),%rsi
    34af:	49 83 c2 04          	add    $0x4,%r10
    34b3:	49 39 d8             	cmp    %rbx,%r8
    34b6:	75 ab                	jne    3463 <void jki<float>(float (*) [128], float (*) [128], float (*) [128])+0x23>
    34b8:	5b                   	pop    %rbx
    34b9:	c3                   	retq   
    34ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000034c0 <void jki<double>(double (*) [128], double (*) [128], double (*) [128])>:
    34c0:	f3 0f 1e fa          	endbr64 
    34c4:	49 89 f3             	mov    %rsi,%r11
    34c7:	53                   	push   %rbx
    34c8:	49 89 f8             	mov    %rdi,%r8
    34cb:	48 8d b7 00 00 02 00 	lea    0x20000(%rdi),%rsi
    34d2:	49 89 d2             	mov    %rdx,%r10
    34d5:	48 8d 9f 00 04 00 00 	lea    0x400(%rdi),%rbx
    34dc:	4d 8d 8b 00 04 00 00 	lea    0x400(%r11),%r9
    34e3:	4c 89 df             	mov    %r11,%rdi
    34e6:	4c 89 d1             	mov    %r10,%rcx
    34e9:	48 89 fa             	mov    %rdi,%rdx
    34ec:	4c 89 c0             	mov    %r8,%rax
    34ef:	90                   	nop
    34f0:	c5 fb 10 02          	vmovsd (%rdx),%xmm0
    34f4:	c5 fb 10 08          	vmovsd (%rax),%xmm1
    34f8:	48 05 00 04 00 00    	add    $0x400,%rax
    34fe:	c4 e2 f1 99 01       	vfmadd132sd (%rcx),%xmm1,%xmm0
    3503:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    350a:	c5 fb 11 80 00 fc ff 	vmovsd %xmm0,-0x400(%rax)
    3511:	ff 
    3512:	48 39 f0             	cmp    %rsi,%rax
    3515:	75 d9                	jne    34f0 <void jki<double>(double (*) [128], double (*) [128], double (*) [128])+0x30>
    3517:	48 83 c7 08          	add    $0x8,%rdi
    351b:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    3522:	4c 39 cf             	cmp    %r9,%rdi
    3525:	75 c2                	jne    34e9 <void jki<double>(double (*) [128], double (*) [128], double (*) [128])+0x29>
    3527:	49 83 c0 08          	add    $0x8,%r8
    352b:	48 8d 70 08          	lea    0x8(%rax),%rsi
    352f:	49 83 c2 08          	add    $0x8,%r10
    3533:	49 39 d8             	cmp    %rbx,%r8
    3536:	75 ab                	jne    34e3 <void jki<double>(double (*) [128], double (*) [128], double (*) [128])+0x23>
    3538:	5b                   	pop    %rbx
    3539:	c3                   	retq   
    353a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000003540 <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    3540:	f3 0f 1e fa          	endbr64 
    3544:	49 89 f3             	mov    %rsi,%r11
    3547:	53                   	push   %rbx
    3548:	49 89 f8             	mov    %rdi,%r8
    354b:	48 8d b7 00 00 04 00 	lea    0x40000(%rdi),%rsi
    3552:	49 89 d2             	mov    %rdx,%r10
    3555:	48 8d 9f 00 08 00 00 	lea    0x800(%rdi),%rbx
    355c:	4d 8d 8b 00 08 00 00 	lea    0x800(%r11),%r9
    3563:	4c 89 df             	mov    %r11,%rdi
    3566:	4c 89 d1             	mov    %r10,%rcx
    3569:	48 89 fa             	mov    %rdi,%rdx
    356c:	4c 89 c0             	mov    %r8,%rax
    356f:	90                   	nop
    3570:	db 2a                	fldt   (%rdx)
    3572:	48 05 00 08 00 00    	add    $0x800,%rax
    3578:	48 81 c2 00 08 00 00 	add    $0x800,%rdx
    357f:	db 29                	fldt   (%rcx)
    3581:	de c9                	fmulp  %st,%st(1)
    3583:	db a8 00 f8 ff ff    	fldt   -0x800(%rax)
    3589:	de c1                	faddp  %st,%st(1)
    358b:	db b8 00 f8 ff ff    	fstpt  -0x800(%rax)
    3591:	48 39 f0             	cmp    %rsi,%rax
    3594:	75 da                	jne    3570 <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x30>
    3596:	48 83 c7 10          	add    $0x10,%rdi
    359a:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    35a1:	4c 39 cf             	cmp    %r9,%rdi
    35a4:	75 c3                	jne    3569 <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x29>
    35a6:	49 83 c0 10          	add    $0x10,%r8
    35aa:	48 8d 70 10          	lea    0x10(%rax),%rsi
    35ae:	49 83 c2 10          	add    $0x10,%r10
    35b2:	49 39 d8             	cmp    %rbx,%r8
    35b5:	75 ac                	jne    3563 <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x23>
    35b7:	5b                   	pop    %rbx
    35b8:	c3                   	retq   
    35b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000035c0 <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    35c0:	f3 0f 1e fa          	endbr64 
    35c4:	41 57                	push   %r15
    35c6:	48 8d 87 00 08 00 00 	lea    0x800(%rdi),%rax
    35cd:	41 56                	push   %r14
    35cf:	41 55                	push   %r13
    35d1:	49 89 fd             	mov    %rdi,%r13
    35d4:	41 54                	push   %r12
    35d6:	55                   	push   %rbp
    35d7:	48 8d af 00 00 04 00 	lea    0x40000(%rdi),%rbp
    35de:	53                   	push   %rbx
    35df:	48 83 ec 28          	sub    $0x28,%rsp
    35e3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    35e8:	48 8d 86 00 08 00 00 	lea    0x800(%rsi),%rax
    35ef:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
    35f4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    35f9:	48 89 04 24          	mov    %rax,(%rsp)
    35fd:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
    3602:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
    3607:	4d 89 e6             	mov    %r12,%r14
    360a:	4d 89 ef             	mov    %r13,%r15
    360d:	0f 1f 00             	nopl   (%rax)
    3610:	c5 f9 6f 0b          	vmovdqa (%rbx),%xmm1
    3614:	c4 c1 79 6f 06       	vmovdqa (%r14),%xmm0
    3619:	49 81 c7 00 08 00 00 	add    $0x800,%r15
    3620:	e8 1b dc ff ff       	callq  1240 <__multf3@plt>
    3625:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    3629:	c4 c1 79 6f 87 00 f8 	vmovdqa -0x800(%r15),%xmm0
    3630:	ff ff 
    3632:	49 81 c6 00 08 00 00 	add    $0x800,%r14
    3639:	e8 92 dc ff ff       	callq  12d0 <__addtf3@plt>
    363e:	c4 c1 78 29 87 00 f8 	vmovaps %xmm0,-0x800(%r15)
    3645:	ff ff 
    3647:	49 39 ef             	cmp    %rbp,%r15
    364a:	75 c4                	jne    3610 <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x50>
    364c:	49 83 c4 10          	add    $0x10,%r12
    3650:	48 81 c3 00 08 00 00 	add    $0x800,%rbx
    3657:	4c 3b 24 24          	cmp    (%rsp),%r12
    365b:	75 aa                	jne    3607 <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x47>
    365d:	49 83 c5 10          	add    $0x10,%r13
    3661:	48 83 44 24 08 10    	addq   $0x10,0x8(%rsp)
    3667:	49 8d 6f 10          	lea    0x10(%r15),%rbp
    366b:	4c 3b 6c 24 10       	cmp    0x10(%rsp),%r13
    3670:	75 8b                	jne    35fd <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x3d>
    3672:	48 83 c4 28          	add    $0x28,%rsp
    3676:	5b                   	pop    %rbx
    3677:	5d                   	pop    %rbp
    3678:	41 5c                	pop    %r12
    367a:	41 5d                	pop    %r13
    367c:	41 5e                	pop    %r14
    367e:	41 5f                	pop    %r15
    3680:	c3                   	retq   
    3681:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3688:	00 00 00 
    368b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003690 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])>:
    3690:	f3 0f 1e fa          	endbr64 
    3694:	55                   	push   %rbp
    3695:	49 89 f0             	mov    %rsi,%r8
    3698:	49 89 fb             	mov    %rdi,%r11
    369b:	48 89 e5             	mov    %rsp,%rbp
    369e:	41 55                	push   %r13
    36a0:	48 89 d6             	mov    %rdx,%rsi
    36a3:	4c 8d 4a 20          	lea    0x20(%rdx),%r9
    36a7:	41 54                	push   %r12
    36a9:	4c 8d 97 00 80 00 00 	lea    0x8000(%rdi),%r10
    36b0:	45 31 e4             	xor    %r12d,%r12d
    36b3:	53                   	push   %rbx
    36b4:	4c 89 c3             	mov    %r8,%rbx
    36b7:	4d 89 d8             	mov    %r11,%r8
    36ba:	48 89 df             	mov    %rbx,%rdi
    36bd:	e9 b2 00 00 00       	jmpq   3774 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0xe4>
    36c2:	84 c0                	test   %al,%al
    36c4:	0f 84 e0 00 00 00    	je     37aa <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x11a>
    36ca:	c4 e2 7d 79 07       	vpbroadcastw (%rdi),%ymm0
    36cf:	48 81 c7 00 01 00 00 	add    $0x100,%rdi
    36d6:	c5 fd d5 0e          	vpmullw (%rsi),%ymm0,%ymm1
    36da:	c5 f5 fd 09          	vpaddw (%rcx),%ymm1,%ymm1
    36de:	c5 fe 7f 09          	vmovdqu %ymm1,(%rcx)
    36e2:	c5 fd d5 4e 20       	vpmullw 0x20(%rsi),%ymm0,%ymm1
    36e7:	c5 f5 fd 49 20       	vpaddw 0x20(%rcx),%ymm1,%ymm1
    36ec:	c5 fe 7f 49 20       	vmovdqu %ymm1,0x20(%rcx)
    36f1:	c5 fd d5 4e 40       	vpmullw 0x40(%rsi),%ymm0,%ymm1
    36f6:	c5 f5 fd 49 40       	vpaddw 0x40(%rcx),%ymm1,%ymm1
    36fb:	c5 fe 7f 49 40       	vmovdqu %ymm1,0x40(%rcx)
    3700:	c5 fd d5 4e 60       	vpmullw 0x60(%rsi),%ymm0,%ymm1
    3705:	c5 f5 fd 49 60       	vpaddw 0x60(%rcx),%ymm1,%ymm1
    370a:	c5 fe 7f 49 60       	vmovdqu %ymm1,0x60(%rcx)
    370f:	c5 fd d5 8e 80 00 00 	vpmullw 0x80(%rsi),%ymm0,%ymm1
    3716:	00 
    3717:	c5 f5 fd 89 80 00 00 	vpaddw 0x80(%rcx),%ymm1,%ymm1
    371e:	00 
    371f:	c5 fe 7f 89 80 00 00 	vmovdqu %ymm1,0x80(%rcx)
    3726:	00 
    3727:	c5 fd d5 8e a0 00 00 	vpmullw 0xa0(%rsi),%ymm0,%ymm1
    372e:	00 
    372f:	c5 f5 fd 89 a0 00 00 	vpaddw 0xa0(%rcx),%ymm1,%ymm1
    3736:	00 
    3737:	c5 fe 7f 89 a0 00 00 	vmovdqu %ymm1,0xa0(%rcx)
    373e:	00 
    373f:	c5 fd d5 8e c0 00 00 	vpmullw 0xc0(%rsi),%ymm0,%ymm1
    3746:	00 
    3747:	c5 f5 fd 89 c0 00 00 	vpaddw 0xc0(%rcx),%ymm1,%ymm1
    374e:	00 
    374f:	c5 fe 7f 89 c0 00 00 	vmovdqu %ymm1,0xc0(%rcx)
    3756:	00 
    3757:	c5 fd d5 86 e0 00 00 	vpmullw 0xe0(%rsi),%ymm0,%ymm0
    375e:	00 
    375f:	c5 fd fd 81 e0 00 00 	vpaddw 0xe0(%rcx),%ymm0,%ymm0
    3766:	00 
    3767:	c5 fe 7f 81 e0 00 00 	vmovdqu %ymm0,0xe0(%rcx)
    376e:	00 
    376f:	4d 39 d0             	cmp    %r10,%r8
    3772:	74 5f                	je     37d3 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x143>
    3774:	49 8d 40 20          	lea    0x20(%r8),%rax
    3778:	48 39 c6             	cmp    %rax,%rsi
    377b:	0f 93 c0             	setae  %al
    377e:	4d 39 c8             	cmp    %r9,%r8
    3781:	0f 93 c2             	setae  %dl
    3784:	4c 89 c1             	mov    %r8,%rcx
    3787:	09 d0                	or     %edx,%eax
    3789:	48 8d 57 02          	lea    0x2(%rdi),%rdx
    378d:	49 81 c0 00 01 00 00 	add    $0x100,%r8
    3794:	48 39 d1             	cmp    %rdx,%rcx
    3797:	41 0f 93 c5          	setae  %r13b
    379b:	4c 39 c7             	cmp    %r8,%rdi
    379e:	0f 93 c2             	setae  %dl
    37a1:	41 08 d5             	or     %dl,%r13b
    37a4:	0f 85 18 ff ff ff    	jne    36c2 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x32>
    37aa:	31 c0                	xor    %eax,%eax
    37ac:	0f 1f 40 00          	nopl   0x0(%rax)
    37b0:	0f b7 14 46          	movzwl (%rsi,%rax,2),%edx
    37b4:	66 0f af 17          	imul   (%rdi),%dx
    37b8:	66 01 14 41          	add    %dx,(%rcx,%rax,2)
    37bc:	48 ff c0             	inc    %rax
    37bf:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    37c5:	75 e9                	jne    37b0 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x120>
    37c7:	48 81 c7 00 01 00 00 	add    $0x100,%rdi
    37ce:	4d 39 d0             	cmp    %r10,%r8
    37d1:	75 a1                	jne    3774 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0xe4>
    37d3:	49 ff c4             	inc    %r12
    37d6:	48 81 c6 00 01 00 00 	add    $0x100,%rsi
    37dd:	48 83 c3 02          	add    $0x2,%rbx
    37e1:	49 81 c1 00 01 00 00 	add    $0x100,%r9
    37e8:	49 81 fc 80 00 00 00 	cmp    $0x80,%r12
    37ef:	0f 85 c2 fe ff ff    	jne    36b7 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x27>
    37f5:	c5 f8 77             	vzeroupper 
    37f8:	5b                   	pop    %rbx
    37f9:	41 5c                	pop    %r12
    37fb:	41 5d                	pop    %r13
    37fd:	5d                   	pop    %rbp
    37fe:	c3                   	retq   
    37ff:	90                   	nop

0000000000003800 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])>:
    3800:	f3 0f 1e fa          	endbr64 
    3804:	55                   	push   %rbp
    3805:	49 89 f0             	mov    %rsi,%r8
    3808:	49 89 fb             	mov    %rdi,%r11
    380b:	48 89 e5             	mov    %rsp,%rbp
    380e:	41 55                	push   %r13
    3810:	48 89 d6             	mov    %rdx,%rsi
    3813:	4c 8d 4a 20          	lea    0x20(%rdx),%r9
    3817:	41 54                	push   %r12
    3819:	4c 8d 97 00 00 01 00 	lea    0x10000(%rdi),%r10
    3820:	45 31 e4             	xor    %r12d,%r12d
    3823:	53                   	push   %rbx
    3824:	4c 89 c3             	mov    %r8,%rbx
    3827:	4d 89 d8             	mov    %r11,%r8
    382a:	48 89 df             	mov    %rbx,%rdi
    382d:	e9 82 01 00 00       	jmpq   39b4 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x1b4>
    3832:	84 c0                	test   %al,%al
    3834:	0f 84 b0 01 00 00    	je     39ea <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x1ea>
    383a:	c4 e2 7d 58 07       	vpbroadcastd (%rdi),%ymm0
    383f:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    3846:	c4 e2 7d 40 0e       	vpmulld (%rsi),%ymm0,%ymm1
    384b:	c5 f5 fe 09          	vpaddd (%rcx),%ymm1,%ymm1
    384f:	c5 fe 7f 09          	vmovdqu %ymm1,(%rcx)
    3853:	c4 e2 7d 40 4e 20    	vpmulld 0x20(%rsi),%ymm0,%ymm1
    3859:	c5 f5 fe 49 20       	vpaddd 0x20(%rcx),%ymm1,%ymm1
    385e:	c5 fe 7f 49 20       	vmovdqu %ymm1,0x20(%rcx)
    3863:	c4 e2 7d 40 4e 40    	vpmulld 0x40(%rsi),%ymm0,%ymm1
    3869:	c5 f5 fe 49 40       	vpaddd 0x40(%rcx),%ymm1,%ymm1
    386e:	c5 fe 7f 49 40       	vmovdqu %ymm1,0x40(%rcx)
    3873:	c4 e2 7d 40 4e 60    	vpmulld 0x60(%rsi),%ymm0,%ymm1
    3879:	c5 f5 fe 49 60       	vpaddd 0x60(%rcx),%ymm1,%ymm1
    387e:	c5 fe 7f 49 60       	vmovdqu %ymm1,0x60(%rcx)
    3883:	c4 e2 7d 40 8e 80 00 	vpmulld 0x80(%rsi),%ymm0,%ymm1
    388a:	00 00 
    388c:	c5 f5 fe 89 80 00 00 	vpaddd 0x80(%rcx),%ymm1,%ymm1
    3893:	00 
    3894:	c5 fe 7f 89 80 00 00 	vmovdqu %ymm1,0x80(%rcx)
    389b:	00 
    389c:	c4 e2 7d 40 8e a0 00 	vpmulld 0xa0(%rsi),%ymm0,%ymm1
    38a3:	00 00 
    38a5:	c5 f5 fe 89 a0 00 00 	vpaddd 0xa0(%rcx),%ymm1,%ymm1
    38ac:	00 
    38ad:	c5 fe 7f 89 a0 00 00 	vmovdqu %ymm1,0xa0(%rcx)
    38b4:	00 
    38b5:	c4 e2 7d 40 8e c0 00 	vpmulld 0xc0(%rsi),%ymm0,%ymm1
    38bc:	00 00 
    38be:	c5 f5 fe 89 c0 00 00 	vpaddd 0xc0(%rcx),%ymm1,%ymm1
    38c5:	00 
    38c6:	c5 fe 7f 89 c0 00 00 	vmovdqu %ymm1,0xc0(%rcx)
    38cd:	00 
    38ce:	c4 e2 7d 40 8e e0 00 	vpmulld 0xe0(%rsi),%ymm0,%ymm1
    38d5:	00 00 
    38d7:	c5 f5 fe 89 e0 00 00 	vpaddd 0xe0(%rcx),%ymm1,%ymm1
    38de:	00 
    38df:	c5 fe 7f 89 e0 00 00 	vmovdqu %ymm1,0xe0(%rcx)
    38e6:	00 
    38e7:	c4 e2 7d 40 8e 00 01 	vpmulld 0x100(%rsi),%ymm0,%ymm1
    38ee:	00 00 
    38f0:	c5 f5 fe 89 00 01 00 	vpaddd 0x100(%rcx),%ymm1,%ymm1
    38f7:	00 
    38f8:	c5 fe 7f 89 00 01 00 	vmovdqu %ymm1,0x100(%rcx)
    38ff:	00 
    3900:	c4 e2 7d 40 8e 20 01 	vpmulld 0x120(%rsi),%ymm0,%ymm1
    3907:	00 00 
    3909:	c5 f5 fe 89 20 01 00 	vpaddd 0x120(%rcx),%ymm1,%ymm1
    3910:	00 
    3911:	c5 fe 7f 89 20 01 00 	vmovdqu %ymm1,0x120(%rcx)
    3918:	00 
    3919:	c4 e2 7d 40 8e 40 01 	vpmulld 0x140(%rsi),%ymm0,%ymm1
    3920:	00 00 
    3922:	c5 f5 fe 89 40 01 00 	vpaddd 0x140(%rcx),%ymm1,%ymm1
    3929:	00 
    392a:	c5 fe 7f 89 40 01 00 	vmovdqu %ymm1,0x140(%rcx)
    3931:	00 
    3932:	c4 e2 7d 40 8e 60 01 	vpmulld 0x160(%rsi),%ymm0,%ymm1
    3939:	00 00 
    393b:	c5 f5 fe 89 60 01 00 	vpaddd 0x160(%rcx),%ymm1,%ymm1
    3942:	00 
    3943:	c5 fe 7f 89 60 01 00 	vmovdqu %ymm1,0x160(%rcx)
    394a:	00 
    394b:	c4 e2 7d 40 8e 80 01 	vpmulld 0x180(%rsi),%ymm0,%ymm1
    3952:	00 00 
    3954:	c5 f5 fe 89 80 01 00 	vpaddd 0x180(%rcx),%ymm1,%ymm1
    395b:	00 
    395c:	c5 fe 7f 89 80 01 00 	vmovdqu %ymm1,0x180(%rcx)
    3963:	00 
    3964:	c4 e2 7d 40 8e a0 01 	vpmulld 0x1a0(%rsi),%ymm0,%ymm1
    396b:	00 00 
    396d:	c5 f5 fe 89 a0 01 00 	vpaddd 0x1a0(%rcx),%ymm1,%ymm1
    3974:	00 
    3975:	c5 fe 7f 89 a0 01 00 	vmovdqu %ymm1,0x1a0(%rcx)
    397c:	00 
    397d:	c4 e2 7d 40 8e c0 01 	vpmulld 0x1c0(%rsi),%ymm0,%ymm1
    3984:	00 00 
    3986:	c5 f5 fe 89 c0 01 00 	vpaddd 0x1c0(%rcx),%ymm1,%ymm1
    398d:	00 
    398e:	c5 fe 7f 89 c0 01 00 	vmovdqu %ymm1,0x1c0(%rcx)
    3995:	00 
    3996:	c4 e2 7d 40 86 e0 01 	vpmulld 0x1e0(%rsi),%ymm0,%ymm0
    399d:	00 00 
    399f:	c5 fd fe 81 e0 01 00 	vpaddd 0x1e0(%rcx),%ymm0,%ymm0
    39a6:	00 
    39a7:	c5 fe 7f 81 e0 01 00 	vmovdqu %ymm0,0x1e0(%rcx)
    39ae:	00 
    39af:	4d 39 c2             	cmp    %r8,%r10
    39b2:	74 5c                	je     3a10 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x210>
    39b4:	49 8d 40 20          	lea    0x20(%r8),%rax
    39b8:	48 39 c6             	cmp    %rax,%rsi
    39bb:	0f 93 c0             	setae  %al
    39be:	4d 39 c8             	cmp    %r9,%r8
    39c1:	0f 93 c2             	setae  %dl
    39c4:	4c 89 c1             	mov    %r8,%rcx
    39c7:	09 d0                	or     %edx,%eax
    39c9:	48 8d 57 04          	lea    0x4(%rdi),%rdx
    39cd:	49 81 c0 00 02 00 00 	add    $0x200,%r8
    39d4:	48 39 d1             	cmp    %rdx,%rcx
    39d7:	41 0f 93 c5          	setae  %r13b
    39db:	4c 39 c7             	cmp    %r8,%rdi
    39de:	0f 93 c2             	setae  %dl
    39e1:	41 08 d5             	or     %dl,%r13b
    39e4:	0f 85 48 fe ff ff    	jne    3832 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x32>
    39ea:	31 c0                	xor    %eax,%eax
    39ec:	0f 1f 40 00          	nopl   0x0(%rax)
    39f0:	8b 17                	mov    (%rdi),%edx
    39f2:	0f af 14 86          	imul   (%rsi,%rax,4),%edx
    39f6:	01 14 81             	add    %edx,(%rcx,%rax,4)
    39f9:	48 ff c0             	inc    %rax
    39fc:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    3a02:	75 ec                	jne    39f0 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x1f0>
    3a04:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    3a0b:	4d 39 c2             	cmp    %r8,%r10
    3a0e:	75 a4                	jne    39b4 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x1b4>
    3a10:	49 ff c4             	inc    %r12
    3a13:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    3a1a:	48 83 c3 04          	add    $0x4,%rbx
    3a1e:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    3a25:	49 81 fc 80 00 00 00 	cmp    $0x80,%r12
    3a2c:	0f 85 f5 fd ff ff    	jne    3827 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x27>
    3a32:	c5 f8 77             	vzeroupper 
    3a35:	5b                   	pop    %rbx
    3a36:	41 5c                	pop    %r12
    3a38:	41 5d                	pop    %r13
    3a3a:	5d                   	pop    %rbp
    3a3b:	c3                   	retq   
    3a3c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000003a40 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])>:
    3a40:	f3 0f 1e fa          	endbr64 
    3a44:	55                   	push   %rbp
    3a45:	49 89 f0             	mov    %rsi,%r8
    3a48:	49 89 fb             	mov    %rdi,%r11
    3a4b:	48 89 e5             	mov    %rsp,%rbp
    3a4e:	41 55                	push   %r13
    3a50:	48 89 d6             	mov    %rdx,%rsi
    3a53:	4c 8d 4a 20          	lea    0x20(%rdx),%r9
    3a57:	41 54                	push   %r12
    3a59:	4c 8d 97 00 00 02 00 	lea    0x20000(%rdi),%r10
    3a60:	45 31 e4             	xor    %r12d,%r12d
    3a63:	53                   	push   %rbx
    3a64:	4c 89 c3             	mov    %r8,%rbx
    3a67:	4d 89 d8             	mov    %r11,%r8
    3a6a:	48 89 df             	mov    %rbx,%rdi
    3a6d:	49 8d 40 20          	lea    0x20(%r8),%rax
    3a71:	48 39 c6             	cmp    %rax,%rsi
    3a74:	0f 93 c0             	setae  %al
    3a77:	4d 39 c8             	cmp    %r9,%r8
    3a7a:	0f 93 c1             	setae  %cl
    3a7d:	4c 89 c2             	mov    %r8,%rdx
    3a80:	09 c8                	or     %ecx,%eax
    3a82:	48 8d 4f 08          	lea    0x8(%rdi),%rcx
    3a86:	49 81 c0 00 04 00 00 	add    $0x400,%r8
    3a8d:	48 39 ca             	cmp    %rcx,%rdx
    3a90:	41 0f 93 c5          	setae  %r13b
    3a94:	4c 39 c7             	cmp    %r8,%rdi
    3a97:	0f 93 c1             	setae  %cl
    3a9a:	41 08 cd             	or     %cl,%r13b
    3a9d:	0f 84 92 00 00 00    	je     3b35 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0xf5>
    3aa3:	84 c0                	test   %al,%al
    3aa5:	0f 84 8a 00 00 00    	je     3b35 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0xf5>
    3aab:	c4 e2 7d 59 1f       	vpbroadcastq (%rdi),%ymm3
    3ab0:	31 c0                	xor    %eax,%eax
    3ab2:	c5 dd 73 d3 20       	vpsrlq $0x20,%ymm3,%ymm4
    3ab7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    3abe:	00 00 
    3ac0:	c5 fe 6f 14 06       	vmovdqu (%rsi,%rax,1),%ymm2
    3ac5:	c5 fd 73 d2 20       	vpsrlq $0x20,%ymm2,%ymm0
    3aca:	c5 ed f4 cb          	vpmuludq %ymm3,%ymm2,%ymm1
    3ace:	c5 fd f4 c3          	vpmuludq %ymm3,%ymm0,%ymm0
    3ad2:	c5 dd f4 d2          	vpmuludq %ymm2,%ymm4,%ymm2
    3ad6:	c5 fd d4 c2          	vpaddq %ymm2,%ymm0,%ymm0
    3ada:	c5 fd 73 f0 20       	vpsllq $0x20,%ymm0,%ymm0
    3adf:	c5 f5 d4 c0          	vpaddq %ymm0,%ymm1,%ymm0
    3ae3:	c5 fd d4 04 02       	vpaddq (%rdx,%rax,1),%ymm0,%ymm0
    3ae8:	c5 fe 7f 04 02       	vmovdqu %ymm0,(%rdx,%rax,1)
    3aed:	48 83 c0 20          	add    $0x20,%rax
    3af1:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    3af7:	75 c7                	jne    3ac0 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0x80>
    3af9:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    3b00:	4d 39 d0             	cmp    %r10,%r8
    3b03:	0f 85 64 ff ff ff    	jne    3a6d <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0x2d>
    3b09:	49 ff c4             	inc    %r12
    3b0c:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    3b13:	48 83 c3 08          	add    $0x8,%rbx
    3b17:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    3b1e:	49 81 fc 80 00 00 00 	cmp    $0x80,%r12
    3b25:	0f 85 3c ff ff ff    	jne    3a67 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0x27>
    3b2b:	c5 f8 77             	vzeroupper 
    3b2e:	5b                   	pop    %rbx
    3b2f:	41 5c                	pop    %r12
    3b31:	41 5d                	pop    %r13
    3b33:	5d                   	pop    %rbp
    3b34:	c3                   	retq   
    3b35:	31 c0                	xor    %eax,%eax
    3b37:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    3b3e:	00 00 
    3b40:	48 8b 0f             	mov    (%rdi),%rcx
    3b43:	48 0f af 0c c6       	imul   (%rsi,%rax,8),%rcx
    3b48:	48 01 0c c2          	add    %rcx,(%rdx,%rax,8)
    3b4c:	48 ff c0             	inc    %rax
    3b4f:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    3b55:	75 e9                	jne    3b40 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0x100>
    3b57:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    3b5e:	4d 39 d0             	cmp    %r10,%r8
    3b61:	0f 85 06 ff ff ff    	jne    3a6d <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0x2d>
    3b67:	eb a0                	jmp    3b09 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0xc9>
    3b69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000003b70 <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    3b70:	f3 0f 1e fa          	endbr64 
    3b74:	55                   	push   %rbp
    3b75:	49 89 fb             	mov    %rdi,%r11
    3b78:	49 89 d1             	mov    %rdx,%r9
    3b7b:	53                   	push   %rbx
    3b7c:	48 8d ae 00 08 04 00 	lea    0x40800(%rsi),%rbp
    3b83:	48 8d 9e 00 00 04 00 	lea    0x40000(%rsi),%rbx
    3b8a:	4d 89 da             	mov    %r11,%r10
    3b8d:	4c 8d 83 00 00 fc ff 	lea    -0x40000(%rbx),%r8
    3b94:	31 c0                	xor    %eax,%eax
    3b96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3b9d:	00 00 00 
    3ba0:	49 8b 48 08          	mov    0x8(%r8),%rcx
    3ba4:	49 8b 14 01          	mov    (%r9,%rax,1),%rdx
    3ba8:	48 0f af d1          	imul   %rcx,%rdx
    3bac:	49 8b 4c 01 08       	mov    0x8(%r9,%rax,1),%rcx
    3bb1:	49 0f af 08          	imul   (%r8),%rcx
    3bb5:	48 01 d1             	add    %rdx,%rcx
    3bb8:	49 8b 14 01          	mov    (%r9,%rax,1),%rdx
    3bbc:	c4 c2 cb f6 38       	mulx   (%r8),%rsi,%rdi
    3bc1:	48 01 cf             	add    %rcx,%rdi
    3bc4:	49 01 34 02          	add    %rsi,(%r10,%rax,1)
    3bc8:	49 11 7c 02 08       	adc    %rdi,0x8(%r10,%rax,1)
    3bcd:	48 83 c0 10          	add    $0x10,%rax
    3bd1:	48 3d 00 08 00 00    	cmp    $0x800,%rax
    3bd7:	75 c7                	jne    3ba0 <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x30>
    3bd9:	49 81 c0 00 08 00 00 	add    $0x800,%r8
    3be0:	49 81 c2 00 08 00 00 	add    $0x800,%r10
    3be7:	4c 39 c3             	cmp    %r8,%rbx
    3bea:	75 a8                	jne    3b94 <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x24>
    3bec:	48 83 c3 10          	add    $0x10,%rbx
    3bf0:	49 81 c1 00 08 00 00 	add    $0x800,%r9
    3bf7:	48 39 eb             	cmp    %rbp,%rbx
    3bfa:	75 8e                	jne    3b8a <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x1a>
    3bfc:	5b                   	pop    %rbx
    3bfd:	5d                   	pop    %rbp
    3bfe:	c3                   	retq   
    3bff:	90                   	nop

0000000000003c00 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])>:
    3c00:	f3 0f 1e fa          	endbr64 
    3c04:	55                   	push   %rbp
    3c05:	48 89 d1             	mov    %rdx,%rcx
    3c08:	4c 8d 52 20          	lea    0x20(%rdx),%r10
    3c0c:	48 89 e5             	mov    %rsp,%rbp
    3c0f:	41 55                	push   %r13
    3c11:	4c 8d 9f 00 00 01 00 	lea    0x10000(%rdi),%r11
    3c18:	45 31 ed             	xor    %r13d,%r13d
    3c1b:	41 54                	push   %r12
    3c1d:	49 89 f4             	mov    %rsi,%r12
    3c20:	53                   	push   %rbx
    3c21:	48 89 fb             	mov    %rdi,%rbx
    3c24:	48 89 df             	mov    %rbx,%rdi
    3c27:	4c 89 e6             	mov    %r12,%rsi
    3c2a:	e9 82 01 00 00       	jmpq   3db1 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x1b1>
    3c2f:	84 c0                	test   %al,%al
    3c31:	0f 84 b3 01 00 00    	je     3dea <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x1ea>
    3c37:	c4 e2 7d 18 06       	vbroadcastss (%rsi),%ymm0
    3c3c:	c5 fc 10 09          	vmovups (%rcx),%ymm1
    3c40:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    3c47:	c4 e2 7d a8 0a       	vfmadd213ps (%rdx),%ymm0,%ymm1
    3c4c:	c5 fc 11 0a          	vmovups %ymm1,(%rdx)
    3c50:	c5 fc 10 49 20       	vmovups 0x20(%rcx),%ymm1
    3c55:	c4 e2 7d a8 4a 20    	vfmadd213ps 0x20(%rdx),%ymm0,%ymm1
    3c5b:	c5 fc 11 4a 20       	vmovups %ymm1,0x20(%rdx)
    3c60:	c5 fc 10 49 40       	vmovups 0x40(%rcx),%ymm1
    3c65:	c4 e2 7d a8 4a 40    	vfmadd213ps 0x40(%rdx),%ymm0,%ymm1
    3c6b:	c5 fc 11 4a 40       	vmovups %ymm1,0x40(%rdx)
    3c70:	c5 fc 10 49 60       	vmovups 0x60(%rcx),%ymm1
    3c75:	c4 e2 7d a8 4a 60    	vfmadd213ps 0x60(%rdx),%ymm0,%ymm1
    3c7b:	c5 fc 11 4a 60       	vmovups %ymm1,0x60(%rdx)
    3c80:	c5 fc 10 89 80 00 00 	vmovups 0x80(%rcx),%ymm1
    3c87:	00 
    3c88:	c4 e2 7d a8 8a 80 00 	vfmadd213ps 0x80(%rdx),%ymm0,%ymm1
    3c8f:	00 00 
    3c91:	c5 fc 11 8a 80 00 00 	vmovups %ymm1,0x80(%rdx)
    3c98:	00 
    3c99:	c5 fc 10 89 a0 00 00 	vmovups 0xa0(%rcx),%ymm1
    3ca0:	00 
    3ca1:	c4 e2 7d a8 8a a0 00 	vfmadd213ps 0xa0(%rdx),%ymm0,%ymm1
    3ca8:	00 00 
    3caa:	c5 fc 11 8a a0 00 00 	vmovups %ymm1,0xa0(%rdx)
    3cb1:	00 
    3cb2:	c5 fc 10 89 c0 00 00 	vmovups 0xc0(%rcx),%ymm1
    3cb9:	00 
    3cba:	c4 e2 7d a8 8a c0 00 	vfmadd213ps 0xc0(%rdx),%ymm0,%ymm1
    3cc1:	00 00 
    3cc3:	c5 fc 11 8a c0 00 00 	vmovups %ymm1,0xc0(%rdx)
    3cca:	00 
    3ccb:	c5 fc 10 89 e0 00 00 	vmovups 0xe0(%rcx),%ymm1
    3cd2:	00 
    3cd3:	c4 e2 7d a8 8a e0 00 	vfmadd213ps 0xe0(%rdx),%ymm0,%ymm1
    3cda:	00 00 
    3cdc:	c5 fc 11 8a e0 00 00 	vmovups %ymm1,0xe0(%rdx)
    3ce3:	00 
    3ce4:	c5 fc 10 89 00 01 00 	vmovups 0x100(%rcx),%ymm1
    3ceb:	00 
    3cec:	c4 e2 7d a8 8a 00 01 	vfmadd213ps 0x100(%rdx),%ymm0,%ymm1
    3cf3:	00 00 
    3cf5:	c5 fc 11 8a 00 01 00 	vmovups %ymm1,0x100(%rdx)
    3cfc:	00 
    3cfd:	c5 fc 10 89 20 01 00 	vmovups 0x120(%rcx),%ymm1
    3d04:	00 
    3d05:	c4 e2 7d a8 8a 20 01 	vfmadd213ps 0x120(%rdx),%ymm0,%ymm1
    3d0c:	00 00 
    3d0e:	c5 fc 11 8a 20 01 00 	vmovups %ymm1,0x120(%rdx)
    3d15:	00 
    3d16:	c5 fc 10 89 40 01 00 	vmovups 0x140(%rcx),%ymm1
    3d1d:	00 
    3d1e:	c4 e2 7d a8 8a 40 01 	vfmadd213ps 0x140(%rdx),%ymm0,%ymm1
    3d25:	00 00 
    3d27:	c5 fc 10 9a e0 01 00 	vmovups 0x1e0(%rdx),%ymm3
    3d2e:	00 
    3d2f:	c5 fc 11 8a 40 01 00 	vmovups %ymm1,0x140(%rdx)
    3d36:	00 
    3d37:	c5 fc 10 89 60 01 00 	vmovups 0x160(%rcx),%ymm1
    3d3e:	00 
    3d3f:	c4 e2 7d a8 8a 60 01 	vfmadd213ps 0x160(%rdx),%ymm0,%ymm1
    3d46:	00 00 
    3d48:	c5 fc 11 8a 60 01 00 	vmovups %ymm1,0x160(%rdx)
    3d4f:	00 
    3d50:	c5 fc 10 89 80 01 00 	vmovups 0x180(%rcx),%ymm1
    3d57:	00 
    3d58:	c4 e2 7d a8 8a 80 01 	vfmadd213ps 0x180(%rdx),%ymm0,%ymm1
    3d5f:	00 00 
    3d61:	c5 fc 11 8a 80 01 00 	vmovups %ymm1,0x180(%rdx)
    3d68:	00 
    3d69:	c5 fc 10 89 a0 01 00 	vmovups 0x1a0(%rcx),%ymm1
    3d70:	00 
    3d71:	c4 e2 7d a8 8a a0 01 	vfmadd213ps 0x1a0(%rdx),%ymm0,%ymm1
    3d78:	00 00 
    3d7a:	c5 fc 11 8a a0 01 00 	vmovups %ymm1,0x1a0(%rdx)
    3d81:	00 
    3d82:	c5 fc 10 89 c0 01 00 	vmovups 0x1c0(%rcx),%ymm1
    3d89:	00 
    3d8a:	c4 e2 7d a8 8a c0 01 	vfmadd213ps 0x1c0(%rdx),%ymm0,%ymm1
    3d91:	00 00 
    3d93:	c5 fc 11 8a c0 01 00 	vmovups %ymm1,0x1c0(%rdx)
    3d9a:	00 
    3d9b:	c4 e2 65 98 81 e0 01 	vfmadd132ps 0x1e0(%rcx),%ymm3,%ymm0
    3da2:	00 00 
    3da4:	c5 fc 11 82 e0 01 00 	vmovups %ymm0,0x1e0(%rdx)
    3dab:	00 
    3dac:	49 39 fb             	cmp    %rdi,%r11
    3daf:	74 6a                	je     3e1b <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x21b>
    3db1:	48 8d 47 20          	lea    0x20(%rdi),%rax
    3db5:	48 39 c1             	cmp    %rax,%rcx
    3db8:	0f 93 c0             	setae  %al
    3dbb:	4c 39 d7             	cmp    %r10,%rdi
    3dbe:	41 0f 93 c0          	setae  %r8b
    3dc2:	48 89 fa             	mov    %rdi,%rdx
    3dc5:	44 09 c0             	or     %r8d,%eax
    3dc8:	4c 8d 46 04          	lea    0x4(%rsi),%r8
    3dcc:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    3dd3:	4c 39 c2             	cmp    %r8,%rdx
    3dd6:	41 0f 93 c1          	setae  %r9b
    3dda:	48 39 fe             	cmp    %rdi,%rsi
    3ddd:	41 0f 93 c0          	setae  %r8b
    3de1:	45 08 c1             	or     %r8b,%r9b
    3de4:	0f 85 45 fe ff ff    	jne    3c2f <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x2f>
    3dea:	31 c0                	xor    %eax,%eax
    3dec:	0f 1f 40 00          	nopl   0x0(%rax)
    3df0:	c5 fa 10 14 82       	vmovss (%rdx,%rax,4),%xmm2
    3df5:	c5 fa 10 06          	vmovss (%rsi),%xmm0
    3df9:	c4 e2 69 99 04 81    	vfmadd132ss (%rcx,%rax,4),%xmm2,%xmm0
    3dff:	c5 fa 11 04 82       	vmovss %xmm0,(%rdx,%rax,4)
    3e04:	48 ff c0             	inc    %rax
    3e07:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    3e0d:	75 e1                	jne    3df0 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x1f0>
    3e0f:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    3e16:	49 39 fb             	cmp    %rdi,%r11
    3e19:	75 96                	jne    3db1 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x1b1>
    3e1b:	49 ff c5             	inc    %r13
    3e1e:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    3e25:	49 83 c4 04          	add    $0x4,%r12
    3e29:	49 81 c2 00 02 00 00 	add    $0x200,%r10
    3e30:	49 81 fd 80 00 00 00 	cmp    $0x80,%r13
    3e37:	0f 85 e7 fd ff ff    	jne    3c24 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x24>
    3e3d:	c5 f8 77             	vzeroupper 
    3e40:	5b                   	pop    %rbx
    3e41:	41 5c                	pop    %r12
    3e43:	41 5d                	pop    %r13
    3e45:	5d                   	pop    %rbp
    3e46:	c3                   	retq   
    3e47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    3e4e:	00 00 

0000000000003e50 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])>:
    3e50:	f3 0f 1e fa          	endbr64 
    3e54:	55                   	push   %rbp
    3e55:	49 89 fb             	mov    %rdi,%r11
    3e58:	48 89 d1             	mov    %rdx,%rcx
    3e5b:	48 89 e5             	mov    %rsp,%rbp
    3e5e:	41 55                	push   %r13
    3e60:	4c 8d 4a 20          	lea    0x20(%rdx),%r9
    3e64:	4c 8d 97 00 00 02 00 	lea    0x20000(%rdi),%r10
    3e6b:	41 54                	push   %r12
    3e6d:	45 31 e4             	xor    %r12d,%r12d
    3e70:	53                   	push   %rbx
    3e71:	48 89 f3             	mov    %rsi,%rbx
    3e74:	4c 89 df             	mov    %r11,%rdi
    3e77:	48 89 de             	mov    %rbx,%rsi
    3e7a:	48 8d 47 20          	lea    0x20(%rdi),%rax
    3e7e:	48 39 c1             	cmp    %rax,%rcx
    3e81:	0f 93 c0             	setae  %al
    3e84:	4c 39 cf             	cmp    %r9,%rdi
    3e87:	41 0f 93 c0          	setae  %r8b
    3e8b:	48 89 fa             	mov    %rdi,%rdx
    3e8e:	44 09 c0             	or     %r8d,%eax
    3e91:	4c 8d 46 08          	lea    0x8(%rsi),%r8
    3e95:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    3e9c:	4c 39 c2             	cmp    %r8,%rdx
    3e9f:	41 0f 93 c5          	setae  %r13b
    3ea3:	48 39 fe             	cmp    %rdi,%rsi
    3ea6:	41 0f 93 c0          	setae  %r8b
    3eaa:	45 08 c5             	or     %r8b,%r13b
    3ead:	74 65                	je     3f14 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0xc4>
    3eaf:	84 c0                	test   %al,%al
    3eb1:	74 61                	je     3f14 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0xc4>
    3eb3:	c4 e2 7d 19 0e       	vbroadcastsd (%rsi),%ymm1
    3eb8:	31 c0                	xor    %eax,%eax
    3eba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    3ec0:	c5 fd 10 04 01       	vmovupd (%rcx,%rax,1),%ymm0
    3ec5:	c4 e2 f5 a8 04 02    	vfmadd213pd (%rdx,%rax,1),%ymm1,%ymm0
    3ecb:	c5 fd 11 04 02       	vmovupd %ymm0,(%rdx,%rax,1)
    3ed0:	48 83 c0 20          	add    $0x20,%rax
    3ed4:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    3eda:	75 e4                	jne    3ec0 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x70>
    3edc:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    3ee3:	4c 39 d7             	cmp    %r10,%rdi
    3ee6:	75 92                	jne    3e7a <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x2a>
    3ee8:	49 ff c4             	inc    %r12
    3eeb:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    3ef2:	48 83 c3 08          	add    $0x8,%rbx
    3ef6:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    3efd:	49 81 fc 80 00 00 00 	cmp    $0x80,%r12
    3f04:	0f 85 6a ff ff ff    	jne    3e74 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x24>
    3f0a:	c5 f8 77             	vzeroupper 
    3f0d:	5b                   	pop    %rbx
    3f0e:	41 5c                	pop    %r12
    3f10:	41 5d                	pop    %r13
    3f12:	5d                   	pop    %rbp
    3f13:	c3                   	retq   
    3f14:	31 c0                	xor    %eax,%eax
    3f16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f1d:	00 00 00 
    3f20:	c5 fb 10 14 c2       	vmovsd (%rdx,%rax,8),%xmm2
    3f25:	c5 fb 10 06          	vmovsd (%rsi),%xmm0
    3f29:	c4 e2 e9 99 04 c1    	vfmadd132sd (%rcx,%rax,8),%xmm2,%xmm0
    3f2f:	c5 fb 11 04 c2       	vmovsd %xmm0,(%rdx,%rax,8)
    3f34:	48 ff c0             	inc    %rax
    3f37:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    3f3d:	75 e1                	jne    3f20 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0xd0>
    3f3f:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    3f46:	4c 39 d7             	cmp    %r10,%rdi
    3f49:	0f 85 2b ff ff ff    	jne    3e7a <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x2a>
    3f4f:	eb 97                	jmp    3ee8 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x98>
    3f51:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f58:	00 00 00 
    3f5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003f60 <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    3f60:	f3 0f 1e fa          	endbr64 
    3f64:	48 89 f0             	mov    %rsi,%rax
    3f67:	49 89 f9             	mov    %rdi,%r9
    3f6a:	4c 8d 80 00 08 04 00 	lea    0x40800(%rax),%r8
    3f71:	48 8d be 00 00 04 00 	lea    0x40000(%rsi),%rdi
    3f78:	48 89 d6             	mov    %rdx,%rsi
    3f7b:	4c 89 ca             	mov    %r9,%rdx
    3f7e:	48 8d 8f 00 00 fc ff 	lea    -0x40000(%rdi),%rcx
    3f85:	31 c0                	xor    %eax,%eax
    3f87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    3f8e:	00 00 
    3f90:	db 29                	fldt   (%rcx)
    3f92:	db 2c 06             	fldt   (%rsi,%rax,1)
    3f95:	de c9                	fmulp  %st,%st(1)
    3f97:	db 2c 02             	fldt   (%rdx,%rax,1)
    3f9a:	de c1                	faddp  %st,%st(1)
    3f9c:	db 3c 02             	fstpt  (%rdx,%rax,1)
    3f9f:	48 83 c0 10          	add    $0x10,%rax
    3fa3:	48 3d 00 08 00 00    	cmp    $0x800,%rax
    3fa9:	75 e5                	jne    3f90 <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x30>
    3fab:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    3fb2:	48 81 c2 00 08 00 00 	add    $0x800,%rdx
    3fb9:	48 39 cf             	cmp    %rcx,%rdi
    3fbc:	75 c7                	jne    3f85 <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x25>
    3fbe:	48 83 c7 10          	add    $0x10,%rdi
    3fc2:	48 81 c6 00 08 00 00 	add    $0x800,%rsi
    3fc9:	4c 39 c7             	cmp    %r8,%rdi
    3fcc:	75 ad                	jne    3f7b <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x1b>
    3fce:	c3                   	retq   
    3fcf:	90                   	nop

0000000000003fd0 <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    3fd0:	f3 0f 1e fa          	endbr64 
    3fd4:	41 57                	push   %r15
    3fd6:	48 89 f0             	mov    %rsi,%rax
    3fd9:	48 05 00 08 04 00    	add    $0x40800,%rax
    3fdf:	41 56                	push   %r14
    3fe1:	49 89 fe             	mov    %rdi,%r14
    3fe4:	41 55                	push   %r13
    3fe6:	4c 8d ae 00 00 04 00 	lea    0x40000(%rsi),%r13
    3fed:	41 54                	push   %r12
    3fef:	49 89 d4             	mov    %rdx,%r12
    3ff2:	55                   	push   %rbp
    3ff3:	53                   	push   %rbx
    3ff4:	48 83 ec 18          	sub    $0x18,%rsp
    3ff8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    3ffd:	4c 89 f3             	mov    %r14,%rbx
    4000:	49 8d ad 00 00 fc ff 	lea    -0x40000(%r13),%rbp
    4007:	45 31 ff             	xor    %r15d,%r15d
    400a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4010:	c4 81 79 6f 0c 3c    	vmovdqa (%r12,%r15,1),%xmm1
    4016:	c5 f9 6f 45 00       	vmovdqa 0x0(%rbp),%xmm0
    401b:	e8 20 d2 ff ff       	callq  1240 <__multf3@plt>
    4020:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    4024:	c4 a1 79 6f 04 3b    	vmovdqa (%rbx,%r15,1),%xmm0
    402a:	e8 a1 d2 ff ff       	callq  12d0 <__addtf3@plt>
    402f:	c4 a1 78 29 04 3b    	vmovaps %xmm0,(%rbx,%r15,1)
    4035:	49 83 c7 10          	add    $0x10,%r15
    4039:	49 81 ff 00 08 00 00 	cmp    $0x800,%r15
    4040:	75 ce                	jne    4010 <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x40>
    4042:	48 81 c5 00 08 00 00 	add    $0x800,%rbp
    4049:	48 81 c3 00 08 00 00 	add    $0x800,%rbx
    4050:	49 39 ed             	cmp    %rbp,%r13
    4053:	75 b2                	jne    4007 <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x37>
    4055:	49 83 c5 10          	add    $0x10,%r13
    4059:	49 81 c4 00 08 00 00 	add    $0x800,%r12
    4060:	4c 3b 6c 24 08       	cmp    0x8(%rsp),%r13
    4065:	75 96                	jne    3ffd <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x2d>
    4067:	48 83 c4 18          	add    $0x18,%rsp
    406b:	5b                   	pop    %rbx
    406c:	5d                   	pop    %rbp
    406d:	41 5c                	pop    %r12
    406f:	41 5d                	pop    %r13
    4071:	41 5e                	pop    %r14
    4073:	41 5f                	pop    %r15
    4075:	c3                   	retq   
    4076:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    407d:	00 00 00 

0000000000004080 <void kji<short>(short (*) [128], short (*) [128], short (*) [128])>:
    4080:	f3 0f 1e fa          	endbr64 
    4084:	53                   	push   %rbx
    4085:	49 89 f0             	mov    %rsi,%r8
    4088:	49 89 d2             	mov    %rdx,%r10
    408b:	48 8d 9e 00 01 00 00 	lea    0x100(%rsi),%rbx
    4092:	4c 8d 9f 00 80 00 00 	lea    0x8000(%rdi),%r11
    4099:	4c 8d 8f 00 81 00 00 	lea    0x8100(%rdi),%r9
    40a0:	4c 89 de             	mov    %r11,%rsi
    40a3:	4c 89 d7             	mov    %r10,%rdi
    40a6:	48 8d 86 00 80 ff ff 	lea    -0x8000(%rsi),%rax
    40ad:	4c 89 c1             	mov    %r8,%rcx
    40b0:	0f b7 11             	movzwl (%rcx),%edx
    40b3:	48 81 c1 00 01 00 00 	add    $0x100,%rcx
    40ba:	66 0f af 17          	imul   (%rdi),%dx
    40be:	66 01 10             	add    %dx,(%rax)
    40c1:	48 05 00 01 00 00    	add    $0x100,%rax
    40c7:	48 39 c6             	cmp    %rax,%rsi
    40ca:	75 e4                	jne    40b0 <void kji<short>(short (*) [128], short (*) [128], short (*) [128])+0x30>
    40cc:	48 83 c6 02          	add    $0x2,%rsi
    40d0:	48 83 c7 02          	add    $0x2,%rdi
    40d4:	49 39 f1             	cmp    %rsi,%r9
    40d7:	75 cd                	jne    40a6 <void kji<short>(short (*) [128], short (*) [128], short (*) [128])+0x26>
    40d9:	49 83 c0 02          	add    $0x2,%r8
    40dd:	49 81 c2 00 01 00 00 	add    $0x100,%r10
    40e4:	4c 39 c3             	cmp    %r8,%rbx
    40e7:	75 b7                	jne    40a0 <void kji<short>(short (*) [128], short (*) [128], short (*) [128])+0x20>
    40e9:	5b                   	pop    %rbx
    40ea:	c3                   	retq   
    40eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000040f0 <void kji<int>(int (*) [128], int (*) [128], int (*) [128])>:
    40f0:	f3 0f 1e fa          	endbr64 
    40f4:	53                   	push   %rbx
    40f5:	49 89 f0             	mov    %rsi,%r8
    40f8:	49 89 d2             	mov    %rdx,%r10
    40fb:	48 8d 9e 00 02 00 00 	lea    0x200(%rsi),%rbx
    4102:	4c 8d 9f 00 00 01 00 	lea    0x10000(%rdi),%r11
    4109:	4c 8d 8f 00 02 01 00 	lea    0x10200(%rdi),%r9
    4110:	4c 89 de             	mov    %r11,%rsi
    4113:	4c 89 d7             	mov    %r10,%rdi
    4116:	48 8d 86 00 00 ff ff 	lea    -0x10000(%rsi),%rax
    411d:	4c 89 c1             	mov    %r8,%rcx
    4120:	8b 11                	mov    (%rcx),%edx
    4122:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    4129:	0f af 17             	imul   (%rdi),%edx
    412c:	01 10                	add    %edx,(%rax)
    412e:	48 05 00 02 00 00    	add    $0x200,%rax
    4134:	48 39 c6             	cmp    %rax,%rsi
    4137:	75 e7                	jne    4120 <void kji<int>(int (*) [128], int (*) [128], int (*) [128])+0x30>
    4139:	48 83 c6 04          	add    $0x4,%rsi
    413d:	48 83 c7 04          	add    $0x4,%rdi
    4141:	4c 39 ce             	cmp    %r9,%rsi
    4144:	75 d0                	jne    4116 <void kji<int>(int (*) [128], int (*) [128], int (*) [128])+0x26>
    4146:	49 83 c0 04          	add    $0x4,%r8
    414a:	49 81 c2 00 02 00 00 	add    $0x200,%r10
    4151:	49 39 d8             	cmp    %rbx,%r8
    4154:	75 ba                	jne    4110 <void kji<int>(int (*) [128], int (*) [128], int (*) [128])+0x20>
    4156:	5b                   	pop    %rbx
    4157:	c3                   	retq   
    4158:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    415f:	00 

0000000000004160 <void kji<long>(long (*) [128], long (*) [128], long (*) [128])>:
    4160:	f3 0f 1e fa          	endbr64 
    4164:	53                   	push   %rbx
    4165:	49 89 f0             	mov    %rsi,%r8
    4168:	49 89 d2             	mov    %rdx,%r10
    416b:	48 8d 9e 00 04 00 00 	lea    0x400(%rsi),%rbx
    4172:	4c 8d 9f 00 00 02 00 	lea    0x20000(%rdi),%r11
    4179:	4c 8d 8f 00 04 02 00 	lea    0x20400(%rdi),%r9
    4180:	4c 89 de             	mov    %r11,%rsi
    4183:	4c 89 d7             	mov    %r10,%rdi
    4186:	48 8d 86 00 00 fe ff 	lea    -0x20000(%rsi),%rax
    418d:	4c 89 c1             	mov    %r8,%rcx
    4190:	48 8b 11             	mov    (%rcx),%rdx
    4193:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    419a:	48 0f af 17          	imul   (%rdi),%rdx
    419e:	48 01 10             	add    %rdx,(%rax)
    41a1:	48 05 00 04 00 00    	add    $0x400,%rax
    41a7:	48 39 c6             	cmp    %rax,%rsi
    41aa:	75 e4                	jne    4190 <void kji<long>(long (*) [128], long (*) [128], long (*) [128])+0x30>
    41ac:	48 83 c6 08          	add    $0x8,%rsi
    41b0:	48 83 c7 08          	add    $0x8,%rdi
    41b4:	4c 39 ce             	cmp    %r9,%rsi
    41b7:	75 cd                	jne    4186 <void kji<long>(long (*) [128], long (*) [128], long (*) [128])+0x26>
    41b9:	49 83 c0 08          	add    $0x8,%r8
    41bd:	49 81 c2 00 04 00 00 	add    $0x400,%r10
    41c4:	49 39 d8             	cmp    %rbx,%r8
    41c7:	75 b7                	jne    4180 <void kji<long>(long (*) [128], long (*) [128], long (*) [128])+0x20>
    41c9:	5b                   	pop    %rbx
    41ca:	c3                   	retq   
    41cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000041d0 <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    41d0:	f3 0f 1e fa          	endbr64 
    41d4:	41 56                	push   %r14
    41d6:	49 89 f3             	mov    %rsi,%r11
    41d9:	41 55                	push   %r13
    41db:	4c 8d ae 00 08 00 00 	lea    0x800(%rsi),%r13
    41e2:	41 54                	push   %r12
    41e4:	4c 8d a7 00 00 04 00 	lea    0x40000(%rdi),%r12
    41eb:	55                   	push   %rbp
    41ec:	48 89 d5             	mov    %rdx,%rbp
    41ef:	53                   	push   %rbx
    41f0:	48 8d 9f 00 08 04 00 	lea    0x40800(%rdi),%rbx
    41f7:	4d 89 e2             	mov    %r12,%r10
    41fa:	48 89 ef             	mov    %rbp,%rdi
    41fd:	49 8d b2 00 00 fc ff 	lea    -0x40000(%r10),%rsi
    4204:	4c 89 d9             	mov    %r11,%rcx
    4207:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    420e:	00 00 
    4210:	48 8b 51 08          	mov    0x8(%rcx),%rdx
    4214:	48 8b 07             	mov    (%rdi),%rax
    4217:	48 0f af c2          	imul   %rdx,%rax
    421b:	48 8b 57 08          	mov    0x8(%rdi),%rdx
    421f:	48 0f af 11          	imul   (%rcx),%rdx
    4223:	4c 8d 34 02          	lea    (%rdx,%rax,1),%r14
    4227:	48 8b 07             	mov    (%rdi),%rax
    422a:	48 89 c2             	mov    %rax,%rdx
    422d:	c4 62 bb f6 09       	mulx   (%rcx),%r8,%r9
    4232:	4d 01 f1             	add    %r14,%r9
    4235:	4c 01 06             	add    %r8,(%rsi)
    4238:	4c 11 4e 08          	adc    %r9,0x8(%rsi)
    423c:	48 81 c6 00 08 00 00 	add    $0x800,%rsi
    4243:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    424a:	49 39 f2             	cmp    %rsi,%r10
    424d:	75 c1                	jne    4210 <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x40>
    424f:	49 83 c2 10          	add    $0x10,%r10
    4253:	48 83 c7 10          	add    $0x10,%rdi
    4257:	49 39 da             	cmp    %rbx,%r10
    425a:	75 a1                	jne    41fd <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x2d>
    425c:	49 83 c3 10          	add    $0x10,%r11
    4260:	48 81 c5 00 08 00 00 	add    $0x800,%rbp
    4267:	4d 39 eb             	cmp    %r13,%r11
    426a:	75 8b                	jne    41f7 <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x27>
    426c:	5b                   	pop    %rbx
    426d:	5d                   	pop    %rbp
    426e:	41 5c                	pop    %r12
    4270:	41 5d                	pop    %r13
    4272:	41 5e                	pop    %r14
    4274:	c3                   	retq   
    4275:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    427c:	00 00 00 
    427f:	90                   	nop

0000000000004280 <void kji<float>(float (*) [128], float (*) [128], float (*) [128])>:
    4280:	f3 0f 1e fa          	endbr64 
    4284:	48 89 f8             	mov    %rdi,%rax
    4287:	49 89 d1             	mov    %rdx,%r9
    428a:	48 89 f7             	mov    %rsi,%rdi
    428d:	4c 8d 9e 00 02 00 00 	lea    0x200(%rsi),%r11
    4294:	4c 8d 90 00 00 01 00 	lea    0x10000(%rax),%r10
    429b:	4c 8d 80 00 02 01 00 	lea    0x10200(%rax),%r8
    42a2:	4c 89 d1             	mov    %r10,%rcx
    42a5:	4c 89 ce             	mov    %r9,%rsi
    42a8:	48 8d 81 00 00 ff ff 	lea    -0x10000(%rcx),%rax
    42af:	48 89 fa             	mov    %rdi,%rdx
    42b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    42b8:	c5 fa 10 02          	vmovss (%rdx),%xmm0
    42bc:	c5 fa 10 08          	vmovss (%rax),%xmm1
    42c0:	48 05 00 02 00 00    	add    $0x200,%rax
    42c6:	c4 e2 71 99 06       	vfmadd132ss (%rsi),%xmm1,%xmm0
    42cb:	48 81 c2 00 02 00 00 	add    $0x200,%rdx
    42d2:	c5 fa 11 80 00 fe ff 	vmovss %xmm0,-0x200(%rax)
    42d9:	ff 
    42da:	48 39 c1             	cmp    %rax,%rcx
    42dd:	75 d9                	jne    42b8 <void kji<float>(float (*) [128], float (*) [128], float (*) [128])+0x38>
    42df:	48 83 c1 04          	add    $0x4,%rcx
    42e3:	48 83 c6 04          	add    $0x4,%rsi
    42e7:	4c 39 c1             	cmp    %r8,%rcx
    42ea:	75 bc                	jne    42a8 <void kji<float>(float (*) [128], float (*) [128], float (*) [128])+0x28>
    42ec:	48 83 c7 04          	add    $0x4,%rdi
    42f0:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    42f7:	4c 39 df             	cmp    %r11,%rdi
    42fa:	75 a6                	jne    42a2 <void kji<float>(float (*) [128], float (*) [128], float (*) [128])+0x22>
    42fc:	c3                   	retq   
    42fd:	0f 1f 00             	nopl   (%rax)

0000000000004300 <void kji<double>(double (*) [128], double (*) [128], double (*) [128])>:
    4300:	f3 0f 1e fa          	endbr64 
    4304:	48 89 f8             	mov    %rdi,%rax
    4307:	49 89 d1             	mov    %rdx,%r9
    430a:	48 89 f7             	mov    %rsi,%rdi
    430d:	4c 8d 9e 00 04 00 00 	lea    0x400(%rsi),%r11
    4314:	4c 8d 90 00 00 02 00 	lea    0x20000(%rax),%r10
    431b:	4c 8d 80 00 04 02 00 	lea    0x20400(%rax),%r8
    4322:	4c 89 d1             	mov    %r10,%rcx
    4325:	4c 89 ce             	mov    %r9,%rsi
    4328:	48 8d 81 00 00 fe ff 	lea    -0x20000(%rcx),%rax
    432f:	48 89 fa             	mov    %rdi,%rdx
    4332:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4338:	c5 fb 10 02          	vmovsd (%rdx),%xmm0
    433c:	c5 fb 10 08          	vmovsd (%rax),%xmm1
    4340:	48 05 00 04 00 00    	add    $0x400,%rax
    4346:	c4 e2 f1 99 06       	vfmadd132sd (%rsi),%xmm1,%xmm0
    434b:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    4352:	c5 fb 11 80 00 fc ff 	vmovsd %xmm0,-0x400(%rax)
    4359:	ff 
    435a:	48 39 c1             	cmp    %rax,%rcx
    435d:	75 d9                	jne    4338 <void kji<double>(double (*) [128], double (*) [128], double (*) [128])+0x38>
    435f:	48 83 c1 08          	add    $0x8,%rcx
    4363:	48 83 c6 08          	add    $0x8,%rsi
    4367:	4c 39 c1             	cmp    %r8,%rcx
    436a:	75 bc                	jne    4328 <void kji<double>(double (*) [128], double (*) [128], double (*) [128])+0x28>
    436c:	48 83 c7 08          	add    $0x8,%rdi
    4370:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    4377:	4c 39 df             	cmp    %r11,%rdi
    437a:	75 a6                	jne    4322 <void kji<double>(double (*) [128], double (*) [128], double (*) [128])+0x22>
    437c:	c3                   	retq   
    437d:	0f 1f 00             	nopl   (%rax)

0000000000004380 <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    4380:	f3 0f 1e fa          	endbr64 
    4384:	48 89 f8             	mov    %rdi,%rax
    4387:	49 89 d1             	mov    %rdx,%r9
    438a:	48 89 f7             	mov    %rsi,%rdi
    438d:	4c 8d 9e 00 08 00 00 	lea    0x800(%rsi),%r11
    4394:	4c 8d 90 00 00 04 00 	lea    0x40000(%rax),%r10
    439b:	4c 8d 80 00 08 04 00 	lea    0x40800(%rax),%r8
    43a2:	4c 89 d1             	mov    %r10,%rcx
    43a5:	4c 89 ce             	mov    %r9,%rsi
    43a8:	48 8d 81 00 00 fc ff 	lea    -0x40000(%rcx),%rax
    43af:	48 89 fa             	mov    %rdi,%rdx
    43b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    43b8:	db 2a                	fldt   (%rdx)
    43ba:	48 05 00 08 00 00    	add    $0x800,%rax
    43c0:	48 81 c2 00 08 00 00 	add    $0x800,%rdx
    43c7:	db 2e                	fldt   (%rsi)
    43c9:	de c9                	fmulp  %st,%st(1)
    43cb:	db a8 00 f8 ff ff    	fldt   -0x800(%rax)
    43d1:	de c1                	faddp  %st,%st(1)
    43d3:	db b8 00 f8 ff ff    	fstpt  -0x800(%rax)
    43d9:	48 39 c1             	cmp    %rax,%rcx
    43dc:	75 da                	jne    43b8 <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x38>
    43de:	48 83 c1 10          	add    $0x10,%rcx
    43e2:	48 83 c6 10          	add    $0x10,%rsi
    43e6:	4c 39 c1             	cmp    %r8,%rcx
    43e9:	75 bd                	jne    43a8 <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x28>
    43eb:	48 83 c7 10          	add    $0x10,%rdi
    43ef:	49 81 c1 00 08 00 00 	add    $0x800,%r9
    43f6:	4c 39 df             	cmp    %r11,%rdi
    43f9:	75 a7                	jne    43a2 <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x22>
    43fb:	c3                   	retq   
    43fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000004400 <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    4400:	f3 0f 1e fa          	endbr64 
    4404:	41 57                	push   %r15
    4406:	48 8d 8e 00 08 00 00 	lea    0x800(%rsi),%rcx
    440d:	41 56                	push   %r14
    440f:	41 55                	push   %r13
    4411:	4c 8d af 00 08 04 00 	lea    0x40800(%rdi),%r13
    4418:	41 54                	push   %r12
    441a:	49 89 f4             	mov    %rsi,%r12
    441d:	55                   	push   %rbp
    441e:	53                   	push   %rbx
    441f:	48 83 ec 28          	sub    $0x28,%rsp
    4423:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    4428:	48 8d 8f 00 00 04 00 	lea    0x40000(%rdi),%rcx
    442f:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    4434:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
    4439:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
    443e:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
    4443:	4c 8d b3 00 00 fc ff 	lea    -0x40000(%rbx),%r14
    444a:	4d 89 e7             	mov    %r12,%r15
    444d:	0f 1f 00             	nopl   (%rax)
    4450:	c5 f9 6f 4d 00       	vmovdqa 0x0(%rbp),%xmm1
    4455:	c4 c1 79 6f 07       	vmovdqa (%r15),%xmm0
    445a:	49 81 c6 00 08 00 00 	add    $0x800,%r14
    4461:	e8 da cd ff ff       	callq  1240 <__multf3@plt>
    4466:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    446a:	c4 c1 79 6f 86 00 f8 	vmovdqa -0x800(%r14),%xmm0
    4471:	ff ff 
    4473:	49 81 c7 00 08 00 00 	add    $0x800,%r15
    447a:	e8 51 ce ff ff       	callq  12d0 <__addtf3@plt>
    447f:	c4 c1 78 29 86 00 f8 	vmovaps %xmm0,-0x800(%r14)
    4486:	ff ff 
    4488:	4c 39 f3             	cmp    %r14,%rbx
    448b:	75 c3                	jne    4450 <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x50>
    448d:	48 83 c3 10          	add    $0x10,%rbx
    4491:	48 83 c5 10          	add    $0x10,%rbp
    4495:	4c 39 eb             	cmp    %r13,%rbx
    4498:	75 a9                	jne    4443 <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x43>
    449a:	49 83 c4 10          	add    $0x10,%r12
    449e:	48 81 44 24 08 00 08 	addq   $0x800,0x8(%rsp)
    44a5:	00 00 
    44a7:	4c 3b 64 24 10       	cmp    0x10(%rsp),%r12
    44ac:	75 8b                	jne    4439 <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x39>
    44ae:	48 83 c4 28          	add    $0x28,%rsp
    44b2:	5b                   	pop    %rbx
    44b3:	5d                   	pop    %rbp
    44b4:	41 5c                	pop    %r12
    44b6:	41 5d                	pop    %r13
    44b8:	41 5e                	pop    %r14
    44ba:	41 5f                	pop    %r15
    44bc:	c3                   	retq   
    44bd:	0f 1f 00             	nopl   (%rax)

00000000000044c0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>:
    44c0:	f3 0f 1e fa          	endbr64 
    44c4:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
    44c8:	49 89 c2             	mov    %rax,%r10
    44cb:	49 c1 ea 3f          	shr    $0x3f,%r10
    44cf:	49 01 c2             	add    %rax,%r10
    44d2:	49 89 d3             	mov    %rdx,%r11
    44d5:	49 d1 fa             	sar    %r10
    44d8:	41 83 e3 01          	and    $0x1,%r11d
    44dc:	4c 39 d6             	cmp    %r10,%rsi
    44df:	0f 8d bb 00 00 00    	jge    45a0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xe0>
    44e5:	49 89 f1             	mov    %rsi,%r9
    44e8:	eb 20                	jmp    450a <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x4a>
    44ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    44f0:	48 ff c8             	dec    %rax
    44f3:	4c 8d 04 c7          	lea    (%rdi,%rax,8),%r8
    44f7:	c4 c1 7b 10 08       	vmovsd (%r8),%xmm1
    44fc:	c4 a1 7b 11 0c cf    	vmovsd %xmm1,(%rdi,%r9,8)
    4502:	49 39 c2             	cmp    %rax,%r10
    4505:	7e 30                	jle    4537 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x77>
    4507:	49 89 c1             	mov    %rax,%r9
    450a:	49 8d 49 01          	lea    0x1(%r9),%rcx
    450e:	48 8d 04 09          	lea    (%rcx,%rcx,1),%rax
    4512:	48 c1 e1 04          	shl    $0x4,%rcx
    4516:	c5 fb 10 4c 0f f8    	vmovsd -0x8(%rdi,%rcx,1),%xmm1
    451c:	4c 8d 04 0f          	lea    (%rdi,%rcx,1),%r8
    4520:	c4 c1 79 2f 08       	vcomisd (%r8),%xmm1
    4525:	77 c9                	ja     44f0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x30>
    4527:	c4 c1 7b 10 08       	vmovsd (%r8),%xmm1
    452c:	c4 a1 7b 11 0c cf    	vmovsd %xmm1,(%rdi,%r9,8)
    4532:	49 39 c2             	cmp    %rax,%r10
    4535:	7f d0                	jg     4507 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x47>
    4537:	4d 85 db             	test   %r11,%r11
    453a:	74 74                	je     45b0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xf0>
    453c:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    4540:	48 89 d1             	mov    %rdx,%rcx
    4543:	48 c1 e9 3f          	shr    $0x3f,%rcx
    4547:	48 01 d1             	add    %rdx,%rcx
    454a:	48 d1 f9             	sar    %rcx
    454d:	48 39 f0             	cmp    %rsi,%rax
    4550:	7f 2f                	jg     4581 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xc1>
    4552:	eb 3c                	jmp    4590 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
    4554:	0f 1f 40 00          	nopl   0x0(%rax)
    4558:	48 8d 51 ff          	lea    -0x1(%rcx),%rdx
    455c:	48 89 d0             	mov    %rdx,%rax
    455f:	48 c1 e8 3f          	shr    $0x3f,%rax
    4563:	48 01 d0             	add    %rdx,%rax
    4566:	c4 c1 7b 10 09       	vmovsd (%r9),%xmm1
    456b:	48 d1 f8             	sar    %rax
    456e:	48 89 c2             	mov    %rax,%rdx
    4571:	c4 c1 7b 11 08       	vmovsd %xmm1,(%r8)
    4576:	48 89 c8             	mov    %rcx,%rax
    4579:	48 39 ce             	cmp    %rcx,%rsi
    457c:	7d 72                	jge    45f0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x130>
    457e:	48 89 d1             	mov    %rdx,%rcx
    4581:	4c 8d 0c cf          	lea    (%rdi,%rcx,8),%r9
    4585:	c4 c1 79 2f 01       	vcomisd (%r9),%xmm0
    458a:	4c 8d 04 c7          	lea    (%rdi,%rax,8),%r8
    458e:	77 c8                	ja     4558 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x98>
    4590:	c4 c1 7b 11 00       	vmovsd %xmm0,(%r8)
    4595:	c3                   	retq   
    4596:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    459d:	00 00 00 
    45a0:	4c 8d 04 f7          	lea    (%rdi,%rsi,8),%r8
    45a4:	4d 85 db             	test   %r11,%r11
    45a7:	75 e7                	jne    4590 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
    45a9:	48 89 f0             	mov    %rsi,%rax
    45ac:	0f 1f 40 00          	nopl   0x0(%rax)
    45b0:	48 83 ea 02          	sub    $0x2,%rdx
    45b4:	48 89 d1             	mov    %rdx,%rcx
    45b7:	48 c1 e9 3f          	shr    $0x3f,%rcx
    45bb:	48 01 ca             	add    %rcx,%rdx
    45be:	48 d1 fa             	sar    %rdx
    45c1:	48 39 c2             	cmp    %rax,%rdx
    45c4:	0f 85 72 ff ff ff    	jne    453c <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x7c>
    45ca:	48 8d 44 00 02       	lea    0x2(%rax,%rax,1),%rax
    45cf:	c5 fb 10 4c c7 f8    	vmovsd -0x8(%rdi,%rax,8),%xmm1
    45d5:	48 ff c8             	dec    %rax
    45d8:	c4 c1 7b 11 08       	vmovsd %xmm1,(%r8)
    45dd:	4c 8d 04 c7          	lea    (%rdi,%rax,8),%r8
    45e1:	e9 56 ff ff ff       	jmpq   453c <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x7c>
    45e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    45ed:	00 00 00 
    45f0:	4d 89 c8             	mov    %r9,%r8
    45f3:	c4 c1 7b 11 00       	vmovsd %xmm0,(%r8)
    45f8:	c3                   	retq   
    45f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000004600 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>:
    4600:	f3 0f 1e fa          	endbr64 
    4604:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    4609:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    460d:	41 ff 72 f8          	pushq  -0x8(%r10)
    4611:	55                   	push   %rbp
    4612:	48 89 e5             	mov    %rsp,%rbp
    4615:	41 57                	push   %r15
    4617:	41 56                	push   %r14
    4619:	41 55                	push   %r13
    461b:	41 54                	push   %r12
    461d:	41 52                	push   %r10
    461f:	53                   	push   %rbx
    4620:	4c 8d 9c 24 00 00 fd 	lea    -0x30000(%rsp),%r11
    4627:	ff 
    4628:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    462f:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    4634:	4c 39 dc             	cmp    %r11,%rsp
    4637:	75 ef                	jne    4628 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x28>
    4639:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
    4640:	ba 00 00 01 00       	mov    $0x10000,%edx
    4645:	31 f6                	xor    %esi,%esi
    4647:	48 89 bd 90 fe fc ff 	mov    %rdi,-0x30170(%rbp)
    464e:	4c 8d b5 c0 ff fe ff 	lea    -0x10040(%rbp),%r14
    4655:	4c 89 f7             	mov    %r14,%rdi
    4658:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    465f:	00 00 
    4661:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    4665:	31 c0                	xor    %eax,%eax
    4667:	4c 8d bd b0 ff fc ff 	lea    -0x30050(%rbp),%r15
    466e:	e8 ad cb ff ff       	callq  1220 <memset@plt>
    4673:	c5 fd 6f 05 c5 1d 00 	vmovdqa 0x1dc5(%rip),%ymm0        # 6440 <_IO_stdin_used+0x440>
    467a:	00 
    467b:	4c 89 f8             	mov    %r15,%rax
    467e:	48 8d 9d b0 ff fd ff 	lea    -0x20050(%rbp),%rbx
    4685:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    4689:	c5 fd 7f 40 20       	vmovdqa %ymm0,0x20(%rax)
    468e:	c5 fd 7f 40 40       	vmovdqa %ymm0,0x40(%rax)
    4693:	c5 fd 7f 40 60       	vmovdqa %ymm0,0x60(%rax)
    4698:	c5 fd 7f 80 80 00 00 	vmovdqa %ymm0,0x80(%rax)
    469f:	00 
    46a0:	c5 fd 7f 80 a0 00 00 	vmovdqa %ymm0,0xa0(%rax)
    46a7:	00 
    46a8:	c5 fd 7f 80 c0 00 00 	vmovdqa %ymm0,0xc0(%rax)
    46af:	00 
    46b0:	c5 fd 7f 80 e0 00 00 	vmovdqa %ymm0,0xe0(%rax)
    46b7:	00 
    46b8:	c5 fd 7f 80 00 01 00 	vmovdqa %ymm0,0x100(%rax)
    46bf:	00 
    46c0:	c5 fd 7f 80 20 01 00 	vmovdqa %ymm0,0x120(%rax)
    46c7:	00 
    46c8:	c5 fd 7f 80 40 01 00 	vmovdqa %ymm0,0x140(%rax)
    46cf:	00 
    46d0:	c5 fd 7f 80 60 01 00 	vmovdqa %ymm0,0x160(%rax)
    46d7:	00 
    46d8:	c5 fd 7f 80 80 01 00 	vmovdqa %ymm0,0x180(%rax)
    46df:	00 
    46e0:	c5 fd 7f 80 a0 01 00 	vmovdqa %ymm0,0x1a0(%rax)
    46e7:	00 
    46e8:	c5 fd 7f 80 c0 01 00 	vmovdqa %ymm0,0x1c0(%rax)
    46ef:	00 
    46f0:	c5 fd 7f 80 e0 01 00 	vmovdqa %ymm0,0x1e0(%rax)
    46f7:	00 
    46f8:	48 05 00 02 00 00    	add    $0x200,%rax
    46fe:	48 39 d8             	cmp    %rbx,%rax
    4701:	75 82                	jne    4685 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x85>
    4703:	c5 fd 6f 05 55 1d 00 	vmovdqa 0x1d55(%rip),%ymm0        # 6460 <_IO_stdin_used+0x460>
    470a:	00 
    470b:	48 89 d8             	mov    %rbx,%rax
    470e:	48 8d 8d b0 ff fe ff 	lea    -0x10050(%rbp),%rcx
    4715:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    4719:	c5 fd 7f 40 20       	vmovdqa %ymm0,0x20(%rax)
    471e:	c5 fd 7f 40 40       	vmovdqa %ymm0,0x40(%rax)
    4723:	c5 fd 7f 40 60       	vmovdqa %ymm0,0x60(%rax)
    4728:	c5 fd 7f 80 80 00 00 	vmovdqa %ymm0,0x80(%rax)
    472f:	00 
    4730:	c5 fd 7f 80 a0 00 00 	vmovdqa %ymm0,0xa0(%rax)
    4737:	00 
    4738:	c5 fd 7f 80 c0 00 00 	vmovdqa %ymm0,0xc0(%rax)
    473f:	00 
    4740:	c5 fd 7f 80 e0 00 00 	vmovdqa %ymm0,0xe0(%rax)
    4747:	00 
    4748:	c5 fd 7f 80 00 01 00 	vmovdqa %ymm0,0x100(%rax)
    474f:	00 
    4750:	c5 fd 7f 80 20 01 00 	vmovdqa %ymm0,0x120(%rax)
    4757:	00 
    4758:	c5 fd 7f 80 40 01 00 	vmovdqa %ymm0,0x140(%rax)
    475f:	00 
    4760:	c5 fd 7f 80 60 01 00 	vmovdqa %ymm0,0x160(%rax)
    4767:	00 
    4768:	c5 fd 7f 80 80 01 00 	vmovdqa %ymm0,0x180(%rax)
    476f:	00 
    4770:	c5 fd 7f 80 a0 01 00 	vmovdqa %ymm0,0x1a0(%rax)
    4777:	00 
    4778:	c5 fd 7f 80 c0 01 00 	vmovdqa %ymm0,0x1c0(%rax)
    477f:	00 
    4780:	c5 fd 7f 80 e0 01 00 	vmovdqa %ymm0,0x1e0(%rax)
    4787:	00 
    4788:	48 05 00 02 00 00    	add    $0x200,%rax
    478e:	48 39 c1             	cmp    %rax,%rcx
    4791:	75 82                	jne    4715 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x115>
    4793:	48 8d 85 a0 fe fc ff 	lea    -0x30160(%rbp),%rax
    479a:	49 89 c4             	mov    %rax,%r12
    479d:	4c 8d ad a8 ff fc ff 	lea    -0x30058(%rbp),%r13
    47a4:	48 89 85 88 fe fc ff 	mov    %rax,-0x30178(%rbp)
    47ab:	c5 f8 77             	vzeroupper 
    47ae:	e8 1d ca ff ff       	callq  11d0 <std::chrono::_V2::system_clock::now()@plt>
    47b3:	48 89 85 98 fe fc ff 	mov    %rax,-0x30168(%rbp)
    47ba:	48 8b 8d 90 fe fc ff 	mov    -0x30170(%rbp),%rcx
    47c1:	48 89 da             	mov    %rbx,%rdx
    47c4:	4c 89 fe             	mov    %r15,%rsi
    47c7:	4c 89 f7             	mov    %r14,%rdi
    47ca:	ff d1                	callq  *%rcx
    47cc:	e8 ff c9 ff ff       	callq  11d0 <std::chrono::_V2::system_clock::now()@plt>
    47d1:	48 2b 85 98 fe fc ff 	sub    -0x30168(%rbp),%rax
    47d8:	c5 f1 57 c9          	vxorpd %xmm1,%xmm1,%xmm1
    47dc:	c4 e1 f3 2a c0       	vcvtsi2sd %rax,%xmm1,%xmm0
    47e1:	49 83 c4 08          	add    $0x8,%r12
    47e5:	c5 fb 5e 05 53 1d 00 	vdivsd 0x1d53(%rip),%xmm0,%xmm0        # 6540 <_IO_stdin_used+0x540>
    47ec:	00 
    47ed:	c4 c1 7b 11 44 24 f8 	vmovsd %xmm0,-0x8(%r12)
    47f4:	4d 39 e5             	cmp    %r12,%r13
    47f7:	75 b5                	jne    47ae <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x1ae>
    47f9:	48 8b bd 88 fe fc ff 	mov    -0x30178(%rbp),%rdi
    4800:	48 8d b5 20 ff fc ff 	lea    -0x300e0(%rbp),%rsi
    4807:	b9 0a 00 00 00       	mov    $0xa,%ecx
    480c:	4c 89 ea             	mov    %r13,%rdx
    480f:	e8 dc d3 ff ff       	callq  1bf0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]>
    4814:	48 8b 0d 25 48 00 00 	mov    0x4825(%rip),%rcx        # 9040 <std::cout@@GLIBCXX_3.4>
    481b:	48 8d 3d 1e 48 00 00 	lea    0x481e(%rip),%rdi        # 9040 <std::cout@@GLIBCXX_3.4>
    4822:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    4826:	c5 fb 10 85 20 ff fc 	vmovsd -0x300e0(%rbp),%xmm0
    482d:	ff 
    482e:	48 01 fa             	add    %rdi,%rdx
    4831:	8b 42 18             	mov    0x18(%rdx),%eax
    4834:	48 c7 42 08 02 00 00 	movq   $0x2,0x8(%rdx)
    483b:	00 
    483c:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    4841:	83 c8 04             	or     $0x4,%eax
    4844:	89 42 18             	mov    %eax,0x18(%rdx)
    4847:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    484b:	48 c7 44 07 10 08 00 	movq   $0x8,0x10(%rdi,%rax,1)
    4852:	00 00 
    4854:	e8 97 ca ff ff       	callq  12f0 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    4859:	81 7d bc 00 63 00 00 	cmpl   $0x6300,-0x44(%rbp)
    4860:	75 27                	jne    4889 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x289>
    4862:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4866:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    486d:	00 00 
    486f:	75 37                	jne    48a8 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x2a8>
    4871:	48 81 c4 60 01 03 00 	add    $0x30160,%rsp
    4878:	5b                   	pop    %rbx
    4879:	41 5a                	pop    %r10
    487b:	41 5c                	pop    %r12
    487d:	41 5d                	pop    %r13
    487f:	41 5e                	pop    %r14
    4881:	41 5f                	pop    %r15
    4883:	5d                   	pop    %rbp
    4884:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    4888:	c3                   	retq   
    4889:	48 8d 0d d0 17 00 00 	lea    0x17d0(%rip),%rcx        # 6060 <_IO_stdin_used+0x60>
    4890:	ba 56 00 00 00       	mov    $0x56,%edx
    4895:	48 8d 35 3d 18 00 00 	lea    0x183d(%rip),%rsi        # 60d9 <_IO_stdin_used+0xd9>
    489c:	48 8d 3d 15 18 00 00 	lea    0x1815(%rip),%rdi        # 60b8 <_IO_stdin_used+0xb8>
    48a3:	e8 88 c9 ff ff       	callq  1230 <__assert_fail@plt>
    48a8:	e8 f3 c9 ff ff       	callq  12a0 <__stack_chk_fail@plt>
    48ad:	0f 1f 00             	nopl   (%rax)

00000000000048b0 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>:
    48b0:	f3 0f 1e fa          	endbr64 
    48b4:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    48b9:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    48bd:	41 ff 72 f8          	pushq  -0x8(%r10)
    48c1:	55                   	push   %rbp
    48c2:	48 89 e5             	mov    %rsp,%rbp
    48c5:	41 57                	push   %r15
    48c7:	41 56                	push   %r14
    48c9:	41 55                	push   %r13
    48cb:	41 54                	push   %r12
    48cd:	41 52                	push   %r10
    48cf:	53                   	push   %rbx
    48d0:	4c 8d 9c 24 00 00 fd 	lea    -0x30000(%rsp),%r11
    48d7:	ff 
    48d8:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    48df:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    48e4:	4c 39 dc             	cmp    %r11,%rsp
    48e7:	75 ef                	jne    48d8 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x28>
    48e9:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
    48f0:	ba 00 00 01 00       	mov    $0x10000,%edx
    48f5:	31 f6                	xor    %esi,%esi
    48f7:	48 89 bd 90 fe fc ff 	mov    %rdi,-0x30170(%rbp)
    48fe:	4c 8d b5 c0 ff fe ff 	lea    -0x10040(%rbp),%r14
    4905:	4c 89 f7             	mov    %r14,%rdi
    4908:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    490f:	00 00 
    4911:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    4915:	31 c0                	xor    %eax,%eax
    4917:	4c 8d bd b0 ff fc ff 	lea    -0x30050(%rbp),%r15
    491e:	e8 fd c8 ff ff       	callq  1220 <memset@plt>
    4923:	c5 fc 28 05 55 1b 00 	vmovaps 0x1b55(%rip),%ymm0        # 6480 <_IO_stdin_used+0x480>
    492a:	00 
    492b:	4c 89 f8             	mov    %r15,%rax
    492e:	48 8d 9d b0 ff fd ff 	lea    -0x20050(%rbp),%rbx
    4935:	c5 fc 29 00          	vmovaps %ymm0,(%rax)
    4939:	c5 fc 29 40 20       	vmovaps %ymm0,0x20(%rax)
    493e:	c5 fc 29 40 40       	vmovaps %ymm0,0x40(%rax)
    4943:	c5 fc 29 40 60       	vmovaps %ymm0,0x60(%rax)
    4948:	c5 fc 29 80 80 00 00 	vmovaps %ymm0,0x80(%rax)
    494f:	00 
    4950:	c5 fc 29 80 a0 00 00 	vmovaps %ymm0,0xa0(%rax)
    4957:	00 
    4958:	c5 fc 29 80 c0 00 00 	vmovaps %ymm0,0xc0(%rax)
    495f:	00 
    4960:	c5 fc 29 80 e0 00 00 	vmovaps %ymm0,0xe0(%rax)
    4967:	00 
    4968:	c5 fc 29 80 00 01 00 	vmovaps %ymm0,0x100(%rax)
    496f:	00 
    4970:	c5 fc 29 80 20 01 00 	vmovaps %ymm0,0x120(%rax)
    4977:	00 
    4978:	c5 fc 29 80 40 01 00 	vmovaps %ymm0,0x140(%rax)
    497f:	00 
    4980:	c5 fc 29 80 60 01 00 	vmovaps %ymm0,0x160(%rax)
    4987:	00 
    4988:	c5 fc 29 80 80 01 00 	vmovaps %ymm0,0x180(%rax)
    498f:	00 
    4990:	c5 fc 29 80 a0 01 00 	vmovaps %ymm0,0x1a0(%rax)
    4997:	00 
    4998:	c5 fc 29 80 c0 01 00 	vmovaps %ymm0,0x1c0(%rax)
    499f:	00 
    49a0:	c5 fc 29 80 e0 01 00 	vmovaps %ymm0,0x1e0(%rax)
    49a7:	00 
    49a8:	48 05 00 02 00 00    	add    $0x200,%rax
    49ae:	48 39 d8             	cmp    %rbx,%rax
    49b1:	75 82                	jne    4935 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x85>
    49b3:	c5 fc 28 05 e5 1a 00 	vmovaps 0x1ae5(%rip),%ymm0        # 64a0 <_IO_stdin_used+0x4a0>
    49ba:	00 
    49bb:	48 89 d8             	mov    %rbx,%rax
    49be:	48 8d 8d b0 ff fe ff 	lea    -0x10050(%rbp),%rcx
    49c5:	c5 fc 29 00          	vmovaps %ymm0,(%rax)
    49c9:	c5 fc 29 40 20       	vmovaps %ymm0,0x20(%rax)
    49ce:	c5 fc 29 40 40       	vmovaps %ymm0,0x40(%rax)
    49d3:	c5 fc 29 40 60       	vmovaps %ymm0,0x60(%rax)
    49d8:	c5 fc 29 80 80 00 00 	vmovaps %ymm0,0x80(%rax)
    49df:	00 
    49e0:	c5 fc 29 80 a0 00 00 	vmovaps %ymm0,0xa0(%rax)
    49e7:	00 
    49e8:	c5 fc 29 80 c0 00 00 	vmovaps %ymm0,0xc0(%rax)
    49ef:	00 
    49f0:	c5 fc 29 80 e0 00 00 	vmovaps %ymm0,0xe0(%rax)
    49f7:	00 
    49f8:	c5 fc 29 80 00 01 00 	vmovaps %ymm0,0x100(%rax)
    49ff:	00 
    4a00:	c5 fc 29 80 20 01 00 	vmovaps %ymm0,0x120(%rax)
    4a07:	00 
    4a08:	c5 fc 29 80 40 01 00 	vmovaps %ymm0,0x140(%rax)
    4a0f:	00 
    4a10:	c5 fc 29 80 60 01 00 	vmovaps %ymm0,0x160(%rax)
    4a17:	00 
    4a18:	c5 fc 29 80 80 01 00 	vmovaps %ymm0,0x180(%rax)
    4a1f:	00 
    4a20:	c5 fc 29 80 a0 01 00 	vmovaps %ymm0,0x1a0(%rax)
    4a27:	00 
    4a28:	c5 fc 29 80 c0 01 00 	vmovaps %ymm0,0x1c0(%rax)
    4a2f:	00 
    4a30:	c5 fc 29 80 e0 01 00 	vmovaps %ymm0,0x1e0(%rax)
    4a37:	00 
    4a38:	48 05 00 02 00 00    	add    $0x200,%rax
    4a3e:	48 39 c1             	cmp    %rax,%rcx
    4a41:	75 82                	jne    49c5 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x115>
    4a43:	48 8d 85 a0 fe fc ff 	lea    -0x30160(%rbp),%rax
    4a4a:	49 89 c4             	mov    %rax,%r12
    4a4d:	4c 8d ad a8 ff fc ff 	lea    -0x30058(%rbp),%r13
    4a54:	48 89 85 88 fe fc ff 	mov    %rax,-0x30178(%rbp)
    4a5b:	c5 f8 77             	vzeroupper 
    4a5e:	e8 6d c7 ff ff       	callq  11d0 <std::chrono::_V2::system_clock::now()@plt>
    4a63:	48 89 85 98 fe fc ff 	mov    %rax,-0x30168(%rbp)
    4a6a:	48 8b 8d 90 fe fc ff 	mov    -0x30170(%rbp),%rcx
    4a71:	48 89 da             	mov    %rbx,%rdx
    4a74:	4c 89 fe             	mov    %r15,%rsi
    4a77:	4c 89 f7             	mov    %r14,%rdi
    4a7a:	ff d1                	callq  *%rcx
    4a7c:	e8 4f c7 ff ff       	callq  11d0 <std::chrono::_V2::system_clock::now()@plt>
    4a81:	48 2b 85 98 fe fc ff 	sub    -0x30168(%rbp),%rax
    4a88:	c5 f1 57 c9          	vxorpd %xmm1,%xmm1,%xmm1
    4a8c:	c4 e1 f3 2a c0       	vcvtsi2sd %rax,%xmm1,%xmm0
    4a91:	49 83 c4 08          	add    $0x8,%r12
    4a95:	c5 fb 5e 05 a3 1a 00 	vdivsd 0x1aa3(%rip),%xmm0,%xmm0        # 6540 <_IO_stdin_used+0x540>
    4a9c:	00 
    4a9d:	c4 c1 7b 11 44 24 f8 	vmovsd %xmm0,-0x8(%r12)
    4aa4:	4d 39 e5             	cmp    %r12,%r13
    4aa7:	75 b5                	jne    4a5e <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x1ae>
    4aa9:	48 8b bd 88 fe fc ff 	mov    -0x30178(%rbp),%rdi
    4ab0:	48 8d b5 20 ff fc ff 	lea    -0x300e0(%rbp),%rsi
    4ab7:	b9 0a 00 00 00       	mov    $0xa,%ecx
    4abc:	4c 89 ea             	mov    %r13,%rdx
    4abf:	e8 2c d1 ff ff       	callq  1bf0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]>
    4ac4:	48 8b 0d 75 45 00 00 	mov    0x4575(%rip),%rcx        # 9040 <std::cout@@GLIBCXX_3.4>
    4acb:	48 8d 3d 6e 45 00 00 	lea    0x456e(%rip),%rdi        # 9040 <std::cout@@GLIBCXX_3.4>
    4ad2:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    4ad6:	c5 fb 10 85 20 ff fc 	vmovsd -0x300e0(%rbp),%xmm0
    4add:	ff 
    4ade:	48 01 fa             	add    %rdi,%rdx
    4ae1:	8b 42 18             	mov    0x18(%rdx),%eax
    4ae4:	48 c7 42 08 02 00 00 	movq   $0x2,0x8(%rdx)
    4aeb:	00 
    4aec:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    4af1:	83 c8 04             	or     $0x4,%eax
    4af4:	89 42 18             	mov    %eax,0x18(%rdx)
    4af7:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    4afb:	48 c7 44 07 10 08 00 	movq   $0x8,0x10(%rdi,%rax,1)
    4b02:	00 00 
    4b04:	e8 e7 c7 ff ff       	callq  12f0 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    4b09:	c5 fa 10 45 bc       	vmovss -0x44(%rbp),%xmm0
    4b0e:	c5 f8 2e 05 3a 1a 00 	vucomiss 0x1a3a(%rip),%xmm0        # 6550 <_IO_stdin_used+0x550>
    4b15:	00 
    4b16:	7a 29                	jp     4b41 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x291>
    4b18:	75 27                	jne    4b41 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x291>
    4b1a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4b1e:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4b25:	00 00 
    4b27:	75 37                	jne    4b60 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x2b0>
    4b29:	48 81 c4 60 01 03 00 	add    $0x30160,%rsp
    4b30:	5b                   	pop    %rbx
    4b31:	41 5a                	pop    %r10
    4b33:	41 5c                	pop    %r12
    4b35:	41 5d                	pop    %r13
    4b37:	41 5e                	pop    %r14
    4b39:	41 5f                	pop    %r15
    4b3b:	5d                   	pop    %rbp
    4b3c:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    4b40:	c3                   	retq   
    4b41:	48 8d 0d a0 15 00 00 	lea    0x15a0(%rip),%rcx        # 60e8 <_IO_stdin_used+0xe8>
    4b48:	ba 56 00 00 00       	mov    $0x56,%edx
    4b4d:	48 8d 35 85 15 00 00 	lea    0x1585(%rip),%rsi        # 60d9 <_IO_stdin_used+0xd9>
    4b54:	48 8d 3d 5d 15 00 00 	lea    0x155d(%rip),%rdi        # 60b8 <_IO_stdin_used+0xb8>
    4b5b:	e8 d0 c6 ff ff       	callq  1230 <__assert_fail@plt>
    4b60:	e8 3b c7 ff ff       	callq  12a0 <__stack_chk_fail@plt>
    4b65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    4b6c:	00 00 00 
    4b6f:	90                   	nop

0000000000004b70 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>:
    4b70:	f3 0f 1e fa          	endbr64 
    4b74:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    4b79:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    4b7d:	41 ff 72 f8          	pushq  -0x8(%r10)
    4b81:	55                   	push   %rbp
    4b82:	48 89 e5             	mov    %rsp,%rbp
    4b85:	41 57                	push   %r15
    4b87:	41 56                	push   %r14
    4b89:	41 55                	push   %r13
    4b8b:	41 54                	push   %r12
    4b8d:	41 52                	push   %r10
    4b8f:	53                   	push   %rbx
    4b90:	4c 8d 9c 24 00 00 fa 	lea    -0x60000(%rsp),%r11
    4b97:	ff 
    4b98:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    4b9f:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    4ba4:	4c 39 dc             	cmp    %r11,%rsp
    4ba7:	75 ef                	jne    4b98 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x28>
    4ba9:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
    4bb0:	ba 00 00 02 00       	mov    $0x20000,%edx
    4bb5:	31 f6                	xor    %esi,%esi
    4bb7:	48 89 bd 90 fe f9 ff 	mov    %rdi,-0x60170(%rbp)
    4bbe:	4c 8d ad c0 ff fd ff 	lea    -0x20040(%rbp),%r13
    4bc5:	4c 89 ef             	mov    %r13,%rdi
    4bc8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4bcf:	00 00 
    4bd1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    4bd5:	31 c0                	xor    %eax,%eax
    4bd7:	4c 8d bd b0 ff f9 ff 	lea    -0x60050(%rbp),%r15
    4bde:	e8 3d c6 ff ff       	callq  1220 <memset@plt>
    4be3:	c5 fd 28 05 d5 18 00 	vmovapd 0x18d5(%rip),%ymm0        # 64c0 <_IO_stdin_used+0x4c0>
    4bea:	00 
    4beb:	4c 89 f9             	mov    %r15,%rcx
    4bee:	48 8d 95 b0 03 fa ff 	lea    -0x5fc50(%rbp),%rdx
    4bf5:	48 8d b5 b0 03 fc ff 	lea    -0x3fc50(%rbp),%rsi
    4bfc:	48 89 c8             	mov    %rcx,%rax
    4bff:	90                   	nop
    4c00:	c5 fd 29 00          	vmovapd %ymm0,(%rax)
    4c04:	48 83 c0 20          	add    $0x20,%rax
    4c08:	48 39 d0             	cmp    %rdx,%rax
    4c0b:	75 f3                	jne    4c00 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x90>
    4c0d:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
    4c14:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    4c1b:	48 39 f2             	cmp    %rsi,%rdx
    4c1e:	75 dc                	jne    4bfc <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x8c>
    4c20:	4c 8d b5 b0 ff fb ff 	lea    -0x40050(%rbp),%r14
    4c27:	c5 fd 28 05 b1 18 00 	vmovapd 0x18b1(%rip),%ymm0        # 64e0 <_IO_stdin_used+0x4e0>
    4c2e:	00 
    4c2f:	4c 89 f1             	mov    %r14,%rcx
    4c32:	48 8d b5 b0 03 fe ff 	lea    -0x1fc50(%rbp),%rsi
    4c39:	48 89 c8             	mov    %rcx,%rax
    4c3c:	0f 1f 40 00          	nopl   0x0(%rax)
    4c40:	c5 fd 29 00          	vmovapd %ymm0,(%rax)
    4c44:	48 83 c0 20          	add    $0x20,%rax
    4c48:	48 39 d0             	cmp    %rdx,%rax
    4c4b:	75 f3                	jne    4c40 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0xd0>
    4c4d:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
    4c54:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    4c5b:	48 39 f2             	cmp    %rsi,%rdx
    4c5e:	75 d9                	jne    4c39 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0xc9>
    4c60:	48 8d 85 a0 fe f9 ff 	lea    -0x60160(%rbp),%rax
    4c67:	48 89 c3             	mov    %rax,%rbx
    4c6a:	4c 8d a5 a8 ff f9 ff 	lea    -0x60058(%rbp),%r12
    4c71:	48 89 85 88 fe f9 ff 	mov    %rax,-0x60178(%rbp)
    4c78:	c5 f8 77             	vzeroupper 
    4c7b:	e8 50 c5 ff ff       	callq  11d0 <std::chrono::_V2::system_clock::now()@plt>
    4c80:	48 89 85 98 fe f9 ff 	mov    %rax,-0x60168(%rbp)
    4c87:	48 8b 8d 90 fe f9 ff 	mov    -0x60170(%rbp),%rcx
    4c8e:	4c 89 f2             	mov    %r14,%rdx
    4c91:	4c 89 fe             	mov    %r15,%rsi
    4c94:	4c 89 ef             	mov    %r13,%rdi
    4c97:	ff d1                	callq  *%rcx
    4c99:	e8 32 c5 ff ff       	callq  11d0 <std::chrono::_V2::system_clock::now()@plt>
    4c9e:	48 2b 85 98 fe f9 ff 	sub    -0x60168(%rbp),%rax
    4ca5:	c5 f1 57 c9          	vxorpd %xmm1,%xmm1,%xmm1
    4ca9:	c4 e1 f3 2a c0       	vcvtsi2sd %rax,%xmm1,%xmm0
    4cae:	48 83 c3 08          	add    $0x8,%rbx
    4cb2:	c5 fb 5e 05 86 18 00 	vdivsd 0x1886(%rip),%xmm0,%xmm0        # 6540 <_IO_stdin_used+0x540>
    4cb9:	00 
    4cba:	c5 fb 11 43 f8       	vmovsd %xmm0,-0x8(%rbx)
    4cbf:	49 39 dc             	cmp    %rbx,%r12
    4cc2:	75 b7                	jne    4c7b <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x10b>
    4cc4:	48 8b bd 88 fe f9 ff 	mov    -0x60178(%rbp),%rdi
    4ccb:	48 8d b5 20 ff f9 ff 	lea    -0x600e0(%rbp),%rsi
    4cd2:	b9 0a 00 00 00       	mov    $0xa,%ecx
    4cd7:	4c 89 e2             	mov    %r12,%rdx
    4cda:	e8 11 cf ff ff       	callq  1bf0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]>
    4cdf:	48 8b 0d 5a 43 00 00 	mov    0x435a(%rip),%rcx        # 9040 <std::cout@@GLIBCXX_3.4>
    4ce6:	48 8d 3d 53 43 00 00 	lea    0x4353(%rip),%rdi        # 9040 <std::cout@@GLIBCXX_3.4>
    4ced:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    4cf1:	c5 fb 10 85 20 ff f9 	vmovsd -0x600e0(%rbp),%xmm0
    4cf8:	ff 
    4cf9:	48 01 fa             	add    %rdi,%rdx
    4cfc:	8b 42 18             	mov    0x18(%rdx),%eax
    4cff:	48 c7 42 08 02 00 00 	movq   $0x2,0x8(%rdx)
    4d06:	00 
    4d07:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    4d0c:	83 c8 04             	or     $0x4,%eax
    4d0f:	89 42 18             	mov    %eax,0x18(%rdx)
    4d12:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    4d16:	48 c7 44 07 10 08 00 	movq   $0x8,0x10(%rdi,%rax,1)
    4d1d:	00 00 
    4d1f:	e8 cc c5 ff ff       	callq  12f0 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    4d24:	c5 fb 10 05 1c 18 00 	vmovsd 0x181c(%rip),%xmm0        # 6548 <_IO_stdin_used+0x548>
    4d2b:	00 
    4d2c:	c5 f9 2e 45 b8       	vucomisd -0x48(%rbp),%xmm0
    4d31:	7a 29                	jp     4d5c <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x1ec>
    4d33:	75 27                	jne    4d5c <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x1ec>
    4d35:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4d39:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4d40:	00 00 
    4d42:	75 37                	jne    4d7b <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x20b>
    4d44:	48 81 c4 60 01 06 00 	add    $0x60160,%rsp
    4d4b:	5b                   	pop    %rbx
    4d4c:	41 5a                	pop    %r10
    4d4e:	41 5c                	pop    %r12
    4d50:	41 5d                	pop    %r13
    4d52:	41 5e                	pop    %r14
    4d54:	41 5f                	pop    %r15
    4d56:	5d                   	pop    %rbp
    4d57:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    4d5b:	c3                   	retq   
    4d5c:	48 8d 0d e5 13 00 00 	lea    0x13e5(%rip),%rcx        # 6148 <_IO_stdin_used+0x148>
    4d63:	ba 56 00 00 00       	mov    $0x56,%edx
    4d68:	48 8d 35 6a 13 00 00 	lea    0x136a(%rip),%rsi        # 60d9 <_IO_stdin_used+0xd9>
    4d6f:	48 8d 3d 42 13 00 00 	lea    0x1342(%rip),%rdi        # 60b8 <_IO_stdin_used+0xb8>
    4d76:	e8 b5 c4 ff ff       	callq  1230 <__assert_fail@plt>
    4d7b:	e8 20 c5 ff ff       	callq  12a0 <__stack_chk_fail@plt>

0000000000004d80 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>:
    4d80:	f3 0f 1e fa          	endbr64 
    4d84:	41 57                	push   %r15
    4d86:	41 56                	push   %r14
    4d88:	41 55                	push   %r13
    4d8a:	41 54                	push   %r12
    4d8c:	55                   	push   %rbp
    4d8d:	53                   	push   %rbx
    4d8e:	4c 8d 9c 24 00 00 fa 	lea    -0x60000(%rsp),%r11
    4d95:	ff 
    4d96:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    4d9d:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    4da2:	4c 39 dc             	cmp    %r11,%rsp
    4da5:	75 ef                	jne    4d96 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x16>
    4da7:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
    4dae:	ba 00 00 02 00       	mov    $0x20000,%edx
    4db3:	31 f6                	xor    %esi,%esi
    4db5:	4c 8d a4 24 20 01 00 	lea    0x120(%rsp),%r12
    4dbc:	00 
    4dbd:	48 89 fd             	mov    %rdi,%rbp
    4dc0:	4c 89 e7             	mov    %r12,%rdi
    4dc3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4dca:	00 00 
    4dcc:	48 89 84 24 28 01 06 	mov    %rax,0x60128(%rsp)
    4dd3:	00 
    4dd4:	31 c0                	xor    %eax,%eax
    4dd6:	e8 45 c4 ff ff       	callq  1220 <memset@plt>
    4ddb:	48 8d 94 24 20 05 02 	lea    0x20520(%rsp),%rdx
    4de2:	00 
    4de3:	48 8d 8c 24 20 05 04 	lea    0x40520(%rsp),%rcx
    4dea:	00 
    4deb:	48 8d 82 00 fc ff ff 	lea    -0x400(%rdx),%rax
    4df2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4df8:	48 c7 00 02 00 00 00 	movq   $0x2,(%rax)
    4dff:	48 83 c0 08          	add    $0x8,%rax
    4e03:	48 39 d0             	cmp    %rdx,%rax
    4e06:	75 f0                	jne    4df8 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x78>
    4e08:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
    4e0f:	48 39 ca             	cmp    %rcx,%rdx
    4e12:	75 d7                	jne    4deb <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x6b>
    4e14:	48 8d 8c 24 20 05 06 	lea    0x60520(%rsp),%rcx
    4e1b:	00 
    4e1c:	48 8d 82 00 fc ff ff 	lea    -0x400(%rdx),%rax
    4e23:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    4e28:	48 c7 00 03 00 00 00 	movq   $0x3,(%rax)
    4e2f:	48 83 c0 08          	add    $0x8,%rax
    4e33:	48 39 d0             	cmp    %rdx,%rax
    4e36:	75 f0                	jne    4e28 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0xa8>
    4e38:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
    4e3f:	48 39 ca             	cmp    %rcx,%rdx
    4e42:	75 d8                	jne    4e1c <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x9c>
    4e44:	4c 8d 7c 24 10       	lea    0x10(%rsp),%r15
    4e49:	48 8d 84 24 18 01 00 	lea    0x118(%rsp),%rax
    4e50:	00 
    4e51:	4c 89 7c 24 08       	mov    %r15,0x8(%rsp)
    4e56:	48 89 04 24          	mov    %rax,(%rsp)
    4e5a:	4c 8d b4 24 20 01 04 	lea    0x40120(%rsp),%r14
    4e61:	00 
    4e62:	4c 8d ac 24 20 01 02 	lea    0x20120(%rsp),%r13
    4e69:	00 
    4e6a:	e8 61 c3 ff ff       	callq  11d0 <std::chrono::_V2::system_clock::now()@plt>
    4e6f:	4c 89 f2             	mov    %r14,%rdx
    4e72:	4c 89 ee             	mov    %r13,%rsi
    4e75:	4c 89 e7             	mov    %r12,%rdi
    4e78:	48 89 c3             	mov    %rax,%rbx
    4e7b:	ff d5                	callq  *%rbp
    4e7d:	e8 4e c3 ff ff       	callq  11d0 <std::chrono::_V2::system_clock::now()@plt>
    4e82:	48 29 d8             	sub    %rbx,%rax
    4e85:	c5 f1 57 c9          	vxorpd %xmm1,%xmm1,%xmm1
    4e89:	c4 e1 f3 2a c0       	vcvtsi2sd %rax,%xmm1,%xmm0
    4e8e:	49 83 c7 08          	add    $0x8,%r15
    4e92:	c5 fb 5e 05 a6 16 00 	vdivsd 0x16a6(%rip),%xmm0,%xmm0        # 6540 <_IO_stdin_used+0x540>
    4e99:	00 
    4e9a:	c4 c1 7b 11 47 f8    	vmovsd %xmm0,-0x8(%r15)
    4ea0:	4c 3b 3c 24          	cmp    (%rsp),%r15
    4ea4:	75 c4                	jne    4e6a <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0xea>
    4ea6:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    4eab:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
    4eb2:	00 
    4eb3:	b9 0a 00 00 00       	mov    $0xa,%ecx
    4eb8:	4c 89 fa             	mov    %r15,%rdx
    4ebb:	e8 30 cd ff ff       	callq  1bf0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]>
    4ec0:	48 8b 0d 79 41 00 00 	mov    0x4179(%rip),%rcx        # 9040 <std::cout@@GLIBCXX_3.4>
    4ec7:	48 8d 3d 72 41 00 00 	lea    0x4172(%rip),%rdi        # 9040 <std::cout@@GLIBCXX_3.4>
    4ece:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    4ed2:	c5 fb 10 84 24 90 00 	vmovsd 0x90(%rsp),%xmm0
    4ed9:	00 00 
    4edb:	48 01 fa             	add    %rdi,%rdx
    4ede:	8b 42 18             	mov    0x18(%rdx),%eax
    4ee1:	48 c7 42 08 02 00 00 	movq   $0x2,0x8(%rdx)
    4ee8:	00 
    4ee9:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    4eee:	83 c8 04             	or     $0x4,%eax
    4ef1:	89 42 18             	mov    %eax,0x18(%rdx)
    4ef4:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    4ef8:	48 c7 44 07 10 08 00 	movq   $0x8,0x10(%rdi,%rax,1)
    4eff:	00 00 
    4f01:	e8 ea c3 ff ff       	callq  12f0 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    4f06:	48 81 bc 24 18 01 02 	cmpq   $0x6300,0x20118(%rsp)
    4f0d:	00 00 63 00 00 
    4f12:	75 25                	jne    4f39 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x1b9>
    4f14:	48 8b 84 24 28 01 06 	mov    0x60128(%rsp),%rax
    4f1b:	00 
    4f1c:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4f23:	00 00 
    4f25:	75 31                	jne    4f58 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x1d8>
    4f27:	48 81 c4 38 01 06 00 	add    $0x60138,%rsp
    4f2e:	5b                   	pop    %rbx
    4f2f:	5d                   	pop    %rbp
    4f30:	41 5c                	pop    %r12
    4f32:	41 5d                	pop    %r13
    4f34:	41 5e                	pop    %r14
    4f36:	41 5f                	pop    %r15
    4f38:	c3                   	retq   
    4f39:	48 8d 0d 70 12 00 00 	lea    0x1270(%rip),%rcx        # 61b0 <_IO_stdin_used+0x1b0>
    4f40:	ba 56 00 00 00       	mov    $0x56,%edx
    4f45:	48 8d 35 8d 11 00 00 	lea    0x118d(%rip),%rsi        # 60d9 <_IO_stdin_used+0xd9>
    4f4c:	48 8d 3d 65 11 00 00 	lea    0x1165(%rip),%rdi        # 60b8 <_IO_stdin_used+0xb8>
    4f53:	e8 d8 c2 ff ff       	callq  1230 <__assert_fail@plt>
    4f58:	e8 43 c3 ff ff       	callq  12a0 <__stack_chk_fail@plt>
    4f5d:	0f 1f 00             	nopl   (%rax)

0000000000004f60 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>:
    4f60:	f3 0f 1e fa          	endbr64 
    4f64:	41 57                	push   %r15
    4f66:	41 56                	push   %r14
    4f68:	41 55                	push   %r13
    4f6a:	41 54                	push   %r12
    4f6c:	55                   	push   %rbp
    4f6d:	53                   	push   %rbx
    4f6e:	4c 8d 9c 24 00 00 f4 	lea    -0xc0000(%rsp),%r11
    4f75:	ff 
    4f76:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    4f7d:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    4f82:	4c 39 dc             	cmp    %r11,%rsp
    4f85:	75 ef                	jne    4f76 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x16>
    4f87:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
    4f8e:	ba 00 00 04 00       	mov    $0x40000,%edx
    4f93:	31 f6                	xor    %esi,%esi
    4f95:	4c 8d a4 24 20 01 00 	lea    0x120(%rsp),%r12
    4f9c:	00 
    4f9d:	48 89 fd             	mov    %rdi,%rbp
    4fa0:	4c 89 e7             	mov    %r12,%rdi
    4fa3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4faa:	00 00 
    4fac:	48 89 84 24 28 01 0c 	mov    %rax,0xc0128(%rsp)
    4fb3:	00 
    4fb4:	31 c0                	xor    %eax,%eax
    4fb6:	e8 65 c2 ff ff       	callq  1220 <memset@plt>
    4fbb:	48 8d 94 24 20 09 04 	lea    0x40920(%rsp),%rdx
    4fc2:	00 
    4fc3:	48 8d 8c 24 20 09 08 	lea    0x80920(%rsp),%rcx
    4fca:	00 
    4fcb:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    4fd2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4fd8:	48 c7 00 02 00 00 00 	movq   $0x2,(%rax)
    4fdf:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    4fe6:	00 
    4fe7:	48 83 c0 10          	add    $0x10,%rax
    4feb:	48 39 d0             	cmp    %rdx,%rax
    4fee:	75 e8                	jne    4fd8 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x78>
    4ff0:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    4ff7:	48 39 ca             	cmp    %rcx,%rdx
    4ffa:	75 cf                	jne    4fcb <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x6b>
    4ffc:	48 8d 8c 24 20 09 0c 	lea    0xc0920(%rsp),%rcx
    5003:	00 
    5004:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    500b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    5010:	48 c7 00 03 00 00 00 	movq   $0x3,(%rax)
    5017:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    501e:	00 
    501f:	48 83 c0 10          	add    $0x10,%rax
    5023:	48 39 d0             	cmp    %rdx,%rax
    5026:	75 e8                	jne    5010 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0xb0>
    5028:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    502f:	48 39 ca             	cmp    %rcx,%rdx
    5032:	75 d0                	jne    5004 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0xa4>
    5034:	4c 8d 7c 24 10       	lea    0x10(%rsp),%r15
    5039:	48 8d 84 24 18 01 00 	lea    0x118(%rsp),%rax
    5040:	00 
    5041:	4c 89 7c 24 08       	mov    %r15,0x8(%rsp)
    5046:	48 89 04 24          	mov    %rax,(%rsp)
    504a:	4c 8d b4 24 20 01 08 	lea    0x80120(%rsp),%r14
    5051:	00 
    5052:	4c 8d ac 24 20 01 04 	lea    0x40120(%rsp),%r13
    5059:	00 
    505a:	e8 71 c1 ff ff       	callq  11d0 <std::chrono::_V2::system_clock::now()@plt>
    505f:	4c 89 f2             	mov    %r14,%rdx
    5062:	4c 89 ee             	mov    %r13,%rsi
    5065:	4c 89 e7             	mov    %r12,%rdi
    5068:	48 89 c3             	mov    %rax,%rbx
    506b:	ff d5                	callq  *%rbp
    506d:	e8 5e c1 ff ff       	callq  11d0 <std::chrono::_V2::system_clock::now()@plt>
    5072:	48 29 d8             	sub    %rbx,%rax
    5075:	c5 f1 57 c9          	vxorpd %xmm1,%xmm1,%xmm1
    5079:	c4 e1 f3 2a c0       	vcvtsi2sd %rax,%xmm1,%xmm0
    507e:	49 83 c7 08          	add    $0x8,%r15
    5082:	c5 fb 5e 05 b6 14 00 	vdivsd 0x14b6(%rip),%xmm0,%xmm0        # 6540 <_IO_stdin_used+0x540>
    5089:	00 
    508a:	c4 c1 7b 11 47 f8    	vmovsd %xmm0,-0x8(%r15)
    5090:	4c 3b 3c 24          	cmp    (%rsp),%r15
    5094:	75 c4                	jne    505a <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0xfa>
    5096:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    509b:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
    50a2:	00 
    50a3:	b9 0a 00 00 00       	mov    $0xa,%ecx
    50a8:	4c 89 fa             	mov    %r15,%rdx
    50ab:	e8 40 cb ff ff       	callq  1bf0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]>
    50b0:	48 8b 0d 89 3f 00 00 	mov    0x3f89(%rip),%rcx        # 9040 <std::cout@@GLIBCXX_3.4>
    50b7:	48 8d 3d 82 3f 00 00 	lea    0x3f82(%rip),%rdi        # 9040 <std::cout@@GLIBCXX_3.4>
    50be:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    50c2:	c5 fb 10 84 24 90 00 	vmovsd 0x90(%rsp),%xmm0
    50c9:	00 00 
    50cb:	48 01 fa             	add    %rdi,%rdx
    50ce:	8b 42 18             	mov    0x18(%rdx),%eax
    50d1:	48 c7 42 08 02 00 00 	movq   $0x2,0x8(%rdx)
    50d8:	00 
    50d9:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    50de:	83 c8 04             	or     $0x4,%eax
    50e1:	89 42 18             	mov    %eax,0x18(%rdx)
    50e4:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    50e8:	48 c7 44 07 10 08 00 	movq   $0x8,0x10(%rdi,%rax,1)
    50ef:	00 00 
    50f1:	e8 fa c1 ff ff       	callq  12f0 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    50f6:	48 8b 84 24 10 01 04 	mov    0x40110(%rsp),%rax
    50fd:	00 
    50fe:	80 f4 63             	xor    $0x63,%ah
    5101:	48 0b 84 24 18 01 04 	or     0x40118(%rsp),%rax
    5108:	00 
    5109:	75 25                	jne    5130 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x1d0>
    510b:	48 8b 84 24 28 01 0c 	mov    0xc0128(%rsp),%rax
    5112:	00 
    5113:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    511a:	00 00 
    511c:	75 31                	jne    514f <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x1ef>
    511e:	48 81 c4 38 01 0c 00 	add    $0xc0138,%rsp
    5125:	5b                   	pop    %rbx
    5126:	5d                   	pop    %rbp
    5127:	41 5c                	pop    %r12
    5129:	41 5d                	pop    %r13
    512b:	41 5e                	pop    %r14
    512d:	41 5f                	pop    %r15
    512f:	c3                   	retq   
    5130:	48 8d 0d e9 10 00 00 	lea    0x10e9(%rip),%rcx        # 6220 <_IO_stdin_used+0x220>
    5137:	ba 56 00 00 00       	mov    $0x56,%edx
    513c:	48 8d 35 96 0f 00 00 	lea    0xf96(%rip),%rsi        # 60d9 <_IO_stdin_used+0xd9>
    5143:	48 8d 3d 6e 0f 00 00 	lea    0xf6e(%rip),%rdi        # 60b8 <_IO_stdin_used+0xb8>
    514a:	e8 e1 c0 ff ff       	callq  1230 <__assert_fail@plt>
    514f:	e8 4c c1 ff ff       	callq  12a0 <__stack_chk_fail@plt>
    5154:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    515b:	00 00 00 
    515e:	66 90                	xchg   %ax,%ax

0000000000005160 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>:
    5160:	f3 0f 1e fa          	endbr64 
    5164:	41 57                	push   %r15
    5166:	41 56                	push   %r14
    5168:	41 55                	push   %r13
    516a:	41 54                	push   %r12
    516c:	55                   	push   %rbp
    516d:	53                   	push   %rbx
    516e:	4c 8d 9c 24 00 00 f4 	lea    -0xc0000(%rsp),%r11
    5175:	ff 
    5176:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    517d:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    5182:	4c 39 dc             	cmp    %r11,%rsp
    5185:	75 ef                	jne    5176 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x16>
    5187:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
    518e:	ba 00 00 04 00       	mov    $0x40000,%edx
    5193:	31 f6                	xor    %esi,%esi
    5195:	4c 8d a4 24 20 01 00 	lea    0x120(%rsp),%r12
    519c:	00 
    519d:	48 89 fd             	mov    %rdi,%rbp
    51a0:	4c 89 e7             	mov    %r12,%rdi
    51a3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    51aa:	00 00 
    51ac:	48 89 84 24 28 01 0c 	mov    %rax,0xc0128(%rsp)
    51b3:	00 
    51b4:	31 c0                	xor    %eax,%eax
    51b6:	e8 65 c0 ff ff       	callq  1220 <memset@plt>
    51bb:	d9 05 93 13 00 00    	flds   0x1393(%rip)        # 6554 <_IO_stdin_used+0x554>
    51c1:	48 8d 94 24 20 09 04 	lea    0x40920(%rsp),%rdx
    51c8:	00 
    51c9:	48 8d 8c 24 20 09 08 	lea    0x80920(%rsp),%rcx
    51d0:	00 
    51d1:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    51d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    51df:	00 
    51e0:	db 38                	fstpt  (%rax)
    51e2:	db 28                	fldt   (%rax)
    51e4:	48 83 c0 10          	add    $0x10,%rax
    51e8:	48 39 d0             	cmp    %rdx,%rax
    51eb:	75 f3                	jne    51e0 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x80>
    51ed:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    51f4:	48 39 ca             	cmp    %rcx,%rdx
    51f7:	75 d8                	jne    51d1 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x71>
    51f9:	dd d8                	fstp   %st(0)
    51fb:	d9 05 57 13 00 00    	flds   0x1357(%rip)        # 6558 <_IO_stdin_used+0x558>
    5201:	48 8d 8c 24 20 09 0c 	lea    0xc0920(%rsp),%rcx
    5208:	00 
    5209:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    5210:	db 38                	fstpt  (%rax)
    5212:	db 28                	fldt   (%rax)
    5214:	48 83 c0 10          	add    $0x10,%rax
    5218:	48 39 d0             	cmp    %rdx,%rax
    521b:	75 f3                	jne    5210 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0xb0>
    521d:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    5224:	48 39 ca             	cmp    %rcx,%rdx
    5227:	75 e0                	jne    5209 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0xa9>
    5229:	dd d8                	fstp   %st(0)
    522b:	4c 8d 7c 24 10       	lea    0x10(%rsp),%r15
    5230:	48 8d 84 24 18 01 00 	lea    0x118(%rsp),%rax
    5237:	00 
    5238:	4c 89 7c 24 08       	mov    %r15,0x8(%rsp)
    523d:	48 89 04 24          	mov    %rax,(%rsp)
    5241:	4c 8d b4 24 20 01 08 	lea    0x80120(%rsp),%r14
    5248:	00 
    5249:	4c 8d ac 24 20 01 04 	lea    0x40120(%rsp),%r13
    5250:	00 
    5251:	e8 7a bf ff ff       	callq  11d0 <std::chrono::_V2::system_clock::now()@plt>
    5256:	4c 89 f2             	mov    %r14,%rdx
    5259:	4c 89 ee             	mov    %r13,%rsi
    525c:	4c 89 e7             	mov    %r12,%rdi
    525f:	48 89 c3             	mov    %rax,%rbx
    5262:	ff d5                	callq  *%rbp
    5264:	e8 67 bf ff ff       	callq  11d0 <std::chrono::_V2::system_clock::now()@plt>
    5269:	48 29 d8             	sub    %rbx,%rax
    526c:	c5 f1 57 c9          	vxorpd %xmm1,%xmm1,%xmm1
    5270:	c4 e1 f3 2a c0       	vcvtsi2sd %rax,%xmm1,%xmm0
    5275:	49 83 c7 08          	add    $0x8,%r15
    5279:	c5 fb 5e 05 bf 12 00 	vdivsd 0x12bf(%rip),%xmm0,%xmm0        # 6540 <_IO_stdin_used+0x540>
    5280:	00 
    5281:	c4 c1 7b 11 47 f8    	vmovsd %xmm0,-0x8(%r15)
    5287:	4c 3b 3c 24          	cmp    (%rsp),%r15
    528b:	75 c4                	jne    5251 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0xf1>
    528d:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    5292:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
    5299:	00 
    529a:	b9 0a 00 00 00       	mov    $0xa,%ecx
    529f:	4c 89 fa             	mov    %r15,%rdx
    52a2:	e8 49 c9 ff ff       	callq  1bf0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]>
    52a7:	48 8b 0d 92 3d 00 00 	mov    0x3d92(%rip),%rcx        # 9040 <std::cout@@GLIBCXX_3.4>
    52ae:	48 8d 3d 8b 3d 00 00 	lea    0x3d8b(%rip),%rdi        # 9040 <std::cout@@GLIBCXX_3.4>
    52b5:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    52b9:	c5 fb 10 84 24 90 00 	vmovsd 0x90(%rsp),%xmm0
    52c0:	00 00 
    52c2:	48 01 fa             	add    %rdi,%rdx
    52c5:	8b 42 18             	mov    0x18(%rdx),%eax
    52c8:	48 c7 42 08 02 00 00 	movq   $0x2,0x8(%rdx)
    52cf:	00 
    52d0:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    52d5:	83 c8 04             	or     $0x4,%eax
    52d8:	89 42 18             	mov    %eax,0x18(%rdx)
    52db:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    52df:	48 c7 44 07 10 08 00 	movq   $0x8,0x10(%rdi,%rax,1)
    52e6:	00 00 
    52e8:	e8 03 c0 ff ff       	callq  12f0 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    52ed:	d9 05 5d 12 00 00    	flds   0x125d(%rip)        # 6550 <_IO_stdin_used+0x550>
    52f3:	db ac 24 10 01 04 00 	fldt   0x40110(%rsp)
    52fa:	df e9                	fucomip %st(1),%st
    52fc:	dd d8                	fstp   %st(0)
    52fe:	7a 27                	jp     5327 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x1c7>
    5300:	75 25                	jne    5327 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x1c7>
    5302:	48 8b 84 24 28 01 0c 	mov    0xc0128(%rsp),%rax
    5309:	00 
    530a:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5311:	00 00 
    5313:	75 31                	jne    5346 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x1e6>
    5315:	48 81 c4 38 01 0c 00 	add    $0xc0138,%rsp
    531c:	5b                   	pop    %rbx
    531d:	5d                   	pop    %rbp
    531e:	41 5c                	pop    %r12
    5320:	41 5d                	pop    %r13
    5322:	41 5e                	pop    %r14
    5324:	41 5f                	pop    %r15
    5326:	c3                   	retq   
    5327:	48 8d 0d 62 0f 00 00 	lea    0xf62(%rip),%rcx        # 6290 <_IO_stdin_used+0x290>
    532e:	ba 56 00 00 00       	mov    $0x56,%edx
    5333:	48 8d 35 9f 0d 00 00 	lea    0xd9f(%rip),%rsi        # 60d9 <_IO_stdin_used+0xd9>
    533a:	48 8d 3d 77 0d 00 00 	lea    0xd77(%rip),%rdi        # 60b8 <_IO_stdin_used+0xb8>
    5341:	e8 ea be ff ff       	callq  1230 <__assert_fail@plt>
    5346:	e8 55 bf ff ff       	callq  12a0 <__stack_chk_fail@plt>
    534b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000005350 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>:
    5350:	f3 0f 1e fa          	endbr64 
    5354:	41 57                	push   %r15
    5356:	41 56                	push   %r14
    5358:	41 55                	push   %r13
    535a:	41 54                	push   %r12
    535c:	55                   	push   %rbp
    535d:	53                   	push   %rbx
    535e:	4c 8d 9c 24 00 00 f4 	lea    -0xc0000(%rsp),%r11
    5365:	ff 
    5366:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    536d:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    5372:	4c 39 dc             	cmp    %r11,%rsp
    5375:	75 ef                	jne    5366 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x16>
    5377:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
    537e:	ba 00 00 04 00       	mov    $0x40000,%edx
    5383:	31 f6                	xor    %esi,%esi
    5385:	4c 8d a4 24 20 01 00 	lea    0x120(%rsp),%r12
    538c:	00 
    538d:	48 89 fd             	mov    %rdi,%rbp
    5390:	4c 89 e7             	mov    %r12,%rdi
    5393:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    539a:	00 00 
    539c:	48 89 84 24 28 01 0c 	mov    %rax,0xc0128(%rsp)
    53a3:	00 
    53a4:	31 c0                	xor    %eax,%eax
    53a6:	e8 75 be ff ff       	callq  1220 <memset@plt>
    53ab:	c5 f9 6f 05 ad 11 00 	vmovdqa 0x11ad(%rip),%xmm0        # 6560 <_IO_stdin_used+0x560>
    53b2:	00 
    53b3:	48 8d 94 24 20 09 04 	lea    0x40920(%rsp),%rdx
    53ba:	00 
    53bb:	48 8d 8c 24 20 09 08 	lea    0x80920(%rsp),%rcx
    53c2:	00 
    53c3:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    53ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    53d0:	c5 f8 29 00          	vmovaps %xmm0,(%rax)
    53d4:	48 83 c0 10          	add    $0x10,%rax
    53d8:	48 39 d0             	cmp    %rdx,%rax
    53db:	75 f3                	jne    53d0 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x80>
    53dd:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    53e4:	48 39 ca             	cmp    %rcx,%rdx
    53e7:	75 da                	jne    53c3 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x73>
    53e9:	c5 f9 6f 05 7f 11 00 	vmovdqa 0x117f(%rip),%xmm0        # 6570 <_IO_stdin_used+0x570>
    53f0:	00 
    53f1:	48 8d 8c 24 20 09 0c 	lea    0xc0920(%rsp),%rcx
    53f8:	00 
    53f9:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    5400:	c5 f8 29 00          	vmovaps %xmm0,(%rax)
    5404:	48 83 c0 10          	add    $0x10,%rax
    5408:	48 39 d0             	cmp    %rdx,%rax
    540b:	75 f3                	jne    5400 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0xb0>
    540d:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    5414:	48 39 ca             	cmp    %rcx,%rdx
    5417:	75 e0                	jne    53f9 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0xa9>
    5419:	4c 8d 7c 24 10       	lea    0x10(%rsp),%r15
    541e:	48 8d 84 24 18 01 00 	lea    0x118(%rsp),%rax
    5425:	00 
    5426:	4c 89 7c 24 08       	mov    %r15,0x8(%rsp)
    542b:	48 89 04 24          	mov    %rax,(%rsp)
    542f:	4c 8d b4 24 20 01 08 	lea    0x80120(%rsp),%r14
    5436:	00 
    5437:	4c 8d ac 24 20 01 04 	lea    0x40120(%rsp),%r13
    543e:	00 
    543f:	e8 8c bd ff ff       	callq  11d0 <std::chrono::_V2::system_clock::now()@plt>
    5444:	4c 89 f2             	mov    %r14,%rdx
    5447:	4c 89 ee             	mov    %r13,%rsi
    544a:	4c 89 e7             	mov    %r12,%rdi
    544d:	48 89 c3             	mov    %rax,%rbx
    5450:	ff d5                	callq  *%rbp
    5452:	e8 79 bd ff ff       	callq  11d0 <std::chrono::_V2::system_clock::now()@plt>
    5457:	48 29 d8             	sub    %rbx,%rax
    545a:	c5 e9 57 d2          	vxorpd %xmm2,%xmm2,%xmm2
    545e:	c4 e1 eb 2a c0       	vcvtsi2sd %rax,%xmm2,%xmm0
    5463:	49 83 c7 08          	add    $0x8,%r15
    5467:	c5 fb 5e 05 d1 10 00 	vdivsd 0x10d1(%rip),%xmm0,%xmm0        # 6540 <_IO_stdin_used+0x540>
    546e:	00 
    546f:	c4 c1 7b 11 47 f8    	vmovsd %xmm0,-0x8(%r15)
    5475:	4c 3b 3c 24          	cmp    (%rsp),%r15
    5479:	75 c4                	jne    543f <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0xef>
    547b:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    5480:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
    5487:	00 
    5488:	b9 0a 00 00 00       	mov    $0xa,%ecx
    548d:	4c 89 fa             	mov    %r15,%rdx
    5490:	e8 5b c7 ff ff       	callq  1bf0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]>
    5495:	48 8b 0d a4 3b 00 00 	mov    0x3ba4(%rip),%rcx        # 9040 <std::cout@@GLIBCXX_3.4>
    549c:	48 8d 3d 9d 3b 00 00 	lea    0x3b9d(%rip),%rdi        # 9040 <std::cout@@GLIBCXX_3.4>
    54a3:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    54a7:	c5 fb 10 84 24 90 00 	vmovsd 0x90(%rsp),%xmm0
    54ae:	00 00 
    54b0:	48 01 fa             	add    %rdi,%rdx
    54b3:	8b 42 18             	mov    0x18(%rdx),%eax
    54b6:	48 c7 42 08 02 00 00 	movq   $0x2,0x8(%rdx)
    54bd:	00 
    54be:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    54c3:	83 c8 04             	or     $0x4,%eax
    54c6:	89 42 18             	mov    %eax,0x18(%rdx)
    54c9:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    54cd:	48 c7 44 07 10 08 00 	movq   $0x8,0x10(%rdi,%rax,1)
    54d4:	00 00 
    54d6:	e8 15 be ff ff       	callq  12f0 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    54db:	c5 f9 6f 0d 9d 10 00 	vmovdqa 0x109d(%rip),%xmm1        # 6580 <_IO_stdin_used+0x580>
    54e2:	00 
    54e3:	c5 f9 6f 84 24 10 01 	vmovdqa 0x40110(%rsp),%xmm0
    54ea:	04 00 
    54ec:	e8 1f be ff ff       	callq  1310 <__eqtf2@plt>
    54f1:	48 85 c0             	test   %rax,%rax
    54f4:	75 25                	jne    551b <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x1cb>
    54f6:	48 8b 84 24 28 01 0c 	mov    0xc0128(%rsp),%rax
    54fd:	00 
    54fe:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5505:	00 00 
    5507:	75 31                	jne    553a <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x1ea>
    5509:	48 81 c4 38 01 0c 00 	add    $0xc0138,%rsp
    5510:	5b                   	pop    %rbx
    5511:	5d                   	pop    %rbp
    5512:	41 5c                	pop    %r12
    5514:	41 5d                	pop    %r13
    5516:	41 5e                	pop    %r14
    5518:	41 5f                	pop    %r15
    551a:	c3                   	retq   
    551b:	48 8d 0d e6 0d 00 00 	lea    0xde6(%rip),%rcx        # 6308 <_IO_stdin_used+0x308>
    5522:	ba 56 00 00 00       	mov    $0x56,%edx
    5527:	48 8d 35 ab 0b 00 00 	lea    0xbab(%rip),%rsi        # 60d9 <_IO_stdin_used+0xd9>
    552e:	48 8d 3d 83 0b 00 00 	lea    0xb83(%rip),%rdi        # 60b8 <_IO_stdin_used+0xb8>
    5535:	e8 f6 bc ff ff       	callq  1230 <__assert_fail@plt>
    553a:	e8 61 bd ff ff       	callq  12a0 <__stack_chk_fail@plt>
    553f:	90                   	nop

0000000000005540 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>:
    5540:	f3 0f 1e fa          	endbr64 
    5544:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    5549:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    554d:	41 ff 72 f8          	pushq  -0x8(%r10)
    5551:	55                   	push   %rbp
    5552:	48 89 e5             	mov    %rsp,%rbp
    5555:	41 57                	push   %r15
    5557:	41 56                	push   %r14
    5559:	41 55                	push   %r13
    555b:	41 54                	push   %r12
    555d:	41 52                	push   %r10
    555f:	53                   	push   %rbx
    5560:	4c 8d 9c 24 00 80 fe 	lea    -0x18000(%rsp),%r11
    5567:	ff 
    5568:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    556f:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    5574:	4c 39 dc             	cmp    %r11,%rsp
    5577:	75 ef                	jne    5568 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x28>
    5579:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
    5580:	ba 00 80 00 00       	mov    $0x8000,%edx
    5585:	31 f6                	xor    %esi,%esi
    5587:	48 89 bd 90 7e fe ff 	mov    %rdi,-0x18170(%rbp)
    558e:	4c 8d b5 c0 7f ff ff 	lea    -0x8040(%rbp),%r14
    5595:	4c 89 f7             	mov    %r14,%rdi
    5598:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    559f:	00 00 
    55a1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    55a5:	31 c0                	xor    %eax,%eax
    55a7:	4c 8d bd b0 7f fe ff 	lea    -0x18050(%rbp),%r15
    55ae:	e8 6d bc ff ff       	callq  1220 <memset@plt>
    55b3:	c5 fd 6f 05 45 0f 00 	vmovdqa 0xf45(%rip),%ymm0        # 6500 <_IO_stdin_used+0x500>
    55ba:	00 
    55bb:	4c 89 f8             	mov    %r15,%rax
    55be:	48 8d 9d b0 ff fe ff 	lea    -0x10050(%rbp),%rbx
    55c5:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    55c9:	c5 fd 7f 40 20       	vmovdqa %ymm0,0x20(%rax)
    55ce:	c5 fd 7f 40 40       	vmovdqa %ymm0,0x40(%rax)
    55d3:	c5 fd 7f 40 60       	vmovdqa %ymm0,0x60(%rax)
    55d8:	c5 fd 7f 80 80 00 00 	vmovdqa %ymm0,0x80(%rax)
    55df:	00 
    55e0:	c5 fd 7f 80 a0 00 00 	vmovdqa %ymm0,0xa0(%rax)
    55e7:	00 
    55e8:	c5 fd 7f 80 c0 00 00 	vmovdqa %ymm0,0xc0(%rax)
    55ef:	00 
    55f0:	c5 fd 7f 80 e0 00 00 	vmovdqa %ymm0,0xe0(%rax)
    55f7:	00 
    55f8:	48 05 00 01 00 00    	add    $0x100,%rax
    55fe:	48 39 d8             	cmp    %rbx,%rax
    5601:	75 c2                	jne    55c5 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x85>
    5603:	c5 fd 6f 05 15 0f 00 	vmovdqa 0xf15(%rip),%ymm0        # 6520 <_IO_stdin_used+0x520>
    560a:	00 
    560b:	48 89 d8             	mov    %rbx,%rax
    560e:	48 8d 8d b0 7f ff ff 	lea    -0x8050(%rbp),%rcx
    5615:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    5619:	c5 fd 7f 40 20       	vmovdqa %ymm0,0x20(%rax)
    561e:	c5 fd 7f 40 40       	vmovdqa %ymm0,0x40(%rax)
    5623:	c5 fd 7f 40 60       	vmovdqa %ymm0,0x60(%rax)
    5628:	c5 fd 7f 80 80 00 00 	vmovdqa %ymm0,0x80(%rax)
    562f:	00 
    5630:	c5 fd 7f 80 a0 00 00 	vmovdqa %ymm0,0xa0(%rax)
    5637:	00 
    5638:	c5 fd 7f 80 c0 00 00 	vmovdqa %ymm0,0xc0(%rax)
    563f:	00 
    5640:	c5 fd 7f 80 e0 00 00 	vmovdqa %ymm0,0xe0(%rax)
    5647:	00 
    5648:	48 05 00 01 00 00    	add    $0x100,%rax
    564e:	48 39 c8             	cmp    %rcx,%rax
    5651:	75 c2                	jne    5615 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0xd5>
    5653:	48 8d 85 a0 7e fe ff 	lea    -0x18160(%rbp),%rax
    565a:	49 89 c4             	mov    %rax,%r12
    565d:	4c 8d ad a8 7f fe ff 	lea    -0x18058(%rbp),%r13
    5664:	48 89 85 88 7e fe ff 	mov    %rax,-0x18178(%rbp)
    566b:	c5 f8 77             	vzeroupper 
    566e:	e8 5d bb ff ff       	callq  11d0 <std::chrono::_V2::system_clock::now()@plt>
    5673:	48 89 85 98 7e fe ff 	mov    %rax,-0x18168(%rbp)
    567a:	48 8b 8d 90 7e fe ff 	mov    -0x18170(%rbp),%rcx
    5681:	48 89 da             	mov    %rbx,%rdx
    5684:	4c 89 fe             	mov    %r15,%rsi
    5687:	4c 89 f7             	mov    %r14,%rdi
    568a:	ff d1                	callq  *%rcx
    568c:	e8 3f bb ff ff       	callq  11d0 <std::chrono::_V2::system_clock::now()@plt>
    5691:	48 2b 85 98 7e fe ff 	sub    -0x18168(%rbp),%rax
    5698:	c5 f1 57 c9          	vxorpd %xmm1,%xmm1,%xmm1
    569c:	c4 e1 f3 2a c0       	vcvtsi2sd %rax,%xmm1,%xmm0
    56a1:	49 83 c4 08          	add    $0x8,%r12
    56a5:	c5 fb 5e 05 93 0e 00 	vdivsd 0xe93(%rip),%xmm0,%xmm0        # 6540 <_IO_stdin_used+0x540>
    56ac:	00 
    56ad:	c4 c1 7b 11 44 24 f8 	vmovsd %xmm0,-0x8(%r12)
    56b4:	4d 39 e5             	cmp    %r12,%r13
    56b7:	75 b5                	jne    566e <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x12e>
    56b9:	48 8b bd 88 7e fe ff 	mov    -0x18178(%rbp),%rdi
    56c0:	48 8d b5 20 7f fe ff 	lea    -0x180e0(%rbp),%rsi
    56c7:	b9 0a 00 00 00       	mov    $0xa,%ecx
    56cc:	4c 89 ea             	mov    %r13,%rdx
    56cf:	e8 1c c5 ff ff       	callq  1bf0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]>
    56d4:	48 8b 0d 65 39 00 00 	mov    0x3965(%rip),%rcx        # 9040 <std::cout@@GLIBCXX_3.4>
    56db:	48 8d 3d 5e 39 00 00 	lea    0x395e(%rip),%rdi        # 9040 <std::cout@@GLIBCXX_3.4>
    56e2:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    56e6:	c5 fb 10 85 20 7f fe 	vmovsd -0x180e0(%rbp),%xmm0
    56ed:	ff 
    56ee:	48 01 fa             	add    %rdi,%rdx
    56f1:	8b 42 18             	mov    0x18(%rdx),%eax
    56f4:	48 c7 42 08 02 00 00 	movq   $0x2,0x8(%rdx)
    56fb:	00 
    56fc:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    5701:	83 c8 04             	or     $0x4,%eax
    5704:	89 42 18             	mov    %eax,0x18(%rdx)
    5707:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    570b:	48 c7 44 07 10 08 00 	movq   $0x8,0x10(%rdi,%rax,1)
    5712:	00 00 
    5714:	e8 d7 bb ff ff       	callq  12f0 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    5719:	66 81 7d be 00 63    	cmpw   $0x6300,-0x42(%rbp)
    571f:	75 27                	jne    5748 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x208>
    5721:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5725:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    572c:	00 00 
    572e:	75 37                	jne    5767 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x227>
    5730:	48 81 c4 60 81 01 00 	add    $0x18160,%rsp
    5737:	5b                   	pop    %rbx
    5738:	41 5a                	pop    %r10
    573a:	41 5c                	pop    %r12
    573c:	41 5d                	pop    %r13
    573e:	41 5e                	pop    %r14
    5740:	41 5f                	pop    %r15
    5742:	5d                   	pop    %rbp
    5743:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    5747:	c3                   	retq   
    5748:	48 8d 0d 31 0c 00 00 	lea    0xc31(%rip),%rcx        # 6380 <_IO_stdin_used+0x380>
    574f:	ba 56 00 00 00       	mov    $0x56,%edx
    5754:	48 8d 35 7e 09 00 00 	lea    0x97e(%rip),%rsi        # 60d9 <_IO_stdin_used+0xd9>
    575b:	48 8d 3d 56 09 00 00 	lea    0x956(%rip),%rdi        # 60b8 <_IO_stdin_used+0xb8>
    5762:	e8 c9 ba ff ff       	callq  1230 <__assert_fail@plt>
    5767:	e8 34 bb ff ff       	callq  12a0 <__stack_chk_fail@plt>
    576c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000005770 <__libc_csu_init>:
    5770:	f3 0f 1e fa          	endbr64 
    5774:	41 57                	push   %r15
    5776:	4c 8d 3d 2b 35 00 00 	lea    0x352b(%rip),%r15        # 8ca8 <__frame_dummy_init_array_entry>
    577d:	41 56                	push   %r14
    577f:	49 89 d6             	mov    %rdx,%r14
    5782:	41 55                	push   %r13
    5784:	49 89 f5             	mov    %rsi,%r13
    5787:	41 54                	push   %r12
    5789:	41 89 fc             	mov    %edi,%r12d
    578c:	55                   	push   %rbp
    578d:	48 8d 2d 24 35 00 00 	lea    0x3524(%rip),%rbp        # 8cb8 <__do_global_dtors_aux_fini_array_entry>
    5794:	53                   	push   %rbx
    5795:	4c 29 fd             	sub    %r15,%rbp
    5798:	48 83 ec 08          	sub    $0x8,%rsp
    579c:	e8 5f b8 ff ff       	callq  1000 <_init>
    57a1:	48 c1 fd 03          	sar    $0x3,%rbp
    57a5:	74 1f                	je     57c6 <__libc_csu_init+0x56>
    57a7:	31 db                	xor    %ebx,%ebx
    57a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    57b0:	4c 89 f2             	mov    %r14,%rdx
    57b3:	4c 89 ee             	mov    %r13,%rsi
    57b6:	44 89 e7             	mov    %r12d,%edi
    57b9:	41 ff 14 df          	callq  *(%r15,%rbx,8)
    57bd:	48 83 c3 01          	add    $0x1,%rbx
    57c1:	48 39 dd             	cmp    %rbx,%rbp
    57c4:	75 ea                	jne    57b0 <__libc_csu_init+0x40>
    57c6:	48 83 c4 08          	add    $0x8,%rsp
    57ca:	5b                   	pop    %rbx
    57cb:	5d                   	pop    %rbp
    57cc:	41 5c                	pop    %r12
    57ce:	41 5d                	pop    %r13
    57d0:	41 5e                	pop    %r14
    57d2:	41 5f                	pop    %r15
    57d4:	c3                   	retq   
    57d5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    57dc:	00 00 00 00 

00000000000057e0 <__libc_csu_fini>:
    57e0:	f3 0f 1e fa          	endbr64 
    57e4:	c3                   	retq   

Desensamblado de la secci贸n .fini:

00000000000057e8 <_fini>:
    57e8:	f3 0f 1e fa          	endbr64 
    57ec:	48 83 ec 08          	sub    $0x8,%rsp
    57f0:	48 83 c4 08          	add    $0x8,%rsp
    57f4:	c3                   	retq   
