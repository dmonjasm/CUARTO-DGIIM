
ijk-l:     formato del fichero elf64-x86-64


Desensamblado de la sección .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 d9 3f 00 00 	mov    0x3fd9(%rip),%rax        # 4fe8 <__gmon_start__>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	callq  *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	retq   

Desensamblado de la sección .plt:

0000000000001020 <.plt>:
    1020:	ff 35 22 3f 00 00    	pushq  0x3f22(%rip)        # 4f48 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	f2 ff 25 23 3f 00 00 	bnd jmpq *0x3f23(%rip)        # 4f50 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	0f 1f 00             	nopl   (%rax)
    1030:	f3 0f 1e fa          	endbr64 
    1034:	68 00 00 00 00       	pushq  $0x0
    1039:	f2 e9 e1 ff ff ff    	bnd jmpq 1020 <.plt>
    103f:	90                   	nop
    1040:	f3 0f 1e fa          	endbr64 
    1044:	68 01 00 00 00       	pushq  $0x1
    1049:	f2 e9 d1 ff ff ff    	bnd jmpq 1020 <.plt>
    104f:	90                   	nop
    1050:	f3 0f 1e fa          	endbr64 
    1054:	68 02 00 00 00       	pushq  $0x2
    1059:	f2 e9 c1 ff ff ff    	bnd jmpq 1020 <.plt>
    105f:	90                   	nop
    1060:	f3 0f 1e fa          	endbr64 
    1064:	68 03 00 00 00       	pushq  $0x3
    1069:	f2 e9 b1 ff ff ff    	bnd jmpq 1020 <.plt>
    106f:	90                   	nop
    1070:	f3 0f 1e fa          	endbr64 
    1074:	68 04 00 00 00       	pushq  $0x4
    1079:	f2 e9 a1 ff ff ff    	bnd jmpq 1020 <.plt>
    107f:	90                   	nop
    1080:	f3 0f 1e fa          	endbr64 
    1084:	68 05 00 00 00       	pushq  $0x5
    1089:	f2 e9 91 ff ff ff    	bnd jmpq 1020 <.plt>
    108f:	90                   	nop
    1090:	f3 0f 1e fa          	endbr64 
    1094:	68 06 00 00 00       	pushq  $0x6
    1099:	f2 e9 81 ff ff ff    	bnd jmpq 1020 <.plt>
    109f:	90                   	nop
    10a0:	f3 0f 1e fa          	endbr64 
    10a4:	68 07 00 00 00       	pushq  $0x7
    10a9:	f2 e9 71 ff ff ff    	bnd jmpq 1020 <.plt>
    10af:	90                   	nop
    10b0:	f3 0f 1e fa          	endbr64 
    10b4:	68 08 00 00 00       	pushq  $0x8
    10b9:	f2 e9 61 ff ff ff    	bnd jmpq 1020 <.plt>
    10bf:	90                   	nop
    10c0:	f3 0f 1e fa          	endbr64 
    10c4:	68 09 00 00 00       	pushq  $0x9
    10c9:	f2 e9 51 ff ff ff    	bnd jmpq 1020 <.plt>
    10cf:	90                   	nop
    10d0:	f3 0f 1e fa          	endbr64 
    10d4:	68 0a 00 00 00       	pushq  $0xa
    10d9:	f2 e9 41 ff ff ff    	bnd jmpq 1020 <.plt>
    10df:	90                   	nop
    10e0:	f3 0f 1e fa          	endbr64 
    10e4:	68 0b 00 00 00       	pushq  $0xb
    10e9:	f2 e9 31 ff ff ff    	bnd jmpq 1020 <.plt>
    10ef:	90                   	nop
    10f0:	f3 0f 1e fa          	endbr64 
    10f4:	68 0c 00 00 00       	pushq  $0xc
    10f9:	f2 e9 21 ff ff ff    	bnd jmpq 1020 <.plt>
    10ff:	90                   	nop
    1100:	f3 0f 1e fa          	endbr64 
    1104:	68 0d 00 00 00       	pushq  $0xd
    1109:	f2 e9 11 ff ff ff    	bnd jmpq 1020 <.plt>
    110f:	90                   	nop
    1110:	f3 0f 1e fa          	endbr64 
    1114:	68 0e 00 00 00       	pushq  $0xe
    1119:	f2 e9 01 ff ff ff    	bnd jmpq 1020 <.plt>
    111f:	90                   	nop

Desensamblado de la sección .plt.got:

0000000000001120 <__cxa_finalize@plt>:
    1120:	f3 0f 1e fa          	endbr64 
    1124:	f2 ff 25 a5 3e 00 00 	bnd jmpq *0x3ea5(%rip)        # 4fd0 <__cxa_finalize@GLIBC_2.2.5>
    112b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la sección .plt.sec:

0000000000001130 <std::ostream::put(char)@plt>:
    1130:	f3 0f 1e fa          	endbr64 
    1134:	f2 ff 25 1d 3e 00 00 	bnd jmpq *0x3e1d(%rip)        # 4f58 <std::ostream::put(char)@GLIBCXX_3.4>
    113b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001140 <std::chrono::_V2::system_clock::now()@plt>:
    1140:	f3 0f 1e fa          	endbr64 
    1144:	f2 ff 25 15 3e 00 00 	bnd jmpq *0x3e15(%rip)        # 4f60 <std::chrono::_V2::system_clock::now()@GLIBCXX_3.4.19>
    114b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001150 <strlen@plt>:
    1150:	f3 0f 1e fa          	endbr64 
    1154:	f2 ff 25 0d 3e 00 00 	bnd jmpq *0x3e0d(%rip)        # 4f68 <strlen@GLIBC_2.2.5>
    115b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001160 <memset@plt>:
    1160:	f3 0f 1e fa          	endbr64 
    1164:	f2 ff 25 05 3e 00 00 	bnd jmpq *0x3e05(%rip)        # 4f70 <memset@GLIBC_2.2.5>
    116b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001170 <__assert_fail@plt>:
    1170:	f3 0f 1e fa          	endbr64 
    1174:	f2 ff 25 fd 3d 00 00 	bnd jmpq *0x3dfd(%rip)        # 4f78 <__assert_fail@GLIBC_2.2.5>
    117b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001180 <std::ostream::flush()@plt>:
    1180:	f3 0f 1e fa          	endbr64 
    1184:	f2 ff 25 f5 3d 00 00 	bnd jmpq *0x3df5(%rip)        # 4f80 <std::ostream::flush()@GLIBCXX_3.4>
    118b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001190 <__cxa_atexit@plt>:
    1190:	f3 0f 1e fa          	endbr64 
    1194:	f2 ff 25 ed 3d 00 00 	bnd jmpq *0x3ded(%rip)        # 4f88 <__cxa_atexit@GLIBC_2.2.5>
    119b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011a0 <__stack_chk_fail@plt>:
    11a0:	f3 0f 1e fa          	endbr64 
    11a4:	f2 ff 25 e5 3d 00 00 	bnd jmpq *0x3de5(%rip)        # 4f90 <__stack_chk_fail@GLIBC_2.4>
    11ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011b0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>:
    11b0:	f3 0f 1e fa          	endbr64 
    11b4:	f2 ff 25 dd 3d 00 00 	bnd jmpq *0x3ddd(%rip)        # 4f98 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@GLIBCXX_3.4.9>
    11bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011c0 <std::ctype<char>::_M_widen_init() const@plt>:
    11c0:	f3 0f 1e fa          	endbr64 
    11c4:	f2 ff 25 d5 3d 00 00 	bnd jmpq *0x3dd5(%rip)        # 4fa0 <std::ctype<char>::_M_widen_init() const@GLIBCXX_3.4.11>
    11cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011d0 <std::__throw_bad_cast()@plt>:
    11d0:	f3 0f 1e fa          	endbr64 
    11d4:	f2 ff 25 cd 3d 00 00 	bnd jmpq *0x3dcd(%rip)        # 4fa8 <std::__throw_bad_cast()@GLIBCXX_3.4>
    11db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011e0 <std::ios_base::Init::Init()@plt>:
    11e0:	f3 0f 1e fa          	endbr64 
    11e4:	f2 ff 25 c5 3d 00 00 	bnd jmpq *0x3dc5(%rip)        # 4fb0 <std::ios_base::Init::Init()@GLIBCXX_3.4>
    11eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011f0 <std::ostream& std::ostream::_M_insert<double>(double)@plt>:
    11f0:	f3 0f 1e fa          	endbr64 
    11f4:	f2 ff 25 bd 3d 00 00 	bnd jmpq *0x3dbd(%rip)        # 4fb8 <std::ostream& std::ostream::_M_insert<double>(double)@GLIBCXX_3.4.9>
    11fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001200 <memmove@plt>:
    1200:	f3 0f 1e fa          	endbr64 
    1204:	f2 ff 25 b5 3d 00 00 	bnd jmpq *0x3db5(%rip)        # 4fc0 <memmove@GLIBC_2.2.5>
    120b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001210 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>:
    1210:	f3 0f 1e fa          	endbr64 
    1214:	f2 ff 25 ad 3d 00 00 	bnd jmpq *0x3dad(%rip)        # 4fc8 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@GLIBCXX_3.4>
    121b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la sección .text:

0000000000001220 <main>:
    1220:	f3 0f 1e fa          	endbr64 
    1224:	48 8d 15 35 3f 02 00 	lea    0x23f35(%rip),%rdx        # 25160 <b>
    122b:	48 83 ec 08          	sub    $0x8,%rsp
    122f:	48 8d 0d 2a 3f 00 00 	lea    0x3f2a(%rip),%rcx        # 5160 <c>
    1236:	48 8d b2 00 00 02 00 	lea    0x20000(%rdx),%rsi
    123d:	31 c0                	xor    %eax,%eax
    123f:	90                   	nop
    1240:	48 c7 04 02 02 00 00 	movq   $0x2,(%rdx,%rax,1)
    1247:	00 
    1248:	48 c7 04 01 03 00 00 	movq   $0x3,(%rcx,%rax,1)
    124f:	00 
    1250:	48 83 c0 08          	add    $0x8,%rax
    1254:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    125a:	75 e4                	jne    1240 <main+0x20>
    125c:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    1263:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    126a:	48 39 f2             	cmp    %rsi,%rdx
    126d:	75 ce                	jne    123d <main+0x1d>
    126f:	48 8d 35 f3 1d 00 00 	lea    0x1df3(%rip),%rsi        # 3069 <_IO_stdin_used+0x69>
    1276:	48 8d 3d a3 01 00 00 	lea    0x1a3(%rip),%rdi        # 1420 <ijk()>
    127d:	e8 8e 08 00 00       	callq  1b10 <void test<void ()>(void (&)(), char const*)>
    1282:	48 8d 35 e4 1d 00 00 	lea    0x1de4(%rip),%rsi        # 306d <_IO_stdin_used+0x6d>
    1289:	48 8d 3d 30 02 00 00 	lea    0x230(%rip),%rdi        # 14c0 <ikj()>
    1290:	e8 7b 08 00 00       	callq  1b10 <void test<void ()>(void (&)(), char const*)>
    1295:	48 8d 35 d5 1d 00 00 	lea    0x1dd5(%rip),%rsi        # 3071 <_IO_stdin_used+0x71>
    129c:	48 8d 3d bd 03 00 00 	lea    0x3bd(%rip),%rdi        # 1660 <jik()>
    12a3:	e8 68 08 00 00       	callq  1b10 <void test<void ()>(void (&)(), char const*)>
    12a8:	48 8d 35 c6 1d 00 00 	lea    0x1dc6(%rip),%rsi        # 3075 <_IO_stdin_used+0x75>
    12af:	48 8d 3d 6a 04 00 00 	lea    0x46a(%rip),%rdi        # 1720 <jki()>
    12b6:	e8 55 08 00 00       	callq  1b10 <void test<void ()>(void (&)(), char const*)>
    12bb:	48 8d 35 b7 1d 00 00 	lea    0x1db7(%rip),%rsi        # 3079 <_IO_stdin_used+0x79>
    12c2:	48 8d 3d b7 05 00 00 	lea    0x5b7(%rip),%rdi        # 1880 <kij()>
    12c9:	e8 42 08 00 00       	callq  1b10 <void test<void ()>(void (&)(), char const*)>
    12ce:	48 8d 35 a8 1d 00 00 	lea    0x1da8(%rip),%rsi        # 307d <_IO_stdin_used+0x7d>
    12d5:	48 8d 3d 44 06 00 00 	lea    0x644(%rip),%rdi        # 1920 <kji()>
    12dc:	e8 2f 08 00 00       	callq  1b10 <void test<void ()>(void (&)(), char const*)>
    12e1:	31 c0                	xor    %eax,%eax
    12e3:	48 83 c4 08          	add    $0x8,%rsp
    12e7:	c3                   	retq   
    12e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    12ef:	00 

00000000000012f0 <_GLOBAL__sub_I_a>:
    12f0:	f3 0f 1e fa          	endbr64 
    12f4:	48 83 ec 08          	sub    $0x8,%rsp
    12f8:	48 8d 3d 61 3e 06 00 	lea    0x63e61(%rip),%rdi        # 65160 <std::__ioinit>
    12ff:	e8 dc fe ff ff       	callq  11e0 <std::ios_base::Init::Init()@plt>
    1304:	48 8b 3d ed 3c 00 00 	mov    0x3ced(%rip),%rdi        # 4ff8 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
    130b:	48 8d 15 f6 3c 00 00 	lea    0x3cf6(%rip),%rdx        # 5008 <__dso_handle>
    1312:	48 8d 35 47 3e 06 00 	lea    0x63e47(%rip),%rsi        # 65160 <std::__ioinit>
    1319:	48 83 c4 08          	add    $0x8,%rsp
    131d:	e9 6e fe ff ff       	jmpq   1190 <__cxa_atexit@plt>
    1322:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1329:	00 00 00 
    132c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001330 <_start>:
    1330:	f3 0f 1e fa          	endbr64 
    1334:	31 ed                	xor    %ebp,%ebp
    1336:	49 89 d1             	mov    %rdx,%r9
    1339:	5e                   	pop    %rsi
    133a:	48 89 e2             	mov    %rsp,%rdx
    133d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    1341:	50                   	push   %rax
    1342:	54                   	push   %rsp
    1343:	4c 8d 05 d6 0c 00 00 	lea    0xcd6(%rip),%r8        # 2020 <__libc_csu_fini>
    134a:	48 8d 0d 5f 0c 00 00 	lea    0xc5f(%rip),%rcx        # 1fb0 <__libc_csu_init>
    1351:	48 8d 3d c8 fe ff ff 	lea    -0x138(%rip),%rdi        # 1220 <main>
    1358:	ff 15 82 3c 00 00    	callq  *0x3c82(%rip)        # 4fe0 <__libc_start_main@GLIBC_2.2.5>
    135e:	f4                   	hlt    
    135f:	90                   	nop

0000000000001360 <deregister_tm_clones>:
    1360:	48 8d 3d a9 3c 00 00 	lea    0x3ca9(%rip),%rdi        # 5010 <__TMC_END__>
    1367:	48 8d 05 a2 3c 00 00 	lea    0x3ca2(%rip),%rax        # 5010 <__TMC_END__>
    136e:	48 39 f8             	cmp    %rdi,%rax
    1371:	74 15                	je     1388 <deregister_tm_clones+0x28>
    1373:	48 8b 05 5e 3c 00 00 	mov    0x3c5e(%rip),%rax        # 4fd8 <_ITM_deregisterTMCloneTable>
    137a:	48 85 c0             	test   %rax,%rax
    137d:	74 09                	je     1388 <deregister_tm_clones+0x28>
    137f:	ff e0                	jmpq   *%rax
    1381:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1388:	c3                   	retq   
    1389:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001390 <register_tm_clones>:
    1390:	48 8d 3d 79 3c 00 00 	lea    0x3c79(%rip),%rdi        # 5010 <__TMC_END__>
    1397:	48 8d 35 72 3c 00 00 	lea    0x3c72(%rip),%rsi        # 5010 <__TMC_END__>
    139e:	48 29 fe             	sub    %rdi,%rsi
    13a1:	48 89 f0             	mov    %rsi,%rax
    13a4:	48 c1 ee 3f          	shr    $0x3f,%rsi
    13a8:	48 c1 f8 03          	sar    $0x3,%rax
    13ac:	48 01 c6             	add    %rax,%rsi
    13af:	48 d1 fe             	sar    %rsi
    13b2:	74 14                	je     13c8 <register_tm_clones+0x38>
    13b4:	48 8b 05 35 3c 00 00 	mov    0x3c35(%rip),%rax        # 4ff0 <_ITM_registerTMCloneTable>
    13bb:	48 85 c0             	test   %rax,%rax
    13be:	74 08                	je     13c8 <register_tm_clones+0x38>
    13c0:	ff e0                	jmpq   *%rax
    13c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    13c8:	c3                   	retq   
    13c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000013d0 <__do_global_dtors_aux>:
    13d0:	f3 0f 1e fa          	endbr64 
    13d4:	80 3d 75 3d 00 00 00 	cmpb   $0x0,0x3d75(%rip)        # 5150 <completed.8061>
    13db:	75 2b                	jne    1408 <__do_global_dtors_aux+0x38>
    13dd:	55                   	push   %rbp
    13de:	48 83 3d ea 3b 00 00 	cmpq   $0x0,0x3bea(%rip)        # 4fd0 <__cxa_finalize@GLIBC_2.2.5>
    13e5:	00 
    13e6:	48 89 e5             	mov    %rsp,%rbp
    13e9:	74 0c                	je     13f7 <__do_global_dtors_aux+0x27>
    13eb:	48 8b 3d 16 3c 00 00 	mov    0x3c16(%rip),%rdi        # 5008 <__dso_handle>
    13f2:	e8 29 fd ff ff       	callq  1120 <__cxa_finalize@plt>
    13f7:	e8 64 ff ff ff       	callq  1360 <deregister_tm_clones>
    13fc:	c6 05 4d 3d 00 00 01 	movb   $0x1,0x3d4d(%rip)        # 5150 <completed.8061>
    1403:	5d                   	pop    %rbp
    1404:	c3                   	retq   
    1405:	0f 1f 00             	nopl   (%rax)
    1408:	c3                   	retq   
    1409:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001410 <frame_dummy>:
    1410:	f3 0f 1e fa          	endbr64 
    1414:	e9 77 ff ff ff       	jmpq   1390 <register_tm_clones>
    1419:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001420 <ijk()>:
    1420:	f3 0f 1e fa          	endbr64 
    1424:	48 8d 15 35 3d 04 00 	lea    0x43d35(%rip),%rdx        # 45160 <a>
    142b:	4c 8d 05 2e 3d 02 00 	lea    0x23d2e(%rip),%r8        # 25160 <b>
    1432:	4c 8d 8a 00 00 02 00 	lea    0x20000(%rdx),%r9
    1439:	48 8d 3d 20 3d 02 00 	lea    0x23d20(%rip),%rdi        # 25160 <b>
    1440:	48 8d 0d 19 3d 00 00 	lea    0x3d19(%rip),%rcx        # 5160 <c>
    1447:	4c 89 c6             	mov    %r8,%rsi
    144a:	c4 e2 7d 59 1e       	vpbroadcastq (%rsi),%ymm3
    144f:	31 c0                	xor    %eax,%eax
    1451:	c5 dd 73 d3 20       	vpsrlq $0x20,%ymm3,%ymm4
    1456:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    145d:	00 00 00 
    1460:	c5 fd 6f 04 01       	vmovdqa (%rcx,%rax,1),%ymm0
    1465:	c5 ed 73 d0 20       	vpsrlq $0x20,%ymm0,%ymm2
    146a:	c5 e5 f4 c8          	vpmuludq %ymm0,%ymm3,%ymm1
    146e:	c5 ed f4 d3          	vpmuludq %ymm3,%ymm2,%ymm2
    1472:	c5 dd f4 c0          	vpmuludq %ymm0,%ymm4,%ymm0
    1476:	c5 fd d4 c2          	vpaddq %ymm2,%ymm0,%ymm0
    147a:	c5 fd 73 f0 20       	vpsllq $0x20,%ymm0,%ymm0
    147f:	c5 f5 d4 c0          	vpaddq %ymm0,%ymm1,%ymm0
    1483:	c5 fd d4 04 02       	vpaddq (%rdx,%rax,1),%ymm0,%ymm0
    1488:	c5 fd 7f 04 02       	vmovdqa %ymm0,(%rdx,%rax,1)
    148d:	48 83 c0 20          	add    $0x20,%rax
    1491:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    1497:	75 c7                	jne    1460 <ijk()+0x40>
    1499:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    14a0:	48 83 c6 08          	add    $0x8,%rsi
    14a4:	48 39 cf             	cmp    %rcx,%rdi
    14a7:	75 a1                	jne    144a <ijk()+0x2a>
    14a9:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    14b0:	49 81 c0 00 04 00 00 	add    $0x400,%r8
    14b7:	4c 39 ca             	cmp    %r9,%rdx
    14ba:	75 84                	jne    1440 <ijk()+0x20>
    14bc:	c5 f8 77             	vzeroupper 
    14bf:	c3                   	retq   

00000000000014c0 <ikj()>:
    14c0:	f3 0f 1e fa          	endbr64 
    14c4:	48 8d 15 95 3c 04 00 	lea    0x43c95(%rip),%rdx        # 45160 <a>
    14cb:	48 8d 3d 8e 3c 02 00 	lea    0x23c8e(%rip),%rdi        # 25160 <b>
    14d2:	4c 8d 92 00 00 02 00 	lea    0x20000(%rdx),%r10
    14d9:	4c 8d 05 80 3c 00 00 	lea    0x3c80(%rip),%r8        # 5160 <c>
    14e0:	4c 8d 0d 79 3c 00 00 	lea    0x3c79(%rip),%r9        # 5160 <c>
    14e7:	b9 02 00 00 00       	mov    $0x2,%ecx
    14ec:	c4 e2 7d 59 54 cf f0 	vpbroadcastq -0x10(%rdi,%rcx,8),%ymm2
    14f3:	c4 e2 7d 59 4c cf f8 	vpbroadcastq -0x8(%rdi,%rcx,8),%ymm1
    14fa:	49 8d b1 00 04 00 00 	lea    0x400(%r9),%rsi
    1501:	31 c0                	xor    %eax,%eax
    1503:	c5 d5 73 d2 20       	vpsrlq $0x20,%ymm2,%ymm5
    1508:	c5 dd 73 d1 20       	vpsrlq $0x20,%ymm1,%ymm4
    150d:	c4 c1 7d 6f 04 01    	vmovdqa (%r9,%rax,1),%ymm0
    1513:	c5 e5 73 d0 20       	vpsrlq $0x20,%ymm0,%ymm3
    1518:	c5 ed f4 f8          	vpmuludq %ymm0,%ymm2,%ymm7
    151c:	c5 e5 f4 da          	vpmuludq %ymm2,%ymm3,%ymm3
    1520:	c5 d5 f4 c0          	vpmuludq %ymm0,%ymm5,%ymm0
    1524:	c5 fd d4 c3          	vpaddq %ymm3,%ymm0,%ymm0
    1528:	c5 fd 73 f0 20       	vpsllq $0x20,%ymm0,%ymm0
    152d:	c5 c5 d4 c0          	vpaddq %ymm0,%ymm7,%ymm0
    1531:	c5 fd d4 3c 02       	vpaddq (%rdx,%rax,1),%ymm0,%ymm7
    1536:	c4 c1 7d 6f 44 01 20 	vmovdqa 0x20(%r9,%rax,1),%ymm0
    153d:	c5 e5 73 d0 20       	vpsrlq $0x20,%ymm0,%ymm3
    1542:	c5 ed f4 f0          	vpmuludq %ymm0,%ymm2,%ymm6
    1546:	c5 e5 f4 da          	vpmuludq %ymm2,%ymm3,%ymm3
    154a:	c5 d5 f4 c0          	vpmuludq %ymm0,%ymm5,%ymm0
    154e:	c5 fd d4 c3          	vpaddq %ymm3,%ymm0,%ymm0
    1552:	c5 fd 73 f0 20       	vpsllq $0x20,%ymm0,%ymm0
    1557:	c5 cd d4 c0          	vpaddq %ymm0,%ymm6,%ymm0
    155b:	c5 fd d4 74 02 20    	vpaddq 0x20(%rdx,%rax,1),%ymm0,%ymm6
    1561:	c5 fd 6f 44 06 20    	vmovdqa 0x20(%rsi,%rax,1),%ymm0
    1567:	c5 bd 73 d0 20       	vpsrlq $0x20,%ymm0,%ymm8
    156c:	c5 f5 f4 d8          	vpmuludq %ymm0,%ymm1,%ymm3
    1570:	c5 3d f4 c1          	vpmuludq %ymm1,%ymm8,%ymm8
    1574:	c5 dd f4 c0          	vpmuludq %ymm0,%ymm4,%ymm0
    1578:	c4 c1 7d d4 c0       	vpaddq %ymm8,%ymm0,%ymm0
    157d:	c5 fd 73 f0 20       	vpsllq $0x20,%ymm0,%ymm0
    1582:	c5 e5 d4 c0          	vpaddq %ymm0,%ymm3,%ymm0
    1586:	c5 fd d4 de          	vpaddq %ymm6,%ymm0,%ymm3
    158a:	c5 fd 6f 04 06       	vmovdqa (%rsi,%rax,1),%ymm0
    158f:	c5 fd 7f 5c 02 20    	vmovdqa %ymm3,0x20(%rdx,%rax,1)
    1595:	c5 bd 73 d0 20       	vpsrlq $0x20,%ymm0,%ymm8
    159a:	c5 f5 f4 f0          	vpmuludq %ymm0,%ymm1,%ymm6
    159e:	c5 3d f4 c1          	vpmuludq %ymm1,%ymm8,%ymm8
    15a2:	c5 dd f4 c0          	vpmuludq %ymm0,%ymm4,%ymm0
    15a6:	c4 c1 7d d4 c0       	vpaddq %ymm8,%ymm0,%ymm0
    15ab:	c5 fd 73 f0 20       	vpsllq $0x20,%ymm0,%ymm0
    15b0:	c5 cd d4 c0          	vpaddq %ymm0,%ymm6,%ymm0
    15b4:	c5 fd d4 c7          	vpaddq %ymm7,%ymm0,%ymm0
    15b8:	c5 fd 7f 04 02       	vmovdqa %ymm0,(%rdx,%rax,1)
    15bd:	48 83 c0 40          	add    $0x40,%rax
    15c1:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    15c7:	0f 85 40 ff ff ff    	jne    150d <ikj()+0x4d>
    15cd:	48 63 f1             	movslq %ecx,%rsi
    15d0:	48 83 c1 02          	add    $0x2,%rcx
    15d4:	49 81 c1 00 08 00 00 	add    $0x800,%r9
    15db:	48 81 f9 80 00 00 00 	cmp    $0x80,%rcx
    15e2:	0f 85 04 ff ff ff    	jne    14ec <ikj()+0x2c>
    15e8:	c4 e2 7d 59 1c f7    	vpbroadcastq (%rdi,%rsi,8),%ymm3
    15ee:	48 89 f1             	mov    %rsi,%rcx
    15f1:	48 c1 e1 0a          	shl    $0xa,%rcx
    15f5:	4c 01 c1             	add    %r8,%rcx
    15f8:	31 c0                	xor    %eax,%eax
    15fa:	c5 dd 73 d3 20       	vpsrlq $0x20,%ymm3,%ymm4
    15ff:	90                   	nop
    1600:	c5 fd 6f 04 01       	vmovdqa (%rcx,%rax,1),%ymm0
    1605:	c5 ed 73 d0 20       	vpsrlq $0x20,%ymm0,%ymm2
    160a:	c5 e5 f4 c8          	vpmuludq %ymm0,%ymm3,%ymm1
    160e:	c5 ed f4 d3          	vpmuludq %ymm3,%ymm2,%ymm2
    1612:	c5 dd f4 c0          	vpmuludq %ymm0,%ymm4,%ymm0
    1616:	c5 fd d4 c2          	vpaddq %ymm2,%ymm0,%ymm0
    161a:	c5 fd 73 f0 20       	vpsllq $0x20,%ymm0,%ymm0
    161f:	c5 f5 d4 c0          	vpaddq %ymm0,%ymm1,%ymm0
    1623:	c5 fd d4 04 02       	vpaddq (%rdx,%rax,1),%ymm0,%ymm0
    1628:	c5 fd 7f 04 02       	vmovdqa %ymm0,(%rdx,%rax,1)
    162d:	48 83 c0 20          	add    $0x20,%rax
    1631:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    1637:	75 c7                	jne    1600 <ikj()+0x140>
    1639:	48 ff c6             	inc    %rsi
    163c:	81 fe 80 00 00 00    	cmp    $0x80,%esi
    1642:	75 a4                	jne    15e8 <ikj()+0x128>
    1644:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    164b:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    1652:	4c 39 d2             	cmp    %r10,%rdx
    1655:	0f 85 85 fe ff ff    	jne    14e0 <ikj()+0x20>
    165b:	c5 f8 77             	vzeroupper 
    165e:	c3                   	retq   
    165f:	90                   	nop

0000000000001660 <jik()>:
    1660:	f3 0f 1e fa          	endbr64 
    1664:	4c 8d 0d f5 3a 02 00 	lea    0x23af5(%rip),%r9        # 25160 <b>
    166b:	48 8d 3d ee 3a 04 00 	lea    0x43aee(%rip),%rdi        # 45160 <a>
    1672:	4d 8d 99 00 00 02 00 	lea    0x20000(%r9),%r11
    1679:	4c 8d 15 e0 3a 02 00 	lea    0x23ae0(%rip),%r10        # 25160 <b>
    1680:	4c 8d 05 d9 3a 00 00 	lea    0x3ad9(%rip),%r8        # 5160 <c>
    1687:	4c 89 d1             	mov    %r10,%rcx
    168a:	31 f6                	xor    %esi,%esi
    168c:	c5 fd 6f 2c 37       	vmovdqa (%rdi,%rsi,1),%ymm5
    1691:	4c 89 ca             	mov    %r9,%rdx
    1694:	4c 89 c0             	mov    %r8,%rax
    1697:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    169e:	00 00 
    16a0:	c4 e2 7d 59 1a       	vpbroadcastq (%rdx),%ymm3
    16a5:	c5 fd 6f 20          	vmovdqa (%rax),%ymm4
    16a9:	c5 fd 73 d3 20       	vpsrlq $0x20,%ymm3,%ymm0
    16ae:	c5 ed 73 d4 20       	vpsrlq $0x20,%ymm4,%ymm2
    16b3:	c5 fd f4 c4          	vpmuludq %ymm4,%ymm0,%ymm0
    16b7:	c5 ed f4 d3          	vpmuludq %ymm3,%ymm2,%ymm2
    16bb:	c5 e5 f4 cc          	vpmuludq %ymm4,%ymm3,%ymm1
    16bf:	48 05 00 04 00 00    	add    $0x400,%rax
    16c5:	48 83 c2 08          	add    $0x8,%rdx
    16c9:	c5 fd d4 c2          	vpaddq %ymm2,%ymm0,%ymm0
    16cd:	c5 fd 73 f0 20       	vpsllq $0x20,%ymm0,%ymm0
    16d2:	c5 f5 d4 c0          	vpaddq %ymm0,%ymm1,%ymm0
    16d6:	c5 d5 d4 e8          	vpaddq %ymm0,%ymm5,%ymm5
    16da:	48 39 c8             	cmp    %rcx,%rax
    16dd:	75 c1                	jne    16a0 <jik()+0x40>
    16df:	c5 fd 7f 2c 37       	vmovdqa %ymm5,(%rdi,%rsi,1)
    16e4:	48 83 c6 20          	add    $0x20,%rsi
    16e8:	49 83 c0 20          	add    $0x20,%r8
    16ec:	48 8d 48 20          	lea    0x20(%rax),%rcx
    16f0:	48 81 fe 00 04 00 00 	cmp    $0x400,%rsi
    16f7:	75 93                	jne    168c <jik()+0x2c>
    16f9:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    1700:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    1707:	4d 39 d9             	cmp    %r11,%r9
    170a:	0f 85 70 ff ff ff    	jne    1680 <jik()+0x20>
    1710:	c5 f8 77             	vzeroupper 
    1713:	c3                   	retq   
    1714:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    171b:	00 00 00 00 
    171f:	90                   	nop

0000000000001720 <jki()>:
    1720:	f3 0f 1e fa          	endbr64 
    1724:	41 57                	push   %r15
    1726:	4c 8d 3d 33 3a 00 00 	lea    0x3a33(%rip),%r15        # 5160 <c>
    172d:	4c 8d 15 2c 3a 04 00 	lea    0x43a2c(%rip),%r10        # 45160 <a>
    1734:	41 56                	push   %r14
    1736:	45 31 db             	xor    %r11d,%r11d
    1739:	41 55                	push   %r13
    173b:	41 54                	push   %r12
    173d:	55                   	push   %rbp
    173e:	48 8d 2d 1b 3a 02 00 	lea    0x23a1b(%rip),%rbp        # 25160 <b>
    1745:	53                   	push   %rbx
    1746:	4c 89 fb             	mov    %r15,%rbx
    1749:	4d 63 eb             	movslq %r11d,%r13
    174c:	48 8d 35 15 3a 04 00 	lea    0x43a15(%rip),%rsi        # 45168 <a+0x8>
    1753:	49 89 dc             	mov    %rbx,%r12
    1756:	41 b9 01 00 00 00    	mov    $0x1,%r9d
    175c:	4d 8b 04 24          	mov    (%r12),%r8
    1760:	49 8b bc 24 00 04 00 	mov    0x400(%r12),%rdi
    1767:	00 
    1768:	48 8d 86 00 00 fe ff 	lea    -0x20000(%rsi),%rax
    176f:	4c 89 d2             	mov    %r10,%rdx
    1772:	4c 8b 70 f8          	mov    -0x8(%rax),%r14
    1776:	48 8b 08             	mov    (%rax),%rcx
    1779:	4d 0f af f0          	imul   %r8,%r14
    177d:	48 0f af cf          	imul   %rdi,%rcx
    1781:	48 05 00 04 00 00    	add    $0x400,%rax
    1787:	4c 01 f1             	add    %r14,%rcx
    178a:	48 01 0a             	add    %rcx,(%rdx)
    178d:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    1794:	48 39 f0             	cmp    %rsi,%rax
    1797:	75 d9                	jne    1772 <jki()+0x52>
    1799:	41 8d 51 01          	lea    0x1(%r9),%edx
    179d:	49 81 c4 00 08 00 00 	add    $0x800,%r12
    17a4:	41 8d 49 02          	lea    0x2(%r9),%ecx
    17a8:	48 8d 70 10          	lea    0x10(%rax),%rsi
    17ac:	41 83 f9 7d          	cmp    $0x7d,%r9d
    17b0:	74 05                	je     17b7 <jki()+0x97>
    17b2:	41 89 c9             	mov    %ecx,%r9d
    17b5:	eb a5                	jmp    175c <jki()+0x3c>
    17b7:	48 63 c2             	movslq %edx,%rax
    17ba:	48 89 c2             	mov    %rax,%rdx
    17bd:	48 c1 e2 07          	shl    $0x7,%rdx
    17c1:	4c 01 ea             	add    %r13,%rdx
    17c4:	49 8b 0c d7          	mov    (%r15,%rdx,8),%rcx
    17c8:	48 8b 7c c5 00       	mov    0x0(%rbp,%rax,8),%rdi
    17cd:	48 8b 93 00 fc 01 00 	mov    0x1fc00(%rbx),%rdx
    17d4:	48 8b 35 7d 3d 02 00 	mov    0x23d7d(%rip),%rsi        # 25558 <b+0x3f8>
    17db:	48 0f af f9          	imul   %rcx,%rdi
    17df:	48 0f af f2          	imul   %rdx,%rsi
    17e3:	48 0f af 15 6d 41 02 	imul   0x2416d(%rip),%rdx        # 25958 <b+0x7f8>
    17ea:	00 
    17eb:	48 01 fe             	add    %rdi,%rsi
    17ee:	49 01 32             	add    %rsi,(%r10)
    17f1:	48 8b b4 c5 00 04 00 	mov    0x400(%rbp,%rax,8),%rsi
    17f8:	00 
    17f9:	48 8d 3d 60 39 04 00 	lea    0x43960(%rip),%rdi        # 45160 <a>
    1800:	48 0f af f1          	imul   %rcx,%rsi
    1804:	48 c1 e0 03          	shl    $0x3,%rax
    1808:	4c 8d 44 05 00       	lea    0x0(%rbp,%rax,1),%r8
    180d:	48 01 f2             	add    %rsi,%rdx
    1810:	49 01 92 00 04 00 00 	add    %rdx,0x400(%r10)
    1817:	4a 8d 14 df          	lea    (%rdi,%r11,8),%rdx
    181b:	48 8d 7c 05 08       	lea    0x8(%rbp,%rax,1),%rdi
    1820:	31 c0                	xor    %eax,%eax
    1822:	4d 8b 8c 00 00 08 00 	mov    0x800(%r8,%rax,1),%r9
    1829:	00 
    182a:	48 8b b4 07 00 08 00 	mov    0x800(%rdi,%rax,1),%rsi
    1831:	00 
    1832:	4c 0f af c9          	imul   %rcx,%r9
    1836:	48 0f af b3 00 fc 01 	imul   0x1fc00(%rbx),%rsi
    183d:	00 
    183e:	48 05 00 04 00 00    	add    $0x400,%rax
    1844:	4c 01 ce             	add    %r9,%rsi
    1847:	48 01 b2 00 08 00 00 	add    %rsi,0x800(%rdx)
    184e:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    1855:	48 3d 00 f8 01 00    	cmp    $0x1f800,%rax
    185b:	75 c5                	jne    1822 <jki()+0x102>
    185d:	49 ff c3             	inc    %r11
    1860:	48 83 c3 08          	add    $0x8,%rbx
    1864:	49 83 c2 08          	add    $0x8,%r10
    1868:	49 81 fb 80 00 00 00 	cmp    $0x80,%r11
    186f:	0f 85 d4 fe ff ff    	jne    1749 <jki()+0x29>
    1875:	5b                   	pop    %rbx
    1876:	5d                   	pop    %rbp
    1877:	41 5c                	pop    %r12
    1879:	41 5d                	pop    %r13
    187b:	41 5e                	pop    %r14
    187d:	41 5f                	pop    %r15
    187f:	c3                   	retq   

0000000000001880 <kij()>:
    1880:	f3 0f 1e fa          	endbr64 
    1884:	48 8d 15 d5 38 04 00 	lea    0x438d5(%rip),%rdx        # 45160 <a>
    188b:	4c 8d 05 ce 38 02 00 	lea    0x238ce(%rip),%r8        # 25160 <b>
    1892:	4c 8d 8a 00 00 02 00 	lea    0x20000(%rdx),%r9
    1899:	48 8d 3d c0 38 02 00 	lea    0x238c0(%rip),%rdi        # 25160 <b>
    18a0:	48 8d 0d b9 38 00 00 	lea    0x38b9(%rip),%rcx        # 5160 <c>
    18a7:	4c 89 c6             	mov    %r8,%rsi
    18aa:	c4 e2 7d 59 1e       	vpbroadcastq (%rsi),%ymm3
    18af:	31 c0                	xor    %eax,%eax
    18b1:	c5 dd 73 d3 20       	vpsrlq $0x20,%ymm3,%ymm4
    18b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    18bd:	00 00 00 
    18c0:	c5 fd 6f 04 01       	vmovdqa (%rcx,%rax,1),%ymm0
    18c5:	c5 ed 73 d0 20       	vpsrlq $0x20,%ymm0,%ymm2
    18ca:	c5 e5 f4 c8          	vpmuludq %ymm0,%ymm3,%ymm1
    18ce:	c5 ed f4 d3          	vpmuludq %ymm3,%ymm2,%ymm2
    18d2:	c5 dd f4 c0          	vpmuludq %ymm0,%ymm4,%ymm0
    18d6:	c5 fd d4 c2          	vpaddq %ymm2,%ymm0,%ymm0
    18da:	c5 fd 73 f0 20       	vpsllq $0x20,%ymm0,%ymm0
    18df:	c5 f5 d4 c0          	vpaddq %ymm0,%ymm1,%ymm0
    18e3:	c5 fd d4 04 02       	vpaddq (%rdx,%rax,1),%ymm0,%ymm0
    18e8:	c5 fd 7f 04 02       	vmovdqa %ymm0,(%rdx,%rax,1)
    18ed:	48 83 c0 20          	add    $0x20,%rax
    18f1:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    18f7:	75 c7                	jne    18c0 <kij()+0x40>
    18f9:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    1900:	48 83 c6 08          	add    $0x8,%rsi
    1904:	48 39 f9             	cmp    %rdi,%rcx
    1907:	75 a1                	jne    18aa <kij()+0x2a>
    1909:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    1910:	49 81 c0 00 04 00 00 	add    $0x400,%r8
    1917:	4c 39 ca             	cmp    %r9,%rdx
    191a:	75 84                	jne    18a0 <kij()+0x20>
    191c:	c5 f8 77             	vzeroupper 
    191f:	c3                   	retq   

0000000000001920 <kji()>:
    1920:	f3 0f 1e fa          	endbr64 
    1924:	48 8d 15 35 38 04 00 	lea    0x43835(%rip),%rdx        # 45160 <a>
    192b:	4c 8d 05 2e 38 02 00 	lea    0x2382e(%rip),%r8        # 25160 <b>
    1932:	4c 8d 8a 00 00 02 00 	lea    0x20000(%rdx),%r9
    1939:	48 8d 3d 20 38 02 00 	lea    0x23820(%rip),%rdi        # 25160 <b>
    1940:	48 8d 0d 19 38 00 00 	lea    0x3819(%rip),%rcx        # 5160 <c>
    1947:	4c 89 c6             	mov    %r8,%rsi
    194a:	c4 e2 7d 59 1e       	vpbroadcastq (%rsi),%ymm3
    194f:	31 c0                	xor    %eax,%eax
    1951:	c5 dd 73 d3 20       	vpsrlq $0x20,%ymm3,%ymm4
    1956:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    195d:	00 00 00 
    1960:	c5 fd 6f 04 01       	vmovdqa (%rcx,%rax,1),%ymm0
    1965:	c5 ed 73 d0 20       	vpsrlq $0x20,%ymm0,%ymm2
    196a:	c5 e5 f4 c8          	vpmuludq %ymm0,%ymm3,%ymm1
    196e:	c5 ed f4 d3          	vpmuludq %ymm3,%ymm2,%ymm2
    1972:	c5 dd f4 c0          	vpmuludq %ymm0,%ymm4,%ymm0
    1976:	c5 fd d4 c2          	vpaddq %ymm2,%ymm0,%ymm0
    197a:	c5 fd 73 f0 20       	vpsllq $0x20,%ymm0,%ymm0
    197f:	c5 f5 d4 c0          	vpaddq %ymm0,%ymm1,%ymm0
    1983:	c5 fd d4 04 02       	vpaddq (%rdx,%rax,1),%ymm0,%ymm0
    1988:	c5 fd 7f 04 02       	vmovdqa %ymm0,(%rdx,%rax,1)
    198d:	48 83 c0 20          	add    $0x20,%rax
    1991:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    1997:	75 c7                	jne    1960 <kji()+0x40>
    1999:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    19a0:	48 83 c6 08          	add    $0x8,%rsi
    19a4:	48 39 f9             	cmp    %rdi,%rcx
    19a7:	75 a1                	jne    194a <kji()+0x2a>
    19a9:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    19b0:	49 81 c0 00 04 00 00 	add    $0x400,%r8
    19b7:	4c 39 ca             	cmp    %r9,%rdx
    19ba:	75 84                	jne    1940 <kji()+0x20>
    19bc:	c5 f8 77             	vzeroupper 
    19bf:	c3                   	retq   

00000000000019c0 <std::ctype<char>::do_widen(char) const>:
    19c0:	f3 0f 1e fa          	endbr64 
    19c4:	89 f0                	mov    %esi,%eax
    19c6:	c3                   	retq   
    19c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    19ce:	00 00 

00000000000019d0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>:
    19d0:	f3 0f 1e fa          	endbr64 
    19d4:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
    19d8:	49 89 c2             	mov    %rax,%r10
    19db:	49 c1 ea 3f          	shr    $0x3f,%r10
    19df:	49 01 c2             	add    %rax,%r10
    19e2:	49 89 d3             	mov    %rdx,%r11
    19e5:	49 d1 fa             	sar    %r10
    19e8:	41 83 e3 01          	and    $0x1,%r11d
    19ec:	4c 39 d6             	cmp    %r10,%rsi
    19ef:	0f 8d bb 00 00 00    	jge    1ab0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xe0>
    19f5:	49 89 f1             	mov    %rsi,%r9
    19f8:	eb 20                	jmp    1a1a <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x4a>
    19fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1a00:	48 ff c8             	dec    %rax
    1a03:	4c 8d 04 c7          	lea    (%rdi,%rax,8),%r8
    1a07:	c4 c1 7b 10 08       	vmovsd (%r8),%xmm1
    1a0c:	c4 a1 7b 11 0c cf    	vmovsd %xmm1,(%rdi,%r9,8)
    1a12:	49 39 c2             	cmp    %rax,%r10
    1a15:	7e 30                	jle    1a47 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x77>
    1a17:	49 89 c1             	mov    %rax,%r9
    1a1a:	49 8d 49 01          	lea    0x1(%r9),%rcx
    1a1e:	48 8d 04 09          	lea    (%rcx,%rcx,1),%rax
    1a22:	48 c1 e1 04          	shl    $0x4,%rcx
    1a26:	c5 fb 10 4c 0f f8    	vmovsd -0x8(%rdi,%rcx,1),%xmm1
    1a2c:	4c 8d 04 0f          	lea    (%rdi,%rcx,1),%r8
    1a30:	c4 c1 79 2f 08       	vcomisd (%r8),%xmm1
    1a35:	77 c9                	ja     1a00 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x30>
    1a37:	c4 c1 7b 10 08       	vmovsd (%r8),%xmm1
    1a3c:	c4 a1 7b 11 0c cf    	vmovsd %xmm1,(%rdi,%r9,8)
    1a42:	49 39 c2             	cmp    %rax,%r10
    1a45:	7f d0                	jg     1a17 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x47>
    1a47:	4d 85 db             	test   %r11,%r11
    1a4a:	74 74                	je     1ac0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xf0>
    1a4c:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    1a50:	48 89 d1             	mov    %rdx,%rcx
    1a53:	48 c1 e9 3f          	shr    $0x3f,%rcx
    1a57:	48 01 d1             	add    %rdx,%rcx
    1a5a:	48 d1 f9             	sar    %rcx
    1a5d:	48 39 f0             	cmp    %rsi,%rax
    1a60:	7f 2f                	jg     1a91 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xc1>
    1a62:	eb 3c                	jmp    1aa0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
    1a64:	0f 1f 40 00          	nopl   0x0(%rax)
    1a68:	48 8d 51 ff          	lea    -0x1(%rcx),%rdx
    1a6c:	48 89 d0             	mov    %rdx,%rax
    1a6f:	48 c1 e8 3f          	shr    $0x3f,%rax
    1a73:	48 01 d0             	add    %rdx,%rax
    1a76:	c4 c1 7b 10 09       	vmovsd (%r9),%xmm1
    1a7b:	48 d1 f8             	sar    %rax
    1a7e:	48 89 c2             	mov    %rax,%rdx
    1a81:	c4 c1 7b 11 08       	vmovsd %xmm1,(%r8)
    1a86:	48 89 c8             	mov    %rcx,%rax
    1a89:	48 39 ce             	cmp    %rcx,%rsi
    1a8c:	7d 72                	jge    1b00 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x130>
    1a8e:	48 89 d1             	mov    %rdx,%rcx
    1a91:	4c 8d 0c cf          	lea    (%rdi,%rcx,8),%r9
    1a95:	c4 c1 79 2f 01       	vcomisd (%r9),%xmm0
    1a9a:	4c 8d 04 c7          	lea    (%rdi,%rax,8),%r8
    1a9e:	77 c8                	ja     1a68 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x98>
    1aa0:	c4 c1 7b 11 00       	vmovsd %xmm0,(%r8)
    1aa5:	c3                   	retq   
    1aa6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1aad:	00 00 00 
    1ab0:	4c 8d 04 f7          	lea    (%rdi,%rsi,8),%r8
    1ab4:	4d 85 db             	test   %r11,%r11
    1ab7:	75 e7                	jne    1aa0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
    1ab9:	48 89 f0             	mov    %rsi,%rax
    1abc:	0f 1f 40 00          	nopl   0x0(%rax)
    1ac0:	48 83 ea 02          	sub    $0x2,%rdx
    1ac4:	48 89 d1             	mov    %rdx,%rcx
    1ac7:	48 c1 e9 3f          	shr    $0x3f,%rcx
    1acb:	48 01 ca             	add    %rcx,%rdx
    1ace:	48 d1 fa             	sar    %rdx
    1ad1:	48 39 c2             	cmp    %rax,%rdx
    1ad4:	0f 85 72 ff ff ff    	jne    1a4c <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x7c>
    1ada:	48 8d 44 00 02       	lea    0x2(%rax,%rax,1),%rax
    1adf:	c5 fb 10 4c c7 f8    	vmovsd -0x8(%rdi,%rax,8),%xmm1
    1ae5:	48 ff c8             	dec    %rax
    1ae8:	c4 c1 7b 11 08       	vmovsd %xmm1,(%r8)
    1aed:	4c 8d 04 c7          	lea    (%rdi,%rax,8),%r8
    1af1:	e9 56 ff ff ff       	jmpq   1a4c <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x7c>
    1af6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1afd:	00 00 00 
    1b00:	4d 89 c8             	mov    %r9,%r8
    1b03:	c4 c1 7b 11 00       	vmovsd %xmm0,(%r8)
    1b08:	c3                   	retq   
    1b09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001b10 <void test<void ()>(void (&)(), char const*)>:
    1b10:	f3 0f 1e fa          	endbr64 
    1b14:	41 57                	push   %r15
    1b16:	ba 00 00 02 00       	mov    $0x20000,%edx
    1b1b:	41 56                	push   %r14
    1b1d:	41 55                	push   %r13
    1b1f:	49 89 fd             	mov    %rdi,%r13
    1b22:	48 8d 3d 37 36 04 00 	lea    0x43637(%rip),%rdi        # 45160 <a>
    1b29:	41 54                	push   %r12
    1b2b:	55                   	push   %rbp
    1b2c:	48 89 f5             	mov    %rsi,%rbp
    1b2f:	31 f6                	xor    %esi,%esi
    1b31:	53                   	push   %rbx
    1b32:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
    1b39:	48 8d 5c 24 10       	lea    0x10(%rsp),%rbx
    1b3e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1b45:	00 00 
    1b47:	48 89 84 24 18 01 00 	mov    %rax,0x118(%rsp)
    1b4e:	00 
    1b4f:	31 c0                	xor    %eax,%eax
    1b51:	49 89 df             	mov    %rbx,%r15
    1b54:	e8 07 f6 ff ff       	callq  1160 <memset@plt>
    1b59:	4c 8d a4 24 18 01 00 	lea    0x118(%rsp),%r12
    1b60:	00 
    1b61:	e8 da f5 ff ff       	callq  1140 <std::chrono::_V2::system_clock::now()@plt>
    1b66:	49 89 c6             	mov    %rax,%r14
    1b69:	41 ff d5             	callq  *%r13
    1b6c:	e8 cf f5 ff ff       	callq  1140 <std::chrono::_V2::system_clock::now()@plt>
    1b71:	4c 29 f0             	sub    %r14,%rax
    1b74:	c5 d9 57 e4          	vxorpd %xmm4,%xmm4,%xmm4
    1b78:	c4 e1 db 2a c0       	vcvtsi2sd %rax,%xmm4,%xmm0
    1b7d:	49 83 c7 08          	add    $0x8,%r15
    1b81:	c5 fb 5e 05 ff 14 00 	vdivsd 0x14ff(%rip),%xmm0,%xmm0        # 3088 <_IO_stdin_used+0x88>
    1b88:	00 
    1b89:	c4 c1 7b 11 47 f8    	vmovsd %xmm0,-0x8(%r15)
    1b8f:	4d 39 fc             	cmp    %r15,%r12
    1b92:	75 cd                	jne    1b61 <void test<void ()>(void (&)(), char const*)+0x51>
    1b94:	c5 fb 10 54 24 10    	vmovsd 0x10(%rsp),%xmm2
    1b9a:	b9 0a 00 00 00       	mov    $0xa,%ecx
    1b9f:	b8 08 01 00 00       	mov    $0x108,%eax
    1ba4:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
    1bab:	00 
    1bac:	48 c1 f8 04          	sar    $0x4,%rax
    1bb0:	48 8d 04 c3          	lea    (%rbx,%rax,8),%rax
    1bb4:	c5 fb 10 5b 08       	vmovsd 0x8(%rbx),%xmm3
    1bb9:	c5 fb 10 08          	vmovsd (%rax),%xmm1
    1bbd:	c4 c1 7b 10 44 24 f8 	vmovsd -0x8(%r12),%xmm0
    1bc4:	c5 f9 2f cb          	vcomisd %xmm3,%xmm1
    1bc8:	48 8d 53 08          	lea    0x8(%rbx),%rdx
    1bcc:	0f 86 63 02 00 00    	jbe    1e35 <void test<void ()>(void (&)(), char const*)+0x325>
    1bd2:	c5 f9 2f c1          	vcomisd %xmm1,%xmm0
    1bd6:	0f 87 6d 02 00 00    	ja     1e49 <void test<void ()>(void (&)(), char const*)+0x339>
    1bdc:	c5 f9 2f c3          	vcomisd %xmm3,%xmm0
    1be0:	0f 86 24 03 00 00    	jbe    1f0a <void test<void ()>(void (&)(), char const*)+0x3fa>
    1be6:	c5 fb 11 03          	vmovsd %xmm0,(%rbx)
    1bea:	c4 c1 7b 11 54 24 f8 	vmovsd %xmm2,-0x8(%r12)
    1bf1:	c5 f9 28 c2          	vmovapd %xmm2,%xmm0
    1bf5:	c5 fb 10 0b          	vmovsd (%rbx),%xmm1
    1bf9:	4c 89 e0             	mov    %r12,%rax
    1bfc:	0f 1f 40 00          	nopl   0x0(%rax)
    1c00:	c5 fb 10 12          	vmovsd (%rdx),%xmm2
    1c04:	c5 f9 2f ca          	vcomisd %xmm2,%xmm1
    1c08:	77 37                	ja     1c41 <void test<void ()>(void (&)(), char const*)+0x131>
    1c0a:	48 83 e8 08          	sub    $0x8,%rax
    1c0e:	c5 f9 2f c1          	vcomisd %xmm1,%xmm0
    1c12:	76 13                	jbe    1c27 <void test<void ()>(void (&)(), char const*)+0x117>
    1c14:	0f 1f 40 00          	nopl   0x0(%rax)
    1c18:	c5 fb 10 40 f8       	vmovsd -0x8(%rax),%xmm0
    1c1d:	48 83 e8 08          	sub    $0x8,%rax
    1c21:	c5 f9 2f c1          	vcomisd %xmm1,%xmm0
    1c25:	77 f1                	ja     1c18 <void test<void ()>(void (&)(), char const*)+0x108>
    1c27:	48 39 c2             	cmp    %rax,%rdx
    1c2a:	73 1b                	jae    1c47 <void test<void ()>(void (&)(), char const*)+0x137>
    1c2c:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    1c30:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    1c34:	c5 fb 11 10          	vmovsd %xmm2,(%rax)
    1c38:	c5 fb 10 0b          	vmovsd (%rbx),%xmm1
    1c3c:	c5 fb 10 40 f8       	vmovsd -0x8(%rax),%xmm0
    1c41:	48 83 c2 08          	add    $0x8,%rdx
    1c45:	eb b9                	jmp    1c00 <void test<void ()>(void (&)(), char const*)+0xf0>
    1c47:	48 39 f2             	cmp    %rsi,%rdx
    1c4a:	0f 86 0d 02 00 00    	jbe    1e5d <void test<void ()>(void (&)(), char const*)+0x34d>
    1c50:	49 89 d4             	mov    %rdx,%r12
    1c53:	4c 89 e0             	mov    %r12,%rax
    1c56:	48 29 d8             	sub    %rbx,%rax
    1c59:	c5 f9 28 d1          	vmovapd %xmm1,%xmm2
    1c5d:	48 83 f8 18          	cmp    $0x18,%rax
    1c61:	0f 8e 09 02 00 00    	jle    1e70 <void test<void ()>(void (&)(), char const*)+0x360>
    1c67:	48 ff c9             	dec    %rcx
    1c6a:	0f 85 3c ff ff ff    	jne    1bac <void test<void ()>(void (&)(), char const*)+0x9c>
    1c70:	4c 8d ac 24 98 00 00 	lea    0x98(%rsp),%r13
    1c77:	00 
    1c78:	4d 89 ef             	mov    %r13,%r15
    1c7b:	49 29 df             	sub    %rbx,%r15
    1c7e:	49 83 ff 08          	cmp    $0x8,%r15
    1c82:	7e 41                	jle    1cc5 <void test<void ()>(void (&)(), char const*)+0x1b5>
    1c84:	4c 89 fa             	mov    %r15,%rdx
    1c87:	48 c1 fa 03          	sar    $0x3,%rdx
    1c8b:	48 8d 42 fe          	lea    -0x2(%rdx),%rax
    1c8f:	49 89 c6             	mov    %rax,%r14
    1c92:	49 c1 ee 3f          	shr    $0x3f,%r14
    1c96:	49 01 c6             	add    %rax,%r14
    1c99:	49 d1 fe             	sar    %r14
    1c9c:	eb 03                	jmp    1ca1 <void test<void ()>(void (&)(), char const*)+0x191>
    1c9e:	49 ff ce             	dec    %r14
    1ca1:	c4 a1 7b 10 04 f3    	vmovsd (%rbx,%r14,8),%xmm0
    1ca7:	4c 89 f6             	mov    %r14,%rsi
    1caa:	48 89 df             	mov    %rbx,%rdi
    1cad:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    1cb2:	e8 19 fd ff ff       	callq  19d0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>
    1cb7:	4d 85 f6             	test   %r14,%r14
    1cba:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    1cbf:	75 dd                	jne    1c9e <void test<void ()>(void (&)(), char const*)+0x18e>
    1cc1:	c5 fb 10 13          	vmovsd (%rbx),%xmm2
    1cc5:	49 c1 ff 03          	sar    $0x3,%r15
    1cc9:	4d 39 ec             	cmp    %r13,%r12
    1ccc:	77 0b                	ja     1cd9 <void test<void ()>(void (&)(), char const*)+0x1c9>
    1cce:	eb 3b                	jmp    1d0b <void test<void ()>(void (&)(), char const*)+0x1fb>
    1cd0:	49 83 c5 08          	add    $0x8,%r13
    1cd4:	4d 39 ec             	cmp    %r13,%r12
    1cd7:	76 32                	jbe    1d0b <void test<void ()>(void (&)(), char const*)+0x1fb>
    1cd9:	c4 c1 79 2f 55 00    	vcomisd 0x0(%r13),%xmm2
    1cdf:	76 ef                	jbe    1cd0 <void test<void ()>(void (&)(), char const*)+0x1c0>
    1ce1:	c5 fb 10 0b          	vmovsd (%rbx),%xmm1
    1ce5:	c4 c1 7b 10 45 00    	vmovsd 0x0(%r13),%xmm0
    1ceb:	4c 89 fa             	mov    %r15,%rdx
    1cee:	c4 c1 7b 11 4d 00    	vmovsd %xmm1,0x0(%r13)
    1cf4:	31 f6                	xor    %esi,%esi
    1cf6:	48 89 df             	mov    %rbx,%rdi
    1cf9:	49 83 c5 08          	add    $0x8,%r13
    1cfd:	e8 ce fc ff ff       	callq  19d0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>
    1d02:	c5 fb 10 13          	vmovsd (%rbx),%xmm2
    1d06:	4d 39 ec             	cmp    %r13,%r12
    1d09:	77 ce                	ja     1cd9 <void test<void ()>(void (&)(), char const*)+0x1c9>
    1d0b:	c5 fb 10 84 24 90 00 	vmovsd 0x90(%rsp),%xmm0
    1d12:	00 00 
    1d14:	c5 fb 11 03          	vmovsd %xmm0,(%rbx)
    1d18:	c5 fb 11 94 24 90 00 	vmovsd %xmm2,0x90(%rsp)
    1d1f:	00 00 
    1d21:	48 85 ed             	test   %rbp,%rbp
    1d24:	0f 84 27 02 00 00    	je     1f51 <void test<void ()>(void (&)(), char const*)+0x441>
    1d2a:	48 89 ef             	mov    %rbp,%rdi
    1d2d:	e8 1e f4 ff ff       	callq  1150 <strlen@plt>
    1d32:	48 89 c2             	mov    %rax,%rdx
    1d35:	48 89 ee             	mov    %rbp,%rsi
    1d38:	48 8d 3d 01 33 00 00 	lea    0x3301(%rip),%rdi        # 5040 <std::cout@@GLIBCXX_3.4>
    1d3f:	e8 6c f4 ff ff       	callq  11b0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    1d44:	48 8d 1d f5 32 00 00 	lea    0x32f5(%rip),%rbx        # 5040 <std::cout@@GLIBCXX_3.4>
    1d4b:	48 8d 35 b2 12 00 00 	lea    0x12b2(%rip),%rsi        # 3004 <_IO_stdin_used+0x4>
    1d52:	ba 01 00 00 00       	mov    $0x1,%edx
    1d57:	48 8d 3d e2 32 00 00 	lea    0x32e2(%rip),%rdi        # 5040 <std::cout@@GLIBCXX_3.4>
    1d5e:	e8 4d f4 ff ff       	callq  11b0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    1d63:	48 8b 0d d6 32 00 00 	mov    0x32d6(%rip),%rcx        # 5040 <std::cout@@GLIBCXX_3.4>
    1d6a:	c5 fb 10 84 24 90 00 	vmovsd 0x90(%rsp),%xmm0
    1d71:	00 00 
    1d73:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    1d77:	48 8d 3d c2 32 00 00 	lea    0x32c2(%rip),%rdi        # 5040 <std::cout@@GLIBCXX_3.4>
    1d7e:	48 01 da             	add    %rbx,%rdx
    1d81:	8b 42 18             	mov    0x18(%rdx),%eax
    1d84:	48 c7 42 08 02 00 00 	movq   $0x2,0x8(%rdx)
    1d8b:	00 
    1d8c:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    1d91:	83 c8 04             	or     $0x4,%eax
    1d94:	89 42 18             	mov    %eax,0x18(%rdx)
    1d97:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    1d9b:	48 c7 44 03 10 06 00 	movq   $0x6,0x10(%rbx,%rax,1)
    1da2:	00 00 
    1da4:	e8 47 f4 ff ff       	callq  11f0 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    1da9:	48 89 c5             	mov    %rax,%rbp
    1dac:	ba 02 00 00 00       	mov    $0x2,%edx
    1db1:	48 8d 35 4e 12 00 00 	lea    0x124e(%rip),%rsi        # 3006 <_IO_stdin_used+0x6>
    1db8:	48 89 c7             	mov    %rax,%rdi
    1dbb:	e8 f0 f3 ff ff       	callq  11b0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    1dc0:	48 8b 45 00          	mov    0x0(%rbp),%rax
    1dc4:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    1dc8:	4c 8b a4 05 f0 00 00 	mov    0xf0(%rbp,%rax,1),%r12
    1dcf:	00 
    1dd0:	4d 85 e4             	test   %r12,%r12
    1dd3:	0f 84 cd 01 00 00    	je     1fa6 <void test<void ()>(void (&)(), char const*)+0x496>
    1dd9:	41 80 7c 24 38 00    	cmpb   $0x0,0x38(%r12)
    1ddf:	0f 84 3a 01 00 00    	je     1f1f <void test<void ()>(void (&)(), char const*)+0x40f>
    1de5:	41 0f be 74 24 43    	movsbl 0x43(%r12),%esi
    1deb:	48 89 ef             	mov    %rbp,%rdi
    1dee:	e8 3d f3 ff ff       	callq  1130 <std::ostream::put(char)@plt>
    1df3:	48 89 c7             	mov    %rax,%rdi
    1df6:	e8 85 f3 ff ff       	callq  1180 <std::ostream::flush()@plt>
    1dfb:	48 81 3d 52 33 06 00 	cmpq   $0x6300,0x63352(%rip)        # 65158 <a+0x1fff8>
    1e02:	00 63 00 00 
    1e06:	0f 85 7b 01 00 00    	jne    1f87 <void test<void ()>(void (&)(), char const*)+0x477>
    1e0c:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
    1e13:	00 
    1e14:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    1e1b:	00 00 
    1e1d:	0f 85 5f 01 00 00    	jne    1f82 <void test<void ()>(void (&)(), char const*)+0x472>
    1e23:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
    1e2a:	5b                   	pop    %rbx
    1e2b:	5d                   	pop    %rbp
    1e2c:	41 5c                	pop    %r12
    1e2e:	41 5d                	pop    %r13
    1e30:	41 5e                	pop    %r14
    1e32:	41 5f                	pop    %r15
    1e34:	c3                   	retq   
    1e35:	c5 f9 2f c3          	vcomisd %xmm3,%xmm0
    1e39:	0f 87 cb 00 00 00    	ja     1f0a <void test<void ()>(void (&)(), char const*)+0x3fa>
    1e3f:	c5 f9 2f c1          	vcomisd %xmm1,%xmm0
    1e43:	0f 87 9d fd ff ff    	ja     1be6 <void test<void ()>(void (&)(), char const*)+0xd6>
    1e49:	c5 fb 11 0b          	vmovsd %xmm1,(%rbx)
    1e4d:	c5 fb 11 10          	vmovsd %xmm2,(%rax)
    1e51:	c4 c1 7b 10 44 24 f8 	vmovsd -0x8(%r12),%xmm0
    1e58:	e9 98 fd ff ff       	jmpq   1bf5 <void test<void ()>(void (&)(), char const*)+0xe5>
    1e5d:	48 89 d3             	mov    %rdx,%rbx
    1e60:	4c 89 e0             	mov    %r12,%rax
    1e63:	48 29 d8             	sub    %rbx,%rax
    1e66:	48 83 f8 18          	cmp    $0x18,%rax
    1e6a:	0f 8f f7 fd ff ff    	jg     1c67 <void test<void ()>(void (&)(), char const*)+0x157>
    1e70:	4c 39 e3             	cmp    %r12,%rbx
    1e73:	0f 84 a8 fe ff ff    	je     1d21 <void test<void ()>(void (&)(), char const*)+0x211>
    1e79:	4c 8d 6b 08          	lea    0x8(%rbx),%r13
    1e7d:	4d 39 ec             	cmp    %r13,%r12
    1e80:	0f 84 9b fe ff ff    	je     1d21 <void test<void ()>(void (&)(), char const*)+0x211>
    1e86:	41 be 08 00 00 00    	mov    $0x8,%r14d
    1e8c:	eb 3b                	jmp    1ec9 <void test<void ()>(void (&)(), char const*)+0x3b9>
    1e8e:	49 39 dd             	cmp    %rbx,%r13
    1e91:	74 21                	je     1eb4 <void test<void ()>(void (&)(), char const*)+0x3a4>
    1e93:	4a 8d 04 33          	lea    (%rbx,%r14,1),%rax
    1e97:	4c 89 ea             	mov    %r13,%rdx
    1e9a:	48 29 da             	sub    %rbx,%rdx
    1e9d:	48 89 de             	mov    %rbx,%rsi
    1ea0:	48 89 c7             	mov    %rax,%rdi
    1ea3:	c5 fb 11 44 24 08    	vmovsd %xmm0,0x8(%rsp)
    1ea9:	e8 52 f3 ff ff       	callq  1200 <memmove@plt>
    1eae:	c5 fb 10 44 24 08    	vmovsd 0x8(%rsp),%xmm0
    1eb4:	c5 fb 11 03          	vmovsd %xmm0,(%rbx)
    1eb8:	49 83 c5 08          	add    $0x8,%r13
    1ebc:	4d 39 ec             	cmp    %r13,%r12
    1ebf:	0f 84 5c fe ff ff    	je     1d21 <void test<void ()>(void (&)(), char const*)+0x211>
    1ec5:	c5 fb 10 13          	vmovsd (%rbx),%xmm2
    1ec9:	c4 c1 7b 10 45 00    	vmovsd 0x0(%r13),%xmm0
    1ecf:	c5 f9 2f d0          	vcomisd %xmm0,%xmm2
    1ed3:	77 b9                	ja     1e8e <void test<void ()>(void (&)(), char const*)+0x37e>
    1ed5:	c4 c1 7b 10 4d f8    	vmovsd -0x8(%r13),%xmm1
    1edb:	49 8d 45 f8          	lea    -0x8(%r13),%rax
    1edf:	c5 f9 2f c8          	vcomisd %xmm0,%xmm1
    1ee3:	0f 86 8d 00 00 00    	jbe    1f76 <void test<void ()>(void (&)(), char const*)+0x466>
    1ee9:	c5 fb 10 08          	vmovsd (%rax),%xmm1
    1eed:	48 89 c2             	mov    %rax,%rdx
    1ef0:	c5 fb 11 48 08       	vmovsd %xmm1,0x8(%rax)
    1ef5:	c5 fb 10 48 f8       	vmovsd -0x8(%rax),%xmm1
    1efa:	48 83 e8 08          	sub    $0x8,%rax
    1efe:	c5 f9 2f c8          	vcomisd %xmm0,%xmm1
    1f02:	77 e5                	ja     1ee9 <void test<void ()>(void (&)(), char const*)+0x3d9>
    1f04:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    1f08:	eb ae                	jmp    1eb8 <void test<void ()>(void (&)(), char const*)+0x3a8>
    1f0a:	c5 fb 11 1b          	vmovsd %xmm3,(%rbx)
    1f0e:	c5 fb 11 53 08       	vmovsd %xmm2,0x8(%rbx)
    1f13:	c4 c1 7b 10 44 24 f8 	vmovsd -0x8(%r12),%xmm0
    1f1a:	e9 d6 fc ff ff       	jmpq   1bf5 <void test<void ()>(void (&)(), char const*)+0xe5>
    1f1f:	4c 89 e7             	mov    %r12,%rdi
    1f22:	e8 99 f2 ff ff       	callq  11c0 <std::ctype<char>::_M_widen_init() const@plt>
    1f27:	49 8b 04 24          	mov    (%r12),%rax
    1f2b:	48 8d 15 8e fa ff ff 	lea    -0x572(%rip),%rdx        # 19c0 <std::ctype<char>::do_widen(char) const>
    1f32:	48 8b 40 30          	mov    0x30(%rax),%rax
    1f36:	be 0a 00 00 00       	mov    $0xa,%esi
    1f3b:	48 39 d0             	cmp    %rdx,%rax
    1f3e:	0f 84 a7 fe ff ff    	je     1deb <void test<void ()>(void (&)(), char const*)+0x2db>
    1f44:	4c 89 e7             	mov    %r12,%rdi
    1f47:	ff d0                	callq  *%rax
    1f49:	0f be f0             	movsbl %al,%esi
    1f4c:	e9 9a fe ff ff       	jmpq   1deb <void test<void ()>(void (&)(), char const*)+0x2db>
    1f51:	48 8b 05 e8 30 00 00 	mov    0x30e8(%rip),%rax        # 5040 <std::cout@@GLIBCXX_3.4>
    1f58:	48 8d 1d e1 30 00 00 	lea    0x30e1(%rip),%rbx        # 5040 <std::cout@@GLIBCXX_3.4>
    1f5f:	48 8b 78 e8          	mov    -0x18(%rax),%rdi
    1f63:	48 01 df             	add    %rbx,%rdi
    1f66:	8b 77 20             	mov    0x20(%rdi),%esi
    1f69:	83 ce 01             	or     $0x1,%esi
    1f6c:	e8 9f f2 ff ff       	callq  1210 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    1f71:	e9 d5 fd ff ff       	jmpq   1d4b <void test<void ()>(void (&)(), char const*)+0x23b>
    1f76:	4c 89 ea             	mov    %r13,%rdx
    1f79:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    1f7d:	e9 36 ff ff ff       	jmpq   1eb8 <void test<void ()>(void (&)(), char const*)+0x3a8>
    1f82:	e8 19 f2 ff ff       	callq  11a0 <__stack_chk_fail@plt>
    1f87:	48 8d 0d 8a 10 00 00 	lea    0x108a(%rip),%rcx        # 3018 <_IO_stdin_used+0x18>
    1f8e:	ba 51 00 00 00       	mov    $0x51,%edx
    1f93:	48 8d 35 6f 10 00 00 	lea    0x106f(%rip),%rsi        # 3009 <_IO_stdin_used+0x9>
    1f9a:	48 8d 3d a7 10 00 00 	lea    0x10a7(%rip),%rdi        # 3048 <_IO_stdin_used+0x48>
    1fa1:	e8 ca f1 ff ff       	callq  1170 <__assert_fail@plt>
    1fa6:	e8 25 f2 ff ff       	callq  11d0 <std::__throw_bad_cast()@plt>
    1fab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001fb0 <__libc_csu_init>:
    1fb0:	f3 0f 1e fa          	endbr64 
    1fb4:	41 57                	push   %r15
    1fb6:	4c 8d 3d 6b 2d 00 00 	lea    0x2d6b(%rip),%r15        # 4d28 <__frame_dummy_init_array_entry>
    1fbd:	41 56                	push   %r14
    1fbf:	49 89 d6             	mov    %rdx,%r14
    1fc2:	41 55                	push   %r13
    1fc4:	49 89 f5             	mov    %rsi,%r13
    1fc7:	41 54                	push   %r12
    1fc9:	41 89 fc             	mov    %edi,%r12d
    1fcc:	55                   	push   %rbp
    1fcd:	48 8d 2d 64 2d 00 00 	lea    0x2d64(%rip),%rbp        # 4d38 <__do_global_dtors_aux_fini_array_entry>
    1fd4:	53                   	push   %rbx
    1fd5:	4c 29 fd             	sub    %r15,%rbp
    1fd8:	48 83 ec 08          	sub    $0x8,%rsp
    1fdc:	e8 1f f0 ff ff       	callq  1000 <_init>
    1fe1:	48 c1 fd 03          	sar    $0x3,%rbp
    1fe5:	74 1f                	je     2006 <__libc_csu_init+0x56>
    1fe7:	31 db                	xor    %ebx,%ebx
    1fe9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1ff0:	4c 89 f2             	mov    %r14,%rdx
    1ff3:	4c 89 ee             	mov    %r13,%rsi
    1ff6:	44 89 e7             	mov    %r12d,%edi
    1ff9:	41 ff 14 df          	callq  *(%r15,%rbx,8)
    1ffd:	48 83 c3 01          	add    $0x1,%rbx
    2001:	48 39 dd             	cmp    %rbx,%rbp
    2004:	75 ea                	jne    1ff0 <__libc_csu_init+0x40>
    2006:	48 83 c4 08          	add    $0x8,%rsp
    200a:	5b                   	pop    %rbx
    200b:	5d                   	pop    %rbp
    200c:	41 5c                	pop    %r12
    200e:	41 5d                	pop    %r13
    2010:	41 5e                	pop    %r14
    2012:	41 5f                	pop    %r15
    2014:	c3                   	retq   
    2015:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    201c:	00 00 00 00 

0000000000002020 <__libc_csu_fini>:
    2020:	f3 0f 1e fa          	endbr64 
    2024:	c3                   	retq   

Desensamblado de la sección .fini:

0000000000002028 <_fini>:
    2028:	f3 0f 1e fa          	endbr64 
    202c:	48 83 ec 08          	sub    $0x8,%rsp
    2030:	48 83 c4 08          	add    $0x8,%rsp
    2034:	c3                   	retq   
