
ackermann:     formato del fichero elf64-x86-64


Desensamblado de la secci贸n .init:

0000000000002000 <_init>:
    2000:	f3 0f 1e fa          	endbr64 
    2004:	48 83 ec 08          	sub    $0x8,%rsp
    2008:	48 8b 05 d9 4f 00 00 	mov    0x4fd9(%rip),%rax        # 6fe8 <__gmon_start__>
    200f:	48 85 c0             	test   %rax,%rax
    2012:	74 02                	je     2016 <_init+0x16>
    2014:	ff d0                	callq  *%rax
    2016:	48 83 c4 08          	add    $0x8,%rsp
    201a:	c3                   	retq   

Desensamblado de la secci贸n .plt:

0000000000002020 <.plt>:
    2020:	ff 35 92 4e 00 00    	pushq  0x4e92(%rip)        # 6eb8 <_GLOBAL_OFFSET_TABLE_+0x8>
    2026:	f2 ff 25 93 4e 00 00 	bnd jmpq *0x4e93(%rip)        # 6ec0 <_GLOBAL_OFFSET_TABLE_+0x10>
    202d:	0f 1f 00             	nopl   (%rax)
    2030:	f3 0f 1e fa          	endbr64 
    2034:	68 00 00 00 00       	pushq  $0x0
    2039:	f2 e9 e1 ff ff ff    	bnd jmpq 2020 <.plt>
    203f:	90                   	nop
    2040:	f3 0f 1e fa          	endbr64 
    2044:	68 01 00 00 00       	pushq  $0x1
    2049:	f2 e9 d1 ff ff ff    	bnd jmpq 2020 <.plt>
    204f:	90                   	nop
    2050:	f3 0f 1e fa          	endbr64 
    2054:	68 02 00 00 00       	pushq  $0x2
    2059:	f2 e9 c1 ff ff ff    	bnd jmpq 2020 <.plt>
    205f:	90                   	nop
    2060:	f3 0f 1e fa          	endbr64 
    2064:	68 03 00 00 00       	pushq  $0x3
    2069:	f2 e9 b1 ff ff ff    	bnd jmpq 2020 <.plt>
    206f:	90                   	nop
    2070:	f3 0f 1e fa          	endbr64 
    2074:	68 04 00 00 00       	pushq  $0x4
    2079:	f2 e9 a1 ff ff ff    	bnd jmpq 2020 <.plt>
    207f:	90                   	nop
    2080:	f3 0f 1e fa          	endbr64 
    2084:	68 05 00 00 00       	pushq  $0x5
    2089:	f2 e9 91 ff ff ff    	bnd jmpq 2020 <.plt>
    208f:	90                   	nop
    2090:	f3 0f 1e fa          	endbr64 
    2094:	68 06 00 00 00       	pushq  $0x6
    2099:	f2 e9 81 ff ff ff    	bnd jmpq 2020 <.plt>
    209f:	90                   	nop
    20a0:	f3 0f 1e fa          	endbr64 
    20a4:	68 07 00 00 00       	pushq  $0x7
    20a9:	f2 e9 71 ff ff ff    	bnd jmpq 2020 <.plt>
    20af:	90                   	nop
    20b0:	f3 0f 1e fa          	endbr64 
    20b4:	68 08 00 00 00       	pushq  $0x8
    20b9:	f2 e9 61 ff ff ff    	bnd jmpq 2020 <.plt>
    20bf:	90                   	nop
    20c0:	f3 0f 1e fa          	endbr64 
    20c4:	68 09 00 00 00       	pushq  $0x9
    20c9:	f2 e9 51 ff ff ff    	bnd jmpq 2020 <.plt>
    20cf:	90                   	nop
    20d0:	f3 0f 1e fa          	endbr64 
    20d4:	68 0a 00 00 00       	pushq  $0xa
    20d9:	f2 e9 41 ff ff ff    	bnd jmpq 2020 <.plt>
    20df:	90                   	nop
    20e0:	f3 0f 1e fa          	endbr64 
    20e4:	68 0b 00 00 00       	pushq  $0xb
    20e9:	f2 e9 31 ff ff ff    	bnd jmpq 2020 <.plt>
    20ef:	90                   	nop
    20f0:	f3 0f 1e fa          	endbr64 
    20f4:	68 0c 00 00 00       	pushq  $0xc
    20f9:	f2 e9 21 ff ff ff    	bnd jmpq 2020 <.plt>
    20ff:	90                   	nop
    2100:	f3 0f 1e fa          	endbr64 
    2104:	68 0d 00 00 00       	pushq  $0xd
    2109:	f2 e9 11 ff ff ff    	bnd jmpq 2020 <.plt>
    210f:	90                   	nop
    2110:	f3 0f 1e fa          	endbr64 
    2114:	68 0e 00 00 00       	pushq  $0xe
    2119:	f2 e9 01 ff ff ff    	bnd jmpq 2020 <.plt>
    211f:	90                   	nop
    2120:	f3 0f 1e fa          	endbr64 
    2124:	68 0f 00 00 00       	pushq  $0xf
    2129:	f2 e9 f1 fe ff ff    	bnd jmpq 2020 <.plt>
    212f:	90                   	nop
    2130:	f3 0f 1e fa          	endbr64 
    2134:	68 10 00 00 00       	pushq  $0x10
    2139:	f2 e9 e1 fe ff ff    	bnd jmpq 2020 <.plt>
    213f:	90                   	nop
    2140:	f3 0f 1e fa          	endbr64 
    2144:	68 11 00 00 00       	pushq  $0x11
    2149:	f2 e9 d1 fe ff ff    	bnd jmpq 2020 <.plt>
    214f:	90                   	nop
    2150:	f3 0f 1e fa          	endbr64 
    2154:	68 12 00 00 00       	pushq  $0x12
    2159:	f2 e9 c1 fe ff ff    	bnd jmpq 2020 <.plt>
    215f:	90                   	nop
    2160:	f3 0f 1e fa          	endbr64 
    2164:	68 13 00 00 00       	pushq  $0x13
    2169:	f2 e9 b1 fe ff ff    	bnd jmpq 2020 <.plt>
    216f:	90                   	nop
    2170:	f3 0f 1e fa          	endbr64 
    2174:	68 14 00 00 00       	pushq  $0x14
    2179:	f2 e9 a1 fe ff ff    	bnd jmpq 2020 <.plt>
    217f:	90                   	nop
    2180:	f3 0f 1e fa          	endbr64 
    2184:	68 15 00 00 00       	pushq  $0x15
    2189:	f2 e9 91 fe ff ff    	bnd jmpq 2020 <.plt>
    218f:	90                   	nop
    2190:	f3 0f 1e fa          	endbr64 
    2194:	68 16 00 00 00       	pushq  $0x16
    2199:	f2 e9 81 fe ff ff    	bnd jmpq 2020 <.plt>
    219f:	90                   	nop
    21a0:	f3 0f 1e fa          	endbr64 
    21a4:	68 17 00 00 00       	pushq  $0x17
    21a9:	f2 e9 71 fe ff ff    	bnd jmpq 2020 <.plt>
    21af:	90                   	nop
    21b0:	f3 0f 1e fa          	endbr64 
    21b4:	68 18 00 00 00       	pushq  $0x18
    21b9:	f2 e9 61 fe ff ff    	bnd jmpq 2020 <.plt>
    21bf:	90                   	nop
    21c0:	f3 0f 1e fa          	endbr64 
    21c4:	68 19 00 00 00       	pushq  $0x19
    21c9:	f2 e9 51 fe ff ff    	bnd jmpq 2020 <.plt>
    21cf:	90                   	nop
    21d0:	f3 0f 1e fa          	endbr64 
    21d4:	68 1a 00 00 00       	pushq  $0x1a
    21d9:	f2 e9 41 fe ff ff    	bnd jmpq 2020 <.plt>
    21df:	90                   	nop
    21e0:	f3 0f 1e fa          	endbr64 
    21e4:	68 1b 00 00 00       	pushq  $0x1b
    21e9:	f2 e9 31 fe ff ff    	bnd jmpq 2020 <.plt>
    21ef:	90                   	nop
    21f0:	f3 0f 1e fa          	endbr64 
    21f4:	68 1c 00 00 00       	pushq  $0x1c
    21f9:	f2 e9 21 fe ff ff    	bnd jmpq 2020 <.plt>
    21ff:	90                   	nop

Desensamblado de la secci贸n .plt.got:

0000000000002200 <__cxa_finalize@plt>:
    2200:	f3 0f 1e fa          	endbr64 
    2204:	f2 ff 25 a5 4d 00 00 	bnd jmpq *0x4da5(%rip)        # 6fb0 <__cxa_finalize@GLIBC_2.2.5>
    220b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la secci贸n .plt.sec:

0000000000002210 <std::ostream::put(char)@plt>:
    2210:	f3 0f 1e fa          	endbr64 
    2214:	f2 ff 25 ad 4c 00 00 	bnd jmpq *0x4cad(%rip)        # 6ec8 <std::ostream::put(char)@GLIBCXX_3.4>
    221b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002220 <std::chrono::_V2::system_clock::now()@plt>:
    2220:	f3 0f 1e fa          	endbr64 
    2224:	f2 ff 25 a5 4c 00 00 	bnd jmpq *0x4ca5(%rip)        # 6ed0 <std::chrono::_V2::system_clock::now()@GLIBCXX_3.4.19>
    222b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002230 <std::__throw_bad_alloc()@plt>:
    2230:	f3 0f 1e fa          	endbr64 
    2234:	f2 ff 25 9d 4c 00 00 	bnd jmpq *0x4c9d(%rip)        # 6ed8 <std::__throw_bad_alloc()@GLIBCXX_3.4>
    223b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002240 <__cxa_begin_catch@plt>:
    2240:	f3 0f 1e fa          	endbr64 
    2244:	f2 ff 25 95 4c 00 00 	bnd jmpq *0x4c95(%rip)        # 6ee0 <__cxa_begin_catch@CXXABI_1.3>
    224b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002250 <std::__throw_length_error(char const*)@plt>:
    2250:	f3 0f 1e fa          	endbr64 
    2254:	f2 ff 25 8d 4c 00 00 	bnd jmpq *0x4c8d(%rip)        # 6ee8 <std::__throw_length_error(char const*)@GLIBCXX_3.4>
    225b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002260 <memset@plt>:
    2260:	f3 0f 1e fa          	endbr64 
    2264:	f2 ff 25 85 4c 00 00 	bnd jmpq *0x4c85(%rip)        # 6ef0 <memset@GLIBC_2.2.5>
    226b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002270 <__cxa_guard_release@plt>:
    2270:	f3 0f 1e fa          	endbr64 
    2274:	f2 ff 25 7d 4c 00 00 	bnd jmpq *0x4c7d(%rip)        # 6ef8 <__cxa_guard_release@CXXABI_1.3>
    227b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002280 <__assert_fail@plt>:
    2280:	f3 0f 1e fa          	endbr64 
    2284:	f2 ff 25 75 4c 00 00 	bnd jmpq *0x4c75(%rip)        # 6f00 <__assert_fail@GLIBC_2.2.5>
    228b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002290 <std::__throw_system_error(int)@plt>:
    2290:	f3 0f 1e fa          	endbr64 
    2294:	f2 ff 25 6d 4c 00 00 	bnd jmpq *0x4c6d(%rip)        # 6f08 <std::__throw_system_error(int)@GLIBCXX_3.4.11>
    229b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022a0 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>:
    22a0:	f3 0f 1e fa          	endbr64 
    22a4:	f2 ff 25 65 4c 00 00 	bnd jmpq *0x4c65(%rip)        # 6f10 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@GLIBCXX_3.4.9>
    22ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022b0 <std::ostream::flush()@plt>:
    22b0:	f3 0f 1e fa          	endbr64 
    22b4:	f2 ff 25 5d 4c 00 00 	bnd jmpq *0x4c5d(%rip)        # 6f18 <std::ostream::flush()@GLIBCXX_3.4>
    22bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022c0 <memcpy@plt>:
    22c0:	f3 0f 1e fa          	endbr64 
    22c4:	f2 ff 25 55 4c 00 00 	bnd jmpq *0x4c55(%rip)        # 6f20 <memcpy@GLIBC_2.14>
    22cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022d0 <__cxa_atexit@plt>:
    22d0:	f3 0f 1e fa          	endbr64 
    22d4:	f2 ff 25 4d 4c 00 00 	bnd jmpq *0x4c4d(%rip)        # 6f28 <__cxa_atexit@GLIBC_2.2.5>
    22db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022e0 <operator delete(void*)@plt>:
    22e0:	f3 0f 1e fa          	endbr64 
    22e4:	f2 ff 25 45 4c 00 00 	bnd jmpq *0x4c45(%rip)        # 6f30 <operator delete(void*)@GLIBCXX_3.4>
    22eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022f0 <operator new(unsigned long)@plt>:
    22f0:	f3 0f 1e fa          	endbr64 
    22f4:	f2 ff 25 3d 4c 00 00 	bnd jmpq *0x4c3d(%rip)        # 6f38 <operator new(unsigned long)@GLIBCXX_3.4>
    22fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002300 <__stack_chk_fail@plt>:
    2300:	f3 0f 1e fa          	endbr64 
    2304:	f2 ff 25 35 4c 00 00 	bnd jmpq *0x4c35(%rip)        # 6f40 <__stack_chk_fail@GLIBC_2.4>
    230b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002310 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>:
    2310:	f3 0f 1e fa          	endbr64 
    2314:	f2 ff 25 2d 4c 00 00 	bnd jmpq *0x4c2d(%rip)        # 6f48 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@GLIBCXX_3.4.9>
    231b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002320 <std::ctype<char>::_M_widen_init() const@plt>:
    2320:	f3 0f 1e fa          	endbr64 
    2324:	f2 ff 25 25 4c 00 00 	bnd jmpq *0x4c25(%rip)        # 6f50 <std::ctype<char>::_M_widen_init() const@GLIBCXX_3.4.11>
    232b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002330 <pthread_once@plt>:
    2330:	f3 0f 1e fa          	endbr64 
    2334:	f2 ff 25 1d 4c 00 00 	bnd jmpq *0x4c1d(%rip)        # 6f58 <pthread_once>
    233b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002340 <std::__throw_bad_cast()@plt>:
    2340:	f3 0f 1e fa          	endbr64 
    2344:	f2 ff 25 15 4c 00 00 	bnd jmpq *0x4c15(%rip)        # 6f60 <std::__throw_bad_cast()@GLIBCXX_3.4>
    234b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002350 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>:
    2350:	f3 0f 1e fa          	endbr64 
    2354:	f2 ff 25 0d 4c 00 00 	bnd jmpq *0x4c0d(%rip)        # 6f68 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@GLIBCXX_3.4.18>
    235b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002360 <std::__throw_out_of_range(char const*)@plt>:
    2360:	f3 0f 1e fa          	endbr64 
    2364:	f2 ff 25 05 4c 00 00 	bnd jmpq *0x4c05(%rip)        # 6f70 <std::__throw_out_of_range(char const*)@GLIBCXX_3.4>
    236b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002370 <__cxa_rethrow@plt>:
    2370:	f3 0f 1e fa          	endbr64 
    2374:	f2 ff 25 fd 4b 00 00 	bnd jmpq *0x4bfd(%rip)        # 6f78 <__cxa_rethrow@CXXABI_1.3>
    237b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002380 <std::ios_base::Init::Init()@plt>:
    2380:	f3 0f 1e fa          	endbr64 
    2384:	f2 ff 25 f5 4b 00 00 	bnd jmpq *0x4bf5(%rip)        # 6f80 <std::ios_base::Init::Init()@GLIBCXX_3.4>
    238b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002390 <std::ostream& std::ostream::_M_insert<double>(double)@plt>:
    2390:	f3 0f 1e fa          	endbr64 
    2394:	f2 ff 25 ed 4b 00 00 	bnd jmpq *0x4bed(%rip)        # 6f88 <std::ostream& std::ostream::_M_insert<double>(double)@GLIBCXX_3.4.9>
    239b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023a0 <memmove@plt>:
    23a0:	f3 0f 1e fa          	endbr64 
    23a4:	f2 ff 25 e5 4b 00 00 	bnd jmpq *0x4be5(%rip)        # 6f90 <memmove@GLIBC_2.2.5>
    23ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023b0 <__cxa_end_catch@plt>:
    23b0:	f3 0f 1e fa          	endbr64 
    23b4:	f2 ff 25 dd 4b 00 00 	bnd jmpq *0x4bdd(%rip)        # 6f98 <__cxa_end_catch@CXXABI_1.3>
    23bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023c0 <_Unwind_Resume@plt>:
    23c0:	f3 0f 1e fa          	endbr64 
    23c4:	f2 ff 25 d5 4b 00 00 	bnd jmpq *0x4bd5(%rip)        # 6fa0 <_Unwind_Resume@GCC_3.0>
    23cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023d0 <__cxa_guard_acquire@plt>:
    23d0:	f3 0f 1e fa          	endbr64 
    23d4:	f2 ff 25 cd 4b 00 00 	bnd jmpq *0x4bcd(%rip)        # 6fa8 <__cxa_guard_acquire@CXXABI_1.3>
    23db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la secci贸n .text:

00000000000023e0 <main>:
    23e0:	f3 0f 1e fa          	endbr64 
    23e4:	48 83 ec 08          	sub    $0x8,%rsp
    23e8:	48 8d 3d 91 01 00 00 	lea    0x191(%rip),%rdi        # 2580 <unsigned int ackermann1<unsigned int>(unsigned int, unsigned int)>
    23ef:	e8 ac 0c 00 00       	callq  30a0 <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))>
    23f4:	48 8d 3d d5 1d 00 00 	lea    0x1dd5(%rip),%rdi        # 41d0 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)>
    23fb:	e8 a0 0c 00 00       	callq  30a0 <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))>
    2400:	48 8d 3d a9 1b 00 00 	lea    0x1ba9(%rip),%rdi        # 3fb0 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)>
    2407:	e8 94 0c 00 00       	callq  30a0 <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))>
    240c:	48 8d 3d cd 01 00 00 	lea    0x1cd(%rip),%rdi        # 25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2413:	e8 88 0c 00 00       	callq  30a0 <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))>
    2418:	48 8d 3d 41 08 00 00 	lea    0x841(%rip),%rdi        # 2c60 <unsigned int ackermann5<unsigned int>(unsigned int, unsigned int)>
    241f:	e8 7c 0c 00 00       	callq  30a0 <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))>
    2424:	48 8d 3d 65 11 00 00 	lea    0x1165(%rip),%rdi        # 3590 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)>
    242b:	e8 70 0c 00 00       	callq  30a0 <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))>
    2430:	31 c0                	xor    %eax,%eax
    2432:	48 83 c4 08          	add    $0x8,%rsp
    2436:	c3                   	retq   
    2437:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    243e:	00 00 

0000000000002440 <_GLOBAL__sub_I_main>:
    2440:	f3 0f 1e fa          	endbr64 
    2444:	48 83 ec 08          	sub    $0x8,%rsp
    2448:	48 8d 3d 02 4d 00 00 	lea    0x4d02(%rip),%rdi        # 7151 <std::__ioinit>
    244f:	e8 2c ff ff ff       	callq  2380 <std::ios_base::Init::Init()@plt>
    2454:	48 8b 3d 9d 4b 00 00 	mov    0x4b9d(%rip),%rdi        # 6ff8 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
    245b:	48 8d 15 a6 4b 00 00 	lea    0x4ba6(%rip),%rdx        # 7008 <__dso_handle>
    2462:	48 8d 35 e8 4c 00 00 	lea    0x4ce8(%rip),%rsi        # 7151 <std::__ioinit>
    2469:	48 83 c4 08          	add    $0x8,%rsp
    246d:	e9 5e fe ff ff       	jmpq   22d0 <__cxa_atexit@plt>
    2472:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    2479:	00 00 00 
    247c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000002480 <_start>:
    2480:	f3 0f 1e fa          	endbr64 
    2484:	31 ed                	xor    %ebp,%ebp
    2486:	49 89 d1             	mov    %rdx,%r9
    2489:	5e                   	pop    %rsi
    248a:	48 89 e2             	mov    %rsp,%rdx
    248d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    2491:	50                   	push   %rax
    2492:	54                   	push   %rsp
    2493:	4c 8d 05 e6 20 00 00 	lea    0x20e6(%rip),%r8        # 4580 <__libc_csu_fini>
    249a:	48 8d 0d 6f 20 00 00 	lea    0x206f(%rip),%rcx        # 4510 <__libc_csu_init>
    24a1:	48 8d 3d 38 ff ff ff 	lea    -0xc8(%rip),%rdi        # 23e0 <main>
    24a8:	ff 15 32 4b 00 00    	callq  *0x4b32(%rip)        # 6fe0 <__libc_start_main@GLIBC_2.2.5>
    24ae:	f4                   	hlt    
    24af:	90                   	nop

00000000000024b0 <deregister_tm_clones>:
    24b0:	48 8d 3d 69 4b 00 00 	lea    0x4b69(%rip),%rdi        # 7020 <__TMC_END__>
    24b7:	48 8d 05 62 4b 00 00 	lea    0x4b62(%rip),%rax        # 7020 <__TMC_END__>
    24be:	48 39 f8             	cmp    %rdi,%rax
    24c1:	74 15                	je     24d8 <deregister_tm_clones+0x28>
    24c3:	48 8b 05 0e 4b 00 00 	mov    0x4b0e(%rip),%rax        # 6fd8 <_ITM_deregisterTMCloneTable>
    24ca:	48 85 c0             	test   %rax,%rax
    24cd:	74 09                	je     24d8 <deregister_tm_clones+0x28>
    24cf:	ff e0                	jmpq   *%rax
    24d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    24d8:	c3                   	retq   
    24d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000024e0 <register_tm_clones>:
    24e0:	48 8d 3d 39 4b 00 00 	lea    0x4b39(%rip),%rdi        # 7020 <__TMC_END__>
    24e7:	48 8d 35 32 4b 00 00 	lea    0x4b32(%rip),%rsi        # 7020 <__TMC_END__>
    24ee:	48 29 fe             	sub    %rdi,%rsi
    24f1:	48 89 f0             	mov    %rsi,%rax
    24f4:	48 c1 ee 3f          	shr    $0x3f,%rsi
    24f8:	48 c1 f8 03          	sar    $0x3,%rax
    24fc:	48 01 c6             	add    %rax,%rsi
    24ff:	48 d1 fe             	sar    %rsi
    2502:	74 14                	je     2518 <register_tm_clones+0x38>
    2504:	48 8b 05 e5 4a 00 00 	mov    0x4ae5(%rip),%rax        # 6ff0 <_ITM_registerTMCloneTable>
    250b:	48 85 c0             	test   %rax,%rax
    250e:	74 08                	je     2518 <register_tm_clones+0x38>
    2510:	ff e0                	jmpq   *%rax
    2512:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2518:	c3                   	retq   
    2519:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002520 <__do_global_dtors_aux>:
    2520:	f3 0f 1e fa          	endbr64 
    2524:	80 3d 25 4c 00 00 00 	cmpb   $0x0,0x4c25(%rip)        # 7150 <completed.8061>
    252b:	75 2b                	jne    2558 <__do_global_dtors_aux+0x38>
    252d:	55                   	push   %rbp
    252e:	48 83 3d 7a 4a 00 00 	cmpq   $0x0,0x4a7a(%rip)        # 6fb0 <__cxa_finalize@GLIBC_2.2.5>
    2535:	00 
    2536:	48 89 e5             	mov    %rsp,%rbp
    2539:	74 0c                	je     2547 <__do_global_dtors_aux+0x27>
    253b:	48 8b 3d c6 4a 00 00 	mov    0x4ac6(%rip),%rdi        # 7008 <__dso_handle>
    2542:	e8 b9 fc ff ff       	callq  2200 <__cxa_finalize@plt>
    2547:	e8 64 ff ff ff       	callq  24b0 <deregister_tm_clones>
    254c:	c6 05 fd 4b 00 00 01 	movb   $0x1,0x4bfd(%rip)        # 7150 <completed.8061>
    2553:	5d                   	pop    %rbp
    2554:	c3                   	retq   
    2555:	0f 1f 00             	nopl   (%rax)
    2558:	c3                   	retq   
    2559:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002560 <frame_dummy>:
    2560:	f3 0f 1e fa          	endbr64 
    2564:	e9 77 ff ff ff       	jmpq   24e0 <register_tm_clones>
    2569:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002570 <std::ctype<char>::do_widen(char) const>:
    2570:	f3 0f 1e fa          	endbr64 
    2574:	89 f0                	mov    %esi,%eax
    2576:	c3                   	retq   
    2577:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    257e:	00 00 

0000000000002580 <unsigned int ackermann1<unsigned int>(unsigned int, unsigned int)>:
    2580:	f3 0f 1e fa          	endbr64 
    2584:	85 ff                	test   %edi,%edi
    2586:	74 38                	je     25c0 <unsigned int ackermann1<unsigned int>(unsigned int, unsigned int)+0x40>
    2588:	53                   	push   %rbx
    2589:	89 fb                	mov    %edi,%ebx
    258b:	8d 7b ff             	lea    -0x1(%rbx),%edi
    258e:	85 f6                	test   %esi,%esi
    2590:	75 36                	jne    25c8 <unsigned int ackermann1<unsigned int>(unsigned int, unsigned int)+0x48>
    2592:	85 ff                	test   %edi,%edi
    2594:	74 1a                	je     25b0 <unsigned int ackermann1<unsigned int>(unsigned int, unsigned int)+0x30>
    2596:	83 eb 02             	sub    $0x2,%ebx
    2599:	e8 e2 ff ff ff       	callq  2580 <unsigned int ackermann1<unsigned int>(unsigned int, unsigned int)>
    259e:	89 c6                	mov    %eax,%esi
    25a0:	85 db                	test   %ebx,%ebx
    25a2:	75 e7                	jne    258b <unsigned int ackermann1<unsigned int>(unsigned int, unsigned int)+0xb>
    25a4:	8d 40 01             	lea    0x1(%rax),%eax
    25a7:	5b                   	pop    %rbx
    25a8:	c3                   	retq   
    25a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    25b0:	b8 02 00 00 00       	mov    $0x2,%eax
    25b5:	5b                   	pop    %rbx
    25b6:	c3                   	retq   
    25b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    25be:	00 00 
    25c0:	8d 46 01             	lea    0x1(%rsi),%eax
    25c3:	c3                   	retq   
    25c4:	0f 1f 40 00          	nopl   0x0(%rax)
    25c8:	89 f8                	mov    %edi,%eax
    25ca:	ff ce                	dec    %esi
    25cc:	89 df                	mov    %ebx,%edi
    25ce:	89 c3                	mov    %eax,%ebx
    25d0:	eb c7                	jmp    2599 <unsigned int ackermann1<unsigned int>(unsigned int, unsigned int)+0x19>
    25d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    25d9:	00 00 00 
    25dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000025e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>:
    25e0:	f3 0f 1e fa          	endbr64 
    25e4:	41 55                	push   %r13
    25e6:	41 54                	push   %r12
    25e8:	55                   	push   %rbp
    25e9:	53                   	push   %rbx
    25ea:	48 83 ec 08          	sub    $0x8,%rsp
    25ee:	83 ff 03             	cmp    $0x3,%edi
    25f1:	0f 87 99 00 00 00    	ja     2690 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)+0xb0>
    25f7:	81 fe ff ff 00 00    	cmp    $0xffff,%esi
    25fd:	0f 87 8d 00 00 00    	ja     2690 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)+0xb0>
    2603:	41 89 fc             	mov    %edi,%r12d
    2606:	4c 89 e3             	mov    %r12,%rbx
    2609:	89 f2                	mov    %esi,%edx
    260b:	48 c1 e3 10          	shl    $0x10,%rbx
    260f:	48 8d 2d 4a 4b 00 00 	lea    0x4b4a(%rip),%rbp        # 7160 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution>
    2616:	48 01 d3             	add    %rdx,%rbx
    2619:	8b 44 9d 00          	mov    0x0(%rbp,%rbx,4),%eax
    261d:	85 c0                	test   %eax,%eax
    261f:	75 0b                	jne    262c <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)+0x4c>
    2621:	85 ff                	test   %edi,%edi
    2623:	75 1b                	jne    2640 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)+0x60>
    2625:	8d 46 01             	lea    0x1(%rsi),%eax
    2628:	89 44 95 00          	mov    %eax,0x0(%rbp,%rdx,4)
    262c:	48 83 c4 08          	add    $0x8,%rsp
    2630:	5b                   	pop    %rbx
    2631:	5d                   	pop    %rbp
    2632:	41 5c                	pop    %r12
    2634:	41 5d                	pop    %r13
    2636:	c3                   	retq   
    2637:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    263e:	00 00 
    2640:	44 8d 6f ff          	lea    -0x1(%rdi),%r13d
    2644:	85 f6                	test   %esi,%esi
    2646:	75 28                	jne    2670 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)+0x90>
    2648:	44 89 ef             	mov    %r13d,%edi
    264b:	be 01 00 00 00       	mov    $0x1,%esi
    2650:	e8 8b ff ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2655:	49 c1 e4 12          	shl    $0x12,%r12
    2659:	42 89 44 25 00       	mov    %eax,0x0(%rbp,%r12,1)
    265e:	48 83 c4 08          	add    $0x8,%rsp
    2662:	5b                   	pop    %rbx
    2663:	5d                   	pop    %rbp
    2664:	41 5c                	pop    %r12
    2666:	41 5d                	pop    %r13
    2668:	c3                   	retq   
    2669:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2670:	ff ce                	dec    %esi
    2672:	e8 69 ff ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2677:	89 c6                	mov    %eax,%esi
    2679:	44 89 ef             	mov    %r13d,%edi
    267c:	e8 5f ff ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2681:	89 44 9d 00          	mov    %eax,0x0(%rbp,%rbx,4)
    2685:	48 83 c4 08          	add    $0x8,%rsp
    2689:	5b                   	pop    %rbx
    268a:	5d                   	pop    %rbp
    268b:	41 5c                	pop    %r12
    268d:	41 5d                	pop    %r13
    268f:	c3                   	retq   
    2690:	48 8d 0d 71 29 00 00 	lea    0x2971(%rip),%rcx        # 5008 <_IO_stdin_used+0x8>
    2697:	ba 46 00 00 00       	mov    $0x46,%edx
    269c:	48 8d 35 90 29 00 00 	lea    0x2990(%rip),%rsi        # 5033 <_IO_stdin_used+0x33>
    26a3:	48 8d 3d 96 29 00 00 	lea    0x2996(%rip),%rdi        # 5040 <_IO_stdin_used+0x40>
    26aa:	e8 d1 fb ff ff       	callq  2280 <__assert_fail@plt>
    26af:	90                   	nop

00000000000026b0 <std::unordered_map<unsigned int, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > > >::~unordered_map()>:
    26b0:	f3 0f 1e fa          	endbr64 
    26b4:	41 55                	push   %r13
    26b6:	41 54                	push   %r12
    26b8:	55                   	push   %rbp
    26b9:	53                   	push   %rbx
    26ba:	48 89 fb             	mov    %rdi,%rbx
    26bd:	48 83 ec 08          	sub    $0x8,%rsp
    26c1:	48 8b 6f 10          	mov    0x10(%rdi),%rbp
    26c5:	48 85 ed             	test   %rbp,%rbp
    26c8:	0f 84 82 00 00 00    	je     2750 <std::unordered_map<unsigned int, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > > >::~unordered_map()+0xa0>
    26ce:	66 90                	xchg   %ax,%ax
    26d0:	4c 8b 65 20          	mov    0x20(%rbp),%r12
    26d4:	4c 8b 6d 00          	mov    0x0(%rbp),%r13
    26d8:	4d 85 e4             	test   %r12,%r12
    26db:	74 14                	je     26f1 <std::unordered_map<unsigned int, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > > >::~unordered_map()+0x41>
    26dd:	0f 1f 00             	nopl   (%rax)
    26e0:	4c 89 e7             	mov    %r12,%rdi
    26e3:	4d 8b 24 24          	mov    (%r12),%r12
    26e7:	e8 f4 fb ff ff       	callq  22e0 <operator delete(void*)@plt>
    26ec:	4d 85 e4             	test   %r12,%r12
    26ef:	75 ef                	jne    26e0 <std::unordered_map<unsigned int, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > > >::~unordered_map()+0x30>
    26f1:	48 8b 45 18          	mov    0x18(%rbp),%rax
    26f5:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
    26f9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    2700:	00 
    2701:	31 f6                	xor    %esi,%esi
    2703:	e8 58 fb ff ff       	callq  2260 <memset@plt>
    2708:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
    270c:	48 8d 45 40          	lea    0x40(%rbp),%rax
    2710:	48 c7 45 28 00 00 00 	movq   $0x0,0x28(%rbp)
    2717:	00 
    2718:	48 c7 45 20 00 00 00 	movq   $0x0,0x20(%rbp)
    271f:	00 
    2720:	48 39 c7             	cmp    %rax,%rdi
    2723:	74 1b                	je     2740 <std::unordered_map<unsigned int, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > > >::~unordered_map()+0x90>
    2725:	e8 b6 fb ff ff       	callq  22e0 <operator delete(void*)@plt>
    272a:	48 89 ef             	mov    %rbp,%rdi
    272d:	e8 ae fb ff ff       	callq  22e0 <operator delete(void*)@plt>
    2732:	4d 85 ed             	test   %r13,%r13
    2735:	74 19                	je     2750 <std::unordered_map<unsigned int, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > > >::~unordered_map()+0xa0>
    2737:	4c 89 ed             	mov    %r13,%rbp
    273a:	eb 94                	jmp    26d0 <std::unordered_map<unsigned int, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > > >::~unordered_map()+0x20>
    273c:	0f 1f 40 00          	nopl   0x0(%rax)
    2740:	48 89 ef             	mov    %rbp,%rdi
    2743:	e8 98 fb ff ff       	callq  22e0 <operator delete(void*)@plt>
    2748:	4d 85 ed             	test   %r13,%r13
    274b:	75 ea                	jne    2737 <std::unordered_map<unsigned int, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > > >::~unordered_map()+0x87>
    274d:	0f 1f 00             	nopl   (%rax)
    2750:	48 8b 43 08          	mov    0x8(%rbx),%rax
    2754:	48 8b 3b             	mov    (%rbx),%rdi
    2757:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    275e:	00 
    275f:	31 f6                	xor    %esi,%esi
    2761:	e8 fa fa ff ff       	callq  2260 <memset@plt>
    2766:	48 8b 3b             	mov    (%rbx),%rdi
    2769:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
    2770:	00 
    2771:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    2778:	00 
    2779:	48 83 c3 30          	add    $0x30,%rbx
    277d:	48 39 df             	cmp    %rbx,%rdi
    2780:	74 16                	je     2798 <std::unordered_map<unsigned int, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > > >::~unordered_map()+0xe8>
    2782:	48 83 c4 08          	add    $0x8,%rsp
    2786:	5b                   	pop    %rbx
    2787:	5d                   	pop    %rbp
    2788:	41 5c                	pop    %r12
    278a:	41 5d                	pop    %r13
    278c:	e9 4f fb ff ff       	jmpq   22e0 <operator delete(void*)@plt>
    2791:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2798:	48 83 c4 08          	add    $0x8,%rsp
    279c:	5b                   	pop    %rbx
    279d:	5d                   	pop    %rbp
    279e:	41 5c                	pop    %r12
    27a0:	41 5d                	pop    %r13
    27a2:	c3                   	retq   
    27a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    27aa:	00 00 00 
    27ad:	0f 1f 00             	nopl   (%rax)

00000000000027b0 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()>:
    27b0:	f3 0f 1e fa          	endbr64 
    27b4:	8b 05 d2 49 0c 00    	mov    0xc49d2(%rip),%eax        # c718c <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0xc002c>
    27ba:	85 c0                	test   %eax,%eax
    27bc:	0f 85 9e 00 00 00    	jne    2860 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0xb0>
    27c2:	41 55                	push   %r13
    27c4:	41 54                	push   %r12
    27c6:	55                   	push   %rbp
    27c7:	53                   	push   %rbx
    27c8:	48 83 ec 08          	sub    $0x8,%rsp
    27cc:	8b 05 b6 49 0c 00    	mov    0xc49b6(%rip),%eax        # c7188 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0xc0028>
    27d2:	85 c0                	test   %eax,%eax
    27d4:	0f 84 8e 00 00 00    	je     2868 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0xb8>
    27da:	3d ff ff 00 00       	cmp    $0xffff,%eax
    27df:	0f 87 4f 04 00 00    	ja     2c34 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x484>
    27e5:	48 8d 1d 74 49 00 00 	lea    0x4974(%rip),%rbx        # 7160 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution>
    27ec:	89 c5                	mov    %eax,%ebp
    27ee:	8b 94 ab 00 00 08 00 	mov    0x80000(%rbx,%rbp,4),%edx
    27f5:	85 d2                	test   %edx,%edx
    27f7:	75 54                	jne    284d <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x9d>
    27f9:	85 c0                	test   %eax,%eax
    27fb:	0f 85 8f 01 00 00    	jne    2990 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x1e0>
    2801:	8b 15 5d 49 04 00    	mov    0x4495d(%rip),%edx        # 47164 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x40004>
    2807:	85 d2                	test   %edx,%edx
    2809:	75 3c                	jne    2847 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x97>
    280b:	8b 05 4f 49 04 00    	mov    0x4494f(%rip),%eax        # 47160 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x40000>
    2811:	85 c0                	test   %eax,%eax
    2813:	75 12                	jne    2827 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x77>
    2815:	be 01 00 00 00       	mov    $0x1,%esi
    281a:	31 ff                	xor    %edi,%edi
    281c:	e8 bf fd ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2821:	89 05 39 49 04 00    	mov    %eax,0x44939(%rip)        # 47160 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x40000>
    2827:	3d ff ff 00 00       	cmp    $0xffff,%eax
    282c:	0f 87 02 04 00 00    	ja     2c34 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x484>
    2832:	89 c1                	mov    %eax,%ecx
    2834:	8b 14 8b             	mov    (%rbx,%rcx,4),%edx
    2837:	85 d2                	test   %edx,%edx
    2839:	75 06                	jne    2841 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x91>
    283b:	8d 50 01             	lea    0x1(%rax),%edx
    283e:	89 14 8b             	mov    %edx,(%rbx,%rcx,4)
    2841:	89 15 1d 49 04 00    	mov    %edx,0x4491d(%rip)        # 47164 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x40004>
    2847:	89 15 13 49 08 00    	mov    %edx,0x84913(%rip)        # 87160 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x80000>
    284d:	89 15 39 49 0c 00    	mov    %edx,0xc4939(%rip)        # c718c <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0xc002c>
    2853:	48 83 c4 08          	add    $0x8,%rsp
    2857:	5b                   	pop    %rbx
    2858:	5d                   	pop    %rbp
    2859:	41 5c                	pop    %r12
    285b:	41 5d                	pop    %r13
    285d:	c3                   	retq   
    285e:	66 90                	xchg   %ax,%ax
    2860:	c3                   	retq   
    2861:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2868:	8b 15 16 49 0c 00    	mov    0xc4916(%rip),%edx        # c7184 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0xc0024>
    286e:	85 d2                	test   %edx,%edx
    2870:	75 5c                	jne    28ce <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x11e>
    2872:	8b 05 08 49 0c 00    	mov    0xc4908(%rip),%eax        # c7180 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0xc0020>
    2878:	85 c0                	test   %eax,%eax
    287a:	0f 84 f0 01 00 00    	je     2a70 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x2c0>
    2880:	3d ff ff 00 00       	cmp    $0xffff,%eax
    2885:	0f 87 a9 03 00 00    	ja     2c34 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x484>
    288b:	89 c3                	mov    %eax,%ebx
    288d:	48 8d 2d cc 48 00 00 	lea    0x48cc(%rip),%rbp        # 7160 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution>
    2894:	48 81 c3 00 00 02 00 	add    $0x20000,%rbx
    289b:	8b 54 9d 00          	mov    0x0(%rbp,%rbx,4),%edx
    289f:	85 d2                	test   %edx,%edx
    28a1:	75 25                	jne    28c8 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x118>
    28a3:	85 c0                	test   %eax,%eax
    28a5:	0f 85 be 02 00 00    	jne    2b69 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x3b9>
    28ab:	be 01 00 00 00       	mov    $0x1,%esi
    28b0:	bf 01 00 00 00       	mov    $0x1,%edi
    28b5:	e8 26 fd ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    28ba:	89 05 a0 48 08 00    	mov    %eax,0x848a0(%rip)        # 87160 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x80000>
    28c0:	89 c2                	mov    %eax,%edx
    28c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    28c8:	89 15 b6 48 0c 00    	mov    %edx,0xc48b6(%rip)        # c7184 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0xc0024>
    28ce:	81 fa ff ff 00 00    	cmp    $0xffff,%edx
    28d4:	0f 87 5a 03 00 00    	ja     2c34 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x484>
    28da:	48 8d 1d 7f 48 00 00 	lea    0x487f(%rip),%rbx        # 7160 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution>
    28e1:	89 d5                	mov    %edx,%ebp
    28e3:	8b 84 ab 00 00 08 00 	mov    0x80000(%rbx,%rbp,4),%eax
    28ea:	85 c0                	test   %eax,%eax
    28ec:	0f 85 8e 00 00 00    	jne    2980 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x1d0>
    28f2:	85 d2                	test   %edx,%edx
    28f4:	0f 84 3e 01 00 00    	je     2a38 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x288>
    28fa:	44 8d 62 ff          	lea    -0x1(%rdx),%r12d
    28fe:	4c 89 e0             	mov    %r12,%rax
    2901:	49 81 c4 00 00 02 00 	add    $0x20000,%r12
    2908:	42 8b 0c a3          	mov    (%rbx,%r12,4),%ecx
    290c:	85 c9                	test   %ecx,%ecx
    290e:	75 20                	jne    2930 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x180>
    2910:	85 c0                	test   %eax,%eax
    2912:	0f 85 75 02 00 00    	jne    2b8d <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x3dd>
    2918:	be 01 00 00 00       	mov    $0x1,%esi
    291d:	bf 01 00 00 00       	mov    $0x1,%edi
    2922:	e8 b9 fc ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2927:	89 05 33 48 08 00    	mov    %eax,0x84833(%rip)        # 87160 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x80000>
    292d:	89 c1                	mov    %eax,%ecx
    292f:	90                   	nop
    2930:	81 f9 ff ff 00 00    	cmp    $0xffff,%ecx
    2936:	0f 87 f8 02 00 00    	ja     2c34 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x484>
    293c:	41 89 cc             	mov    %ecx,%r12d
    293f:	49 81 c4 00 00 01 00 	add    $0x10000,%r12
    2946:	42 8b 04 a3          	mov    (%rbx,%r12,4),%eax
    294a:	85 c0                	test   %eax,%eax
    294c:	75 22                	jne    2970 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x1c0>
    294e:	85 c9                	test   %ecx,%ecx
    2950:	0f 85 5b 02 00 00    	jne    2bb1 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x401>
    2956:	be 01 00 00 00       	mov    $0x1,%esi
    295b:	31 ff                	xor    %edi,%edi
    295d:	e8 7e fc ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2962:	89 05 f8 47 04 00    	mov    %eax,0x447f8(%rip)        # 47160 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x40000>
    2968:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    296f:	00 
    2970:	89 84 ab 00 00 08 00 	mov    %eax,0x80000(%rbx,%rbp,4)
    2977:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    297e:	00 00 
    2980:	89 05 02 48 0c 00    	mov    %eax,0xc4802(%rip)        # c7188 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0xc0028>
    2986:	e9 4f fe ff ff       	jmpq   27da <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x2a>
    298b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    2990:	44 8d 60 ff          	lea    -0x1(%rax),%r12d
    2994:	42 8b 8c a3 00 00 08 	mov    0x80000(%rbx,%r12,4),%ecx
    299b:	00 
    299c:	85 c9                	test   %ecx,%ecx
    299e:	75 40                	jne    29e0 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x230>
    29a0:	45 85 e4             	test   %r12d,%r12d
    29a3:	0f 85 ed 00 00 00    	jne    2a96 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x2e6>
    29a9:	8b 0d b5 47 04 00    	mov    0x447b5(%rip),%ecx        # 47164 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x40004>
    29af:	85 c9                	test   %ecx,%ecx
    29b1:	75 1d                	jne    29d0 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x220>
    29b3:	31 f6                	xor    %esi,%esi
    29b5:	bf 01 00 00 00       	mov    $0x1,%edi
    29ba:	e8 21 fc ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    29bf:	89 c6                	mov    %eax,%esi
    29c1:	31 ff                	xor    %edi,%edi
    29c3:	e8 18 fc ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    29c8:	89 05 96 47 04 00    	mov    %eax,0x44796(%rip)        # 47164 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x40004>
    29ce:	89 c1                	mov    %eax,%ecx
    29d0:	89 0d 8a 47 08 00    	mov    %ecx,0x8478a(%rip)        # 87160 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x80000>
    29d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    29dd:	00 00 00 
    29e0:	81 f9 ff ff 00 00    	cmp    $0xffff,%ecx
    29e6:	0f 87 48 02 00 00    	ja     2c34 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x484>
    29ec:	41 89 cc             	mov    %ecx,%r12d
    29ef:	42 8b 94 a3 00 00 04 	mov    0x40000(%rbx,%r12,4),%edx
    29f6:	00 
    29f7:	85 d2                	test   %edx,%edx
    29f9:	75 2d                	jne    2a28 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x278>
    29fb:	85 c9                	test   %ecx,%ecx
    29fd:	0f 85 0f 01 00 00    	jne    2b12 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x362>
    2a03:	8b 15 5b 47 00 00    	mov    0x475b(%rip),%edx        # 7164 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x4>
    2a09:	85 d2                	test   %edx,%edx
    2a0b:	75 0f                	jne    2a1c <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x26c>
    2a0d:	c7 05 4d 47 00 00 02 	movl   $0x2,0x474d(%rip)        # 7164 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x4>
    2a14:	00 00 00 
    2a17:	ba 02 00 00 00       	mov    $0x2,%edx
    2a1c:	89 15 3e 47 04 00    	mov    %edx,0x4473e(%rip)        # 47160 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x40000>
    2a22:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2a28:	89 94 ab 00 00 08 00 	mov    %edx,0x80000(%rbx,%rbp,4)
    2a2f:	e9 19 fe ff ff       	jmpq   284d <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x9d>
    2a34:	0f 1f 40 00          	nopl   0x0(%rax)
    2a38:	8b 05 26 47 04 00    	mov    0x44726(%rip),%eax        # 47164 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x40004>
    2a3e:	85 c0                	test   %eax,%eax
    2a40:	75 1b                	jne    2a5d <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x2ad>
    2a42:	31 f6                	xor    %esi,%esi
    2a44:	bf 01 00 00 00       	mov    $0x1,%edi
    2a49:	e8 92 fb ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2a4e:	89 c6                	mov    %eax,%esi
    2a50:	31 ff                	xor    %edi,%edi
    2a52:	e8 89 fb ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2a57:	89 05 07 47 04 00    	mov    %eax,0x44707(%rip)        # 47164 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x40004>
    2a5d:	89 05 fd 46 08 00    	mov    %eax,0x846fd(%rip)        # 87160 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x80000>
    2a63:	e9 18 ff ff ff       	jmpq   2980 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x1d0>
    2a68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    2a6f:	00 
    2a70:	be 07 00 00 00       	mov    $0x7,%esi
    2a75:	bf 03 00 00 00       	mov    $0x3,%edi
    2a7a:	e8 61 fb ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2a7f:	89 c6                	mov    %eax,%esi
    2a81:	bf 02 00 00 00       	mov    $0x2,%edi
    2a86:	e8 55 fb ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2a8b:	89 05 ef 46 0c 00    	mov    %eax,0xc46ef(%rip)        # c7180 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0xc0020>
    2a91:	e9 ea fd ff ff       	jmpq   2880 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0xd0>
    2a96:	44 8d 68 fe          	lea    -0x2(%rax),%r13d
    2a9a:	4c 89 e9             	mov    %r13,%rcx
    2a9d:	49 81 c5 00 00 02 00 	add    $0x20000,%r13
    2aa4:	42 8b 14 ab          	mov    (%rbx,%r13,4),%edx
    2aa8:	85 d2                	test   %edx,%edx
    2aaa:	75 1f                	jne    2acb <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x31b>
    2aac:	85 c9                	test   %ecx,%ecx
    2aae:	0f 85 3d 01 00 00    	jne    2bf1 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x441>
    2ab4:	be 01 00 00 00       	mov    $0x1,%esi
    2ab9:	bf 01 00 00 00       	mov    $0x1,%edi
    2abe:	e8 1d fb ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2ac3:	89 05 97 46 08 00    	mov    %eax,0x84697(%rip)        # 87160 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x80000>
    2ac9:	89 c2                	mov    %eax,%edx
    2acb:	81 fa ff ff 00 00    	cmp    $0xffff,%edx
    2ad1:	0f 87 5d 01 00 00    	ja     2c34 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x484>
    2ad7:	41 89 d5             	mov    %edx,%r13d
    2ada:	49 81 c5 00 00 01 00 	add    $0x10000,%r13
    2ae1:	42 8b 0c ab          	mov    (%rbx,%r13,4),%ecx
    2ae5:	85 c9                	test   %ecx,%ecx
    2ae7:	75 1c                	jne    2b05 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x355>
    2ae9:	85 d2                	test   %edx,%edx
    2aeb:	0f 85 df 00 00 00    	jne    2bd0 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x420>
    2af1:	be 01 00 00 00       	mov    $0x1,%esi
    2af6:	31 ff                	xor    %edi,%edi
    2af8:	e8 e3 fa ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2afd:	89 05 5d 46 04 00    	mov    %eax,0x4465d(%rip)        # 47160 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x40000>
    2b03:	89 c1                	mov    %eax,%ecx
    2b05:	42 89 8c a3 00 00 08 	mov    %ecx,0x80000(%rbx,%r12,4)
    2b0c:	00 
    2b0d:	e9 ce fe ff ff       	jmpq   29e0 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x230>
    2b12:	44 8d 69 ff          	lea    -0x1(%rcx),%r13d
    2b16:	4c 89 ea             	mov    %r13,%rdx
    2b19:	49 81 c5 00 00 01 00 	add    $0x10000,%r13
    2b20:	42 8b 04 ab          	mov    (%rbx,%r13,4),%eax
    2b24:	85 c0                	test   %eax,%eax
    2b26:	75 1a                	jne    2b42 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x392>
    2b28:	85 d2                	test   %edx,%edx
    2b2a:	0f 85 e5 00 00 00    	jne    2c15 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x465>
    2b30:	be 01 00 00 00       	mov    $0x1,%esi
    2b35:	31 ff                	xor    %edi,%edi
    2b37:	e8 a4 fa ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2b3c:	89 05 1e 46 04 00    	mov    %eax,0x4461e(%rip)        # 47160 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x40000>
    2b42:	3d ff ff 00 00       	cmp    $0xffff,%eax
    2b47:	0f 87 e7 00 00 00    	ja     2c34 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x484>
    2b4d:	89 c1                	mov    %eax,%ecx
    2b4f:	8b 14 8b             	mov    (%rbx,%rcx,4),%edx
    2b52:	85 d2                	test   %edx,%edx
    2b54:	75 06                	jne    2b5c <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x3ac>
    2b56:	8d 50 01             	lea    0x1(%rax),%edx
    2b59:	89 14 8b             	mov    %edx,(%rbx,%rcx,4)
    2b5c:	42 89 94 a3 00 00 04 	mov    %edx,0x40000(%rbx,%r12,4)
    2b63:	00 
    2b64:	e9 bf fe ff ff       	jmpq   2a28 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x278>
    2b69:	8d 70 ff             	lea    -0x1(%rax),%esi
    2b6c:	bf 02 00 00 00       	mov    $0x2,%edi
    2b71:	e8 6a fa ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2b76:	89 c6                	mov    %eax,%esi
    2b78:	bf 01 00 00 00       	mov    $0x1,%edi
    2b7d:	e8 5e fa ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2b82:	89 44 9d 00          	mov    %eax,0x0(%rbp,%rbx,4)
    2b86:	89 c2                	mov    %eax,%edx
    2b88:	e9 3b fd ff ff       	jmpq   28c8 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x118>
    2b8d:	8d 72 fe             	lea    -0x2(%rdx),%esi
    2b90:	bf 02 00 00 00       	mov    $0x2,%edi
    2b95:	e8 46 fa ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2b9a:	89 c6                	mov    %eax,%esi
    2b9c:	bf 01 00 00 00       	mov    $0x1,%edi
    2ba1:	e8 3a fa ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2ba6:	42 89 04 a3          	mov    %eax,(%rbx,%r12,4)
    2baa:	89 c1                	mov    %eax,%ecx
    2bac:	e9 7f fd ff ff       	jmpq   2930 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x180>
    2bb1:	8d 71 ff             	lea    -0x1(%rcx),%esi
    2bb4:	bf 01 00 00 00       	mov    $0x1,%edi
    2bb9:	e8 22 fa ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2bbe:	89 c6                	mov    %eax,%esi
    2bc0:	31 ff                	xor    %edi,%edi
    2bc2:	e8 19 fa ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2bc7:	42 89 04 a3          	mov    %eax,(%rbx,%r12,4)
    2bcb:	e9 a0 fd ff ff       	jmpq   2970 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x1c0>
    2bd0:	8d 72 ff             	lea    -0x1(%rdx),%esi
    2bd3:	bf 01 00 00 00       	mov    $0x1,%edi
    2bd8:	e8 03 fa ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2bdd:	89 c6                	mov    %eax,%esi
    2bdf:	31 ff                	xor    %edi,%edi
    2be1:	e8 fa f9 ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2be6:	42 89 04 ab          	mov    %eax,(%rbx,%r13,4)
    2bea:	89 c1                	mov    %eax,%ecx
    2bec:	e9 14 ff ff ff       	jmpq   2b05 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x355>
    2bf1:	8d 70 fd             	lea    -0x3(%rax),%esi
    2bf4:	bf 02 00 00 00       	mov    $0x2,%edi
    2bf9:	e8 e2 f9 ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2bfe:	89 c6                	mov    %eax,%esi
    2c00:	bf 01 00 00 00       	mov    $0x1,%edi
    2c05:	e8 d6 f9 ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2c0a:	42 89 04 ab          	mov    %eax,(%rbx,%r13,4)
    2c0e:	89 c2                	mov    %eax,%edx
    2c10:	e9 b6 fe ff ff       	jmpq   2acb <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x31b>
    2c15:	8d 71 fe             	lea    -0x2(%rcx),%esi
    2c18:	bf 01 00 00 00       	mov    $0x1,%edi
    2c1d:	e8 be f9 ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2c22:	89 c6                	mov    %eax,%esi
    2c24:	31 ff                	xor    %edi,%edi
    2c26:	e8 b5 f9 ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2c2b:	42 89 04 ab          	mov    %eax,(%rbx,%r13,4)
    2c2f:	e9 0e ff ff ff       	jmpq   2b42 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()+0x392>
    2c34:	48 8d 0d cd 23 00 00 	lea    0x23cd(%rip),%rcx        # 5008 <_IO_stdin_used+0x8>
    2c3b:	ba 46 00 00 00       	mov    $0x46,%edx
    2c40:	48 8d 35 ec 23 00 00 	lea    0x23ec(%rip),%rsi        # 5033 <_IO_stdin_used+0x33>
    2c47:	48 8d 3d f2 23 00 00 	lea    0x23f2(%rip),%rdi        # 5040 <_IO_stdin_used+0x40>
    2c4e:	e8 2d f6 ff ff       	callq  2280 <__assert_fail@plt>
    2c53:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    2c5a:	00 00 00 
    2c5d:	0f 1f 00             	nopl   (%rax)

0000000000002c60 <unsigned int ackermann5<unsigned int>(unsigned int, unsigned int)>:
    2c60:	f3 0f 1e fa          	endbr64 
    2c64:	41 57                	push   %r15
    2c66:	48 8d 0d 43 fb ff ff 	lea    -0x4bd(%rip),%rcx        # 27b0 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()>
    2c6d:	41 56                	push   %r14
    2c6f:	41 55                	push   %r13
    2c71:	41 54                	push   %r12
    2c73:	55                   	push   %rbp
    2c74:	53                   	push   %rbx
    2c75:	48 83 ec 28          	sub    $0x28,%rsp
    2c79:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2c80:	00 00 
    2c82:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    2c87:	31 c0                	xor    %eax,%eax
    2c89:	48 8d 44 24 0f       	lea    0xf(%rsp),%rax
    2c8e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    2c93:	48 8b 05 1e 43 00 00 	mov    0x431e(%rip),%rax        # 6fb8 <std::__once_callable@GLIBCXX_3.4.11>
    2c9a:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
    2c9f:	64 48 89 10          	mov    %rdx,%fs:(%rax)
    2ca3:	48 8b 05 1e 43 00 00 	mov    0x431e(%rip),%rax        # 6fc8 <std::__once_call@GLIBCXX_3.4.11>
    2caa:	48 83 3d 0e 43 00 00 	cmpq   $0x0,0x430e(%rip)        # 6fc0 <__pthread_key_create>
    2cb1:	00 
    2cb2:	64 48 89 08          	mov    %rcx,%fs:(%rax)
    2cb6:	0f 84 35 01 00 00    	je     2df1 <unsigned int ackermann5<unsigned int>(unsigned int, unsigned int)+0x191>
    2cbc:	89 f3                	mov    %esi,%ebx
    2cbe:	48 8b 35 0b 43 00 00 	mov    0x430b(%rip),%rsi        # 6fd0 <__once_proxy@GLIBCXX_3.4.11>
    2cc5:	89 fd                	mov    %edi,%ebp
    2cc7:	48 8d 3d 86 44 00 00 	lea    0x4486(%rip),%rdi        # 7154 <ackermann5<unsigned int>(unsigned int, unsigned int)::flag>
    2cce:	e8 5d f6 ff ff       	callq  2330 <pthread_once@plt>
    2cd3:	85 c0                	test   %eax,%eax
    2cd5:	0f 85 1b 01 00 00    	jne    2df6 <unsigned int ackermann5<unsigned int>(unsigned int, unsigned int)+0x196>
    2cdb:	83 fd 03             	cmp    $0x3,%ebp
    2cde:	0f 87 3b 01 00 00    	ja     2e1f <unsigned int ackermann5<unsigned int>(unsigned int, unsigned int)+0x1bf>
    2ce4:	81 fb ff ff 00 00    	cmp    $0xffff,%ebx
    2cea:	0f 87 2f 01 00 00    	ja     2e1f <unsigned int ackermann5<unsigned int>(unsigned int, unsigned int)+0x1bf>
    2cf0:	41 89 ee             	mov    %ebp,%r14d
    2cf3:	4d 89 f4             	mov    %r14,%r12
    2cf6:	89 da                	mov    %ebx,%edx
    2cf8:	49 c1 e4 10          	shl    $0x10,%r12
    2cfc:	4c 8d 2d 5d 44 00 00 	lea    0x445d(%rip),%r13        # 7160 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution>
    2d03:	49 01 d4             	add    %rdx,%r12
    2d06:	43 8b 44 a5 00       	mov    0x0(%r13,%r12,4),%eax
    2d0b:	85 c0                	test   %eax,%eax
    2d0d:	75 0c                	jne    2d1b <unsigned int ackermann5<unsigned int>(unsigned int, unsigned int)+0xbb>
    2d0f:	85 ed                	test   %ebp,%ebp
    2d11:	75 2d                	jne    2d40 <unsigned int ackermann5<unsigned int>(unsigned int, unsigned int)+0xe0>
    2d13:	8d 43 01             	lea    0x1(%rbx),%eax
    2d16:	41 89 44 95 00       	mov    %eax,0x0(%r13,%rdx,4)
    2d1b:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
    2d20:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    2d27:	00 00 
    2d29:	0f 85 0f 01 00 00    	jne    2e3e <unsigned int ackermann5<unsigned int>(unsigned int, unsigned int)+0x1de>
    2d2f:	48 83 c4 28          	add    $0x28,%rsp
    2d33:	5b                   	pop    %rbx
    2d34:	5d                   	pop    %rbp
    2d35:	41 5c                	pop    %r12
    2d37:	41 5d                	pop    %r13
    2d39:	41 5e                	pop    %r14
    2d3b:	41 5f                	pop    %r15
    2d3d:	c3                   	retq   
    2d3e:	66 90                	xchg   %ax,%ax
    2d40:	44 8d 7d ff          	lea    -0x1(%rbp),%r15d
    2d44:	85 db                	test   %ebx,%ebx
    2d46:	75 78                	jne    2dc0 <unsigned int ackermann5<unsigned int>(unsigned int, unsigned int)+0x160>
    2d48:	44 89 fb             	mov    %r15d,%ebx
    2d4b:	48 89 da             	mov    %rbx,%rdx
    2d4e:	48 c1 e2 12          	shl    $0x12,%rdx
    2d52:	4c 01 ea             	add    %r13,%rdx
    2d55:	8b 42 04             	mov    0x4(%rdx),%eax
    2d58:	85 c0                	test   %eax,%eax
    2d5a:	75 54                	jne    2db0 <unsigned int ackermann5<unsigned int>(unsigned int, unsigned int)+0x150>
    2d5c:	45 85 ff             	test   %r15d,%r15d
    2d5f:	74 7f                	je     2de0 <unsigned int ackermann5<unsigned int>(unsigned int, unsigned int)+0x180>
    2d61:	8b 32                	mov    (%rdx),%esi
    2d63:	83 ed 02             	sub    $0x2,%ebp
    2d66:	85 f6                	test   %esi,%esi
    2d68:	75 36                	jne    2da0 <unsigned int ackermann5<unsigned int>(unsigned int, unsigned int)+0x140>
    2d6a:	89 e8                	mov    %ebp,%eax
    2d6c:	48 c1 e0 12          	shl    $0x12,%rax
    2d70:	41 8b 74 05 04       	mov    0x4(%r13,%rax,1),%esi
    2d75:	85 f6                	test   %esi,%esi
    2d77:	75 17                	jne    2d90 <unsigned int ackermann5<unsigned int>(unsigned int, unsigned int)+0x130>
    2d79:	85 ed                	test   %ebp,%ebp
    2d7b:	0f 85 7c 00 00 00    	jne    2dfd <unsigned int ackermann5<unsigned int>(unsigned int, unsigned int)+0x19d>
    2d81:	c7 05 d9 43 00 00 02 	movl   $0x2,0x43d9(%rip)        # 7164 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x4>
    2d88:	00 00 00 
    2d8b:	be 02 00 00 00       	mov    $0x2,%esi
    2d90:	48 89 d8             	mov    %rbx,%rax
    2d93:	48 c1 e0 12          	shl    $0x12,%rax
    2d97:	41 89 74 05 00       	mov    %esi,0x0(%r13,%rax,1)
    2d9c:	0f 1f 40 00          	nopl   0x0(%rax)
    2da0:	89 ef                	mov    %ebp,%edi
    2da2:	e8 39 f8 ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2da7:	48 c1 e3 12          	shl    $0x12,%rbx
    2dab:	41 89 44 1d 04       	mov    %eax,0x4(%r13,%rbx,1)
    2db0:	49 c1 e6 12          	shl    $0x12,%r14
    2db4:	43 89 44 35 00       	mov    %eax,0x0(%r13,%r14,1)
    2db9:	e9 5d ff ff ff       	jmpq   2d1b <unsigned int ackermann5<unsigned int>(unsigned int, unsigned int)+0xbb>
    2dbe:	66 90                	xchg   %ax,%ax
    2dc0:	8d 73 ff             	lea    -0x1(%rbx),%esi
    2dc3:	89 ef                	mov    %ebp,%edi
    2dc5:	e8 16 f8 ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2dca:	89 c6                	mov    %eax,%esi
    2dcc:	44 89 ff             	mov    %r15d,%edi
    2dcf:	e8 0c f8 ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2dd4:	43 89 44 a5 00       	mov    %eax,0x0(%r13,%r12,4)
    2dd9:	e9 3d ff ff ff       	jmpq   2d1b <unsigned int ackermann5<unsigned int>(unsigned int, unsigned int)+0xbb>
    2dde:	66 90                	xchg   %ax,%ax
    2de0:	c7 05 7a 43 00 00 02 	movl   $0x2,0x437a(%rip)        # 7164 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x4>
    2de7:	00 00 00 
    2dea:	b8 02 00 00 00       	mov    $0x2,%eax
    2def:	eb bf                	jmp    2db0 <unsigned int ackermann5<unsigned int>(unsigned int, unsigned int)+0x150>
    2df1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    2df6:	89 c7                	mov    %eax,%edi
    2df8:	e8 93 f4 ff ff       	callq  2290 <std::__throw_system_error(int)@plt>
    2dfd:	31 f6                	xor    %esi,%esi
    2dff:	bf 01 00 00 00       	mov    $0x1,%edi
    2e04:	e8 d7 f7 ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2e09:	89 c6                	mov    %eax,%esi
    2e0b:	31 ff                	xor    %edi,%edi
    2e0d:	e8 ce f7 ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    2e12:	89 05 4c 43 04 00    	mov    %eax,0x4434c(%rip)        # 47164 <ackermann4<unsigned int>(unsigned int, unsigned int)::solution+0x40004>
    2e18:	89 c6                	mov    %eax,%esi
    2e1a:	e9 71 ff ff ff       	jmpq   2d90 <unsigned int ackermann5<unsigned int>(unsigned int, unsigned int)+0x130>
    2e1f:	48 8d 0d e2 21 00 00 	lea    0x21e2(%rip),%rcx        # 5008 <_IO_stdin_used+0x8>
    2e26:	ba 46 00 00 00       	mov    $0x46,%edx
    2e2b:	48 8d 35 01 22 00 00 	lea    0x2201(%rip),%rsi        # 5033 <_IO_stdin_used+0x33>
    2e32:	48 8d 3d 07 22 00 00 	lea    0x2207(%rip),%rdi        # 5040 <_IO_stdin_used+0x40>
    2e39:	e8 42 f4 ff ff       	callq  2280 <__assert_fail@plt>
    2e3e:	e8 bd f4 ff ff       	callq  2300 <__stack_chk_fail@plt>
    2e43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    2e4a:	00 00 00 
    2e4d:	0f 1f 00             	nopl   (%rax)

0000000000002e50 <std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::operator()()>:
    2e50:	f3 0f 1e fa          	endbr64 
    2e54:	48 8b 87 c0 09 00 00 	mov    0x9c0(%rdi),%rax
    2e5b:	48 8d 50 01          	lea    0x1(%rax),%rdx
    2e5f:	48 3d 37 01 00 00    	cmp    $0x137,%rax
    2e65:	77 61                	ja     2ec8 <std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::operator()()+0x78>
    2e67:	48 8b 04 c7          	mov    (%rdi,%rax,8),%rax
    2e6b:	48 89 97 c0 09 00 00 	mov    %rdx,0x9c0(%rdi)
    2e72:	48 89 c2             	mov    %rax,%rdx
    2e75:	48 c1 ea 1d          	shr    $0x1d,%rdx
    2e79:	48 b9 55 55 55 55 55 	movabs $0x5555555555555555,%rcx
    2e80:	55 55 55 
    2e83:	48 21 ca             	and    %rcx,%rdx
    2e86:	48 31 c2             	xor    %rax,%rdx
    2e89:	48 89 d0             	mov    %rdx,%rax
    2e8c:	48 c1 e0 11          	shl    $0x11,%rax
    2e90:	48 b9 00 00 a6 ed ff 	movabs $0x71d67fffeda60000,%rcx
    2e97:	7f d6 71 
    2e9a:	48 21 c8             	and    %rcx,%rax
    2e9d:	48 31 c2             	xor    %rax,%rdx
    2ea0:	48 89 d0             	mov    %rdx,%rax
    2ea3:	48 c1 e0 25          	shl    $0x25,%rax
    2ea7:	48 b9 00 00 00 00 e0 	movabs $0xfff7eee000000000,%rcx
    2eae:	ee f7 ff 
    2eb1:	48 21 c8             	and    %rcx,%rax
    2eb4:	48 31 d0             	xor    %rdx,%rax
    2eb7:	48 89 c2             	mov    %rax,%rdx
    2eba:	48 c1 ea 2b          	shr    $0x2b,%rdx
    2ebe:	48 31 d0             	xor    %rdx,%rax
    2ec1:	c3                   	retq   
    2ec2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2ec8:	c5 fd 6f 15 30 22 00 	vmovdqa 0x2230(%rip),%ymm2        # 5100 <_IO_stdin_used+0x100>
    2ecf:	00 
    2ed0:	c5 fd 6f 1d 48 22 00 	vmovdqa 0x2248(%rip),%ymm3        # 5120 <_IO_stdin_used+0x120>
    2ed7:	00 
    2ed8:	c5 fd 6f 25 60 22 00 	vmovdqa 0x2260(%rip),%ymm4        # 5140 <_IO_stdin_used+0x140>
    2edf:	00 
    2ee0:	c5 fd 6f 2d 78 22 00 	vmovdqa 0x2278(%rip),%ymm5        # 5160 <_IO_stdin_used+0x160>
    2ee7:	00 
    2ee8:	48 8d 87 e0 04 00 00 	lea    0x4e0(%rdi),%rax
    2eef:	48 89 fa             	mov    %rdi,%rdx
    2ef2:	c5 c1 ef ff          	vpxor  %xmm7,%xmm7,%xmm7
    2ef6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    2efd:	00 00 00 
    2f00:	c5 e5 db 4a 08       	vpand  0x8(%rdx),%ymm3,%ymm1
    2f05:	c5 ed db 02          	vpand  (%rdx),%ymm2,%ymm0
    2f09:	48 83 c2 20          	add    $0x20,%rdx
    2f0d:	c5 fd eb c1          	vpor   %ymm1,%ymm0,%ymm0
    2f11:	c5 f5 73 d0 01       	vpsrlq $0x1,%ymm0,%ymm1
    2f16:	c5 fd db c4          	vpand  %ymm4,%ymm0,%ymm0
    2f1a:	c5 f5 ef 8a c0 04 00 	vpxor  0x4c0(%rdx),%ymm1,%ymm1
    2f21:	00 
    2f22:	c4 e2 7d 29 c7       	vpcmpeqq %ymm7,%ymm0,%ymm0
    2f27:	c5 f5 ef f5          	vpxor  %ymm5,%ymm1,%ymm6
    2f2b:	c4 e3 4d 4c c1 00    	vpblendvb %ymm0,%ymm1,%ymm6,%ymm0
    2f31:	c5 fe 7f 42 e0       	vmovdqu %ymm0,-0x20(%rdx)
    2f36:	48 39 d0             	cmp    %rdx,%rax
    2f39:	75 c5                	jne    2f00 <std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::operator()()+0xb0>
    2f3b:	48 8d 97 a0 09 00 00 	lea    0x9a0(%rdi),%rdx
    2f42:	c5 c1 ef ff          	vpxor  %xmm7,%xmm7,%xmm7
    2f46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    2f4d:	00 00 00 
    2f50:	c5 e5 db 48 08       	vpand  0x8(%rax),%ymm3,%ymm1
    2f55:	c5 ed db 00          	vpand  (%rax),%ymm2,%ymm0
    2f59:	48 83 c0 20          	add    $0x20,%rax
    2f5d:	c5 fd eb c1          	vpor   %ymm1,%ymm0,%ymm0
    2f61:	c5 f5 73 d0 01       	vpsrlq $0x1,%ymm0,%ymm1
    2f66:	c5 fd db c4          	vpand  %ymm4,%ymm0,%ymm0
    2f6a:	c5 f5 ef 88 00 fb ff 	vpxor  -0x500(%rax),%ymm1,%ymm1
    2f71:	ff 
    2f72:	c4 e2 7d 29 c7       	vpcmpeqq %ymm7,%ymm0,%ymm0
    2f77:	c5 f5 ef f5          	vpxor  %ymm5,%ymm1,%ymm6
    2f7b:	c4 e3 4d 4c c1 00    	vpblendvb %ymm0,%ymm1,%ymm6,%ymm0
    2f81:	c5 fe 7f 40 e0       	vmovdqu %ymm0,-0x20(%rax)
    2f86:	48 39 c2             	cmp    %rax,%rdx
    2f89:	75 c5                	jne    2f50 <std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::operator()()+0x100>
    2f8b:	48 8b 87 a8 09 00 00 	mov    0x9a8(%rdi),%rax
    2f92:	48 8b 97 a0 09 00 00 	mov    0x9a0(%rdi),%rdx
    2f99:	48 89 c1             	mov    %rax,%rcx
    2f9c:	81 e1 ff ff ff 7f    	and    $0x7fffffff,%ecx
    2fa2:	48 81 e2 00 00 00 80 	and    $0xffffffff80000000,%rdx
    2fa9:	48 09 ca             	or     %rcx,%rdx
    2fac:	48 89 d1             	mov    %rdx,%rcx
    2faf:	48 d1 e9             	shr    %rcx
    2fb2:	48 33 8f c0 04 00 00 	xor    0x4c0(%rdi),%rcx
    2fb9:	83 e2 01             	and    $0x1,%edx
    2fbc:	74 0d                	je     2fcb <std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::operator()()+0x17b>
    2fbe:	48 ba e9 19 66 a9 5a 	movabs $0xb5026f5aa96619e9,%rdx
    2fc5:	6f 02 b5 
    2fc8:	48 31 d1             	xor    %rdx,%rcx
    2fcb:	48 8b 97 b0 09 00 00 	mov    0x9b0(%rdi),%rdx
    2fd2:	48 89 8f a0 09 00 00 	mov    %rcx,0x9a0(%rdi)
    2fd9:	48 89 d1             	mov    %rdx,%rcx
    2fdc:	81 e1 ff ff ff 7f    	and    $0x7fffffff,%ecx
    2fe2:	48 25 00 00 00 80    	and    $0xffffffff80000000,%rax
    2fe8:	48 09 c8             	or     %rcx,%rax
    2feb:	48 89 c1             	mov    %rax,%rcx
    2fee:	48 d1 e9             	shr    %rcx
    2ff1:	48 33 8f c8 04 00 00 	xor    0x4c8(%rdi),%rcx
    2ff8:	a8 01                	test   $0x1,%al
    2ffa:	74 0d                	je     3009 <std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::operator()()+0x1b9>
    2ffc:	48 b8 e9 19 66 a9 5a 	movabs $0xb5026f5aa96619e9,%rax
    3003:	6f 02 b5 
    3006:	48 31 c1             	xor    %rax,%rcx
    3009:	48 8b 87 b8 09 00 00 	mov    0x9b8(%rdi),%rax
    3010:	48 81 e2 00 00 00 80 	and    $0xffffffff80000000,%rdx
    3017:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
    301c:	48 09 d0             	or     %rdx,%rax
    301f:	48 89 c2             	mov    %rax,%rdx
    3022:	48 d1 ea             	shr    %rdx
    3025:	48 89 8f a8 09 00 00 	mov    %rcx,0x9a8(%rdi)
    302c:	48 33 97 d0 04 00 00 	xor    0x4d0(%rdi),%rdx
    3033:	a8 01                	test   $0x1,%al
    3035:	74 0d                	je     3044 <std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::operator()()+0x1f4>
    3037:	48 b8 e9 19 66 a9 5a 	movabs $0xb5026f5aa96619e9,%rax
    303e:	6f 02 b5 
    3041:	48 31 c2             	xor    %rax,%rdx
    3044:	48 89 97 b0 09 00 00 	mov    %rdx,0x9b0(%rdi)
    304b:	48 8b 87 b8 09 00 00 	mov    0x9b8(%rdi),%rax
    3052:	48 8b 17             	mov    (%rdi),%rdx
    3055:	48 25 00 00 00 80    	and    $0xffffffff80000000,%rax
    305b:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
    3061:	48 09 d0             	or     %rdx,%rax
    3064:	48 89 c2             	mov    %rax,%rdx
    3067:	48 d1 ea             	shr    %rdx
    306a:	48 33 97 d8 04 00 00 	xor    0x4d8(%rdi),%rdx
    3071:	a8 01                	test   $0x1,%al
    3073:	74 0d                	je     3082 <std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::operator()()+0x232>
    3075:	48 b8 e9 19 66 a9 5a 	movabs $0xb5026f5aa96619e9,%rax
    307c:	6f 02 b5 
    307f:	48 31 c2             	xor    %rax,%rdx
    3082:	48 89 97 b8 09 00 00 	mov    %rdx,0x9b8(%rdi)
    3089:	31 c0                	xor    %eax,%eax
    308b:	ba 01 00 00 00       	mov    $0x1,%edx
    3090:	c5 f8 77             	vzeroupper 
    3093:	e9 cf fd ff ff       	jmpq   2e67 <std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::operator()()+0x17>
    3098:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    309f:	00 

00000000000030a0 <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))>:
    30a0:	f3 0f 1e fa          	endbr64 
    30a4:	41 57                	push   %r15
    30a6:	41 56                	push   %r14
    30a8:	41 be 02 00 00 00    	mov    $0x2,%r14d
    30ae:	41 55                	push   %r13
    30b0:	49 89 fd             	mov    %rdi,%r13
    30b3:	41 54                	push   %r12
    30b5:	4c 8d 25 84 3f 00 00 	lea    0x3f84(%rip),%r12        # 7040 <std::cout@@GLIBCXX_3.4>
    30bc:	55                   	push   %rbp
    30bd:	53                   	push   %rbx
    30be:	48 81 ec 08 0a 00 00 	sub    $0xa08,%rsp
    30c5:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    30cc:	00 00 
    30ce:	48 89 84 24 f8 09 00 	mov    %rax,0x9f8(%rsp)
    30d5:	00 
    30d6:	31 c0                	xor    %eax,%eax
    30d8:	bb 06 00 00 00       	mov    $0x6,%ebx
    30dd:	0f 1f 00             	nopl   (%rax)
    30e0:	89 de                	mov    %ebx,%esi
    30e2:	44 89 f7             	mov    %r14d,%edi
    30e5:	41 ff d5             	callq  *%r13
    30e8:	89 c6                	mov    %eax,%esi
    30ea:	4c 89 e7             	mov    %r12,%rdi
    30ed:	e8 ae f1 ff ff       	callq  22a0 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    30f2:	48 89 c5             	mov    %rax,%rbp
    30f5:	ba 01 00 00 00       	mov    $0x1,%edx
    30fa:	48 8d 35 6d 1f 00 00 	lea    0x1f6d(%rip),%rsi        # 506e <_IO_stdin_used+0x6e>
    3101:	48 89 c7             	mov    %rax,%rdi
    3104:	e8 07 f2 ff ff       	callq  2310 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    3109:	ff c3                	inc    %ebx
    310b:	48 89 ef             	mov    %rbp,%rdi
    310e:	e8 9d f1 ff ff       	callq  22b0 <std::ostream::flush()@plt>
    3113:	83 fb 0c             	cmp    $0xc,%ebx
    3116:	75 c8                	jne    30e0 <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))+0x40>
    3118:	41 83 fe 03          	cmp    $0x3,%r14d
    311c:	0f 85 2e 02 00 00    	jne    3350 <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))+0x2b0>
    3122:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
    3129:	00 00 
    312b:	31 c0                	xor    %eax,%eax
    312d:	b9 01 00 00 00       	mov    $0x1,%ecx
    3132:	4c 8d 7c 24 30       	lea    0x30(%rsp),%r15
    3137:	48 be 2d 7f 95 4c 2d 	movabs $0x5851f42d4c957f2d,%rsi
    313e:	f4 51 58 
    3141:	48 89 c2             	mov    %rax,%rdx
    3144:	0f 1f 40 00          	nopl   0x0(%rax)
    3148:	48 89 d0             	mov    %rdx,%rax
    314b:	48 c1 e8 3e          	shr    $0x3e,%rax
    314f:	48 31 d0             	xor    %rdx,%rax
    3152:	48 0f af c6          	imul   %rsi,%rax
    3156:	48 8d 14 08          	lea    (%rax,%rcx,1),%rdx
    315a:	49 89 14 cf          	mov    %rdx,(%r15,%rcx,8)
    315e:	48 ff c1             	inc    %rcx
    3161:	48 81 f9 38 01 00 00 	cmp    $0x138,%rcx
    3168:	75 de                	jne    3148 <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))+0xa8>
    316a:	48 c7 84 24 f0 09 00 	movq   $0x138,0x9f0(%rsp)
    3171:	00 38 01 00 00 
    3176:	e8 a5 f0 ff ff       	callq  2220 <std::chrono::_V2::system_clock::now()@plt>
    317b:	48 83 3d 3d 3e 00 00 	cmpq   $0x0,0x3e3d(%rip)        # 6fc0 <__pthread_key_create>
    3182:	00 
    3183:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    3188:	0f 84 f8 01 00 00    	je     3386 <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))+0x2e6>
    318e:	48 8d 44 24 27       	lea    0x27(%rsp),%rax
    3193:	48 89 04 24          	mov    %rax,(%rsp)
    3197:	48 8d 44 24 28       	lea    0x28(%rsp),%rax
    319c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    31a1:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
    31a6:	4c 8b 35 23 3e 00 00 	mov    0x3e23(%rip),%r14        # 6fd0 <__once_proxy@GLIBCXX_3.4.11>
    31ad:	41 bc 64 00 00 00    	mov    $0x64,%r12d
    31b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    31b8:	4c 89 ff             	mov    %r15,%rdi
    31bb:	e8 90 fc ff ff       	callq  2e50 <std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::operator()()>
    31c0:	4c 89 ff             	mov    %r15,%rdi
    31c3:	89 c5                	mov    %eax,%ebp
    31c5:	e8 86 fc ff ff       	callq  2e50 <std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::operator()()>
    31ca:	48 89 c6             	mov    %rax,%rsi
    31cd:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
    31d4:	aa aa aa 
    31d7:	48 f7 e6             	mul    %rsi
    31da:	83 e5 03             	and    $0x3,%ebp
    31dd:	89 ef                	mov    %ebp,%edi
    31df:	48 c1 ea 03          	shr    $0x3,%rdx
    31e3:	48 8d 04 52          	lea    (%rdx,%rdx,2),%rax
    31e7:	48 c1 e0 02          	shl    $0x2,%rax
    31eb:	48 29 c6             	sub    %rax,%rsi
    31ee:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    31f3:	49 89 f5             	mov    %rsi,%r13
    31f6:	ff d0                	callq  *%rax
    31f8:	89 c3                	mov    %eax,%ebx
    31fa:	48 8b 04 24          	mov    (%rsp),%rax
    31fe:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    3203:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    3208:	48 8b 05 a9 3d 00 00 	mov    0x3da9(%rip),%rax        # 6fb8 <std::__once_callable@GLIBCXX_3.4.11>
    320f:	48 8d 0d 9a f5 ff ff 	lea    -0xa66(%rip),%rcx        # 27b0 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()>
    3216:	64 48 89 38          	mov    %rdi,%fs:(%rax)
    321a:	48 8b 05 a7 3d 00 00 	mov    0x3da7(%rip),%rax        # 6fc8 <std::__once_call@GLIBCXX_3.4.11>
    3221:	4c 89 f6             	mov    %r14,%rsi
    3224:	64 48 89 08          	mov    %rcx,%fs:(%rax)
    3228:	48 8d 3d 25 3f 00 00 	lea    0x3f25(%rip),%rdi        # 7154 <ackermann5<unsigned int>(unsigned int, unsigned int)::flag>
    322f:	e8 fc f0 ff ff       	callq  2330 <pthread_once@plt>
    3234:	85 c0                	test   %eax,%eax
    3236:	0f 85 b8 01 00 00    	jne    33f4 <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))+0x354>
    323c:	44 89 ee             	mov    %r13d,%esi
    323f:	89 ef                	mov    %ebp,%edi
    3241:	e8 9a f3 ff ff       	callq  25e0 <unsigned int ackermann4<unsigned int>(unsigned int, unsigned int)>
    3246:	39 c3                	cmp    %eax,%ebx
    3248:	0f 85 ad 01 00 00    	jne    33fb <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))+0x35b>
    324e:	41 ff cc             	dec    %r12d
    3251:	0f 85 61 ff ff ff    	jne    31b8 <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))+0x118>
    3257:	e8 c4 ef ff ff       	callq  2220 <std::chrono::_V2::system_clock::now()@plt>
    325c:	48 2b 44 24 18       	sub    0x18(%rsp),%rax
    3261:	c5 f8 57 c0          	vxorps %xmm0,%xmm0,%xmm0
    3265:	c4 e1 fb 2a c0       	vcvtsi2sd %rax,%xmm0,%xmm0
    326a:	48 8d 35 fa 1d 00 00 	lea    0x1dfa(%rip),%rsi        # 506b <_IO_stdin_used+0x6b>
    3271:	ba 04 00 00 00       	mov    $0x4,%edx
    3276:	48 8d 3d c3 3d 00 00 	lea    0x3dc3(%rip),%rdi        # 7040 <std::cout@@GLIBCXX_3.4>
    327d:	c5 fb 5e 05 fb 1e 00 	vdivsd 0x1efb(%rip),%xmm0,%xmm0        # 5180 <_IO_stdin_used+0x180>
    3284:	00 
    3285:	c5 fb 11 04 24       	vmovsd %xmm0,(%rsp)
    328a:	e8 81 f0 ff ff       	callq  2310 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    328f:	48 8b 0d aa 3d 00 00 	mov    0x3daa(%rip),%rcx        # 7040 <std::cout@@GLIBCXX_3.4>
    3296:	48 8d 3d a3 3d 00 00 	lea    0x3da3(%rip),%rdi        # 7040 <std::cout@@GLIBCXX_3.4>
    329d:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    32a1:	c5 fb 10 04 24       	vmovsd (%rsp),%xmm0
    32a6:	48 01 fa             	add    %rdi,%rdx
    32a9:	8b 42 18             	mov    0x18(%rdx),%eax
    32ac:	48 c7 42 08 03 00 00 	movq   $0x3,0x8(%rdx)
    32b3:	00 
    32b4:	25 fb fe ff ff       	and    $0xfffffefb,%eax
    32b9:	83 c8 04             	or     $0x4,%eax
    32bc:	89 42 18             	mov    %eax,0x18(%rdx)
    32bf:	48 8b 41 e8          	mov    -0x18(%rcx),%rax
    32c3:	48 c7 44 07 10 09 00 	movq   $0x9,0x10(%rdi,%rax,1)
    32ca:	00 00 
    32cc:	e8 bf f0 ff ff       	callq  2390 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    32d1:	48 89 c5             	mov    %rax,%rbp
    32d4:	ba 02 00 00 00       	mov    $0x2,%edx
    32d9:	48 8d 35 90 1d 00 00 	lea    0x1d90(%rip),%rsi        # 5070 <_IO_stdin_used+0x70>
    32e0:	48 89 c7             	mov    %rax,%rdi
    32e3:	e8 28 f0 ff ff       	callq  2310 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    32e8:	48 8b 45 00          	mov    0x0(%rbp),%rax
    32ec:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    32f0:	4c 8b a4 05 f0 00 00 	mov    0xf0(%rbp,%rax,1),%r12
    32f7:	00 
    32f8:	4d 85 e4             	test   %r12,%r12
    32fb:	0f 84 19 01 00 00    	je     341a <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))+0x37a>
    3301:	41 80 7c 24 38 00    	cmpb   $0x0,0x38(%r12)
    3307:	74 52                	je     335b <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))+0x2bb>
    3309:	41 0f be 74 24 43    	movsbl 0x43(%r12),%esi
    330f:	48 89 ef             	mov    %rbp,%rdi
    3312:	e8 f9 ee ff ff       	callq  2210 <std::ostream::put(char)@plt>
    3317:	48 89 c7             	mov    %rax,%rdi
    331a:	e8 91 ef ff ff       	callq  22b0 <std::ostream::flush()@plt>
    331f:	48 8b 84 24 f8 09 00 	mov    0x9f8(%rsp),%rax
    3326:	00 
    3327:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    332e:	00 00 
    3330:	0f 85 e9 00 00 00    	jne    341f <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))+0x37f>
    3336:	48 81 c4 08 0a 00 00 	add    $0xa08,%rsp
    333d:	5b                   	pop    %rbx
    333e:	5d                   	pop    %rbp
    333f:	41 5c                	pop    %r12
    3341:	41 5d                	pop    %r13
    3343:	41 5e                	pop    %r14
    3345:	41 5f                	pop    %r15
    3347:	c3                   	retq   
    3348:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    334f:	00 
    3350:	41 be 03 00 00 00    	mov    $0x3,%r14d
    3356:	e9 7d fd ff ff       	jmpq   30d8 <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))+0x38>
    335b:	4c 89 e7             	mov    %r12,%rdi
    335e:	e8 bd ef ff ff       	callq  2320 <std::ctype<char>::_M_widen_init() const@plt>
    3363:	49 8b 04 24          	mov    (%r12),%rax
    3367:	48 8d 15 02 f2 ff ff 	lea    -0xdfe(%rip),%rdx        # 2570 <std::ctype<char>::do_widen(char) const>
    336e:	48 8b 40 30          	mov    0x30(%rax),%rax
    3372:	be 0a 00 00 00       	mov    $0xa,%esi
    3377:	48 39 d0             	cmp    %rdx,%rax
    337a:	74 93                	je     330f <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))+0x26f>
    337c:	4c 89 e7             	mov    %r12,%rdi
    337f:	ff d0                	callq  *%rax
    3381:	0f be f0             	movsbl %al,%esi
    3384:	eb 89                	jmp    330f <void test<unsigned int (unsigned int, unsigned int)>(unsigned int (&)(unsigned int, unsigned int))+0x26f>
    3386:	4c 89 ff             	mov    %r15,%rdi
    3389:	e8 c2 fa ff ff       	callq  2e50 <std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::operator()()>
    338e:	4c 89 ff             	mov    %r15,%rdi
    3391:	48 89 c3             	mov    %rax,%rbx
    3394:	e8 b7 fa ff ff       	callq  2e50 <std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::operator()()>
    3399:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
    33a0:	aa aa aa 
    33a3:	48 89 c6             	mov    %rax,%rsi
    33a6:	48 f7 e2             	mul    %rdx
    33a9:	89 df                	mov    %ebx,%edi
    33ab:	83 e7 03             	and    $0x3,%edi
    33ae:	48 89 d0             	mov    %rdx,%rax
    33b1:	48 c1 e8 03          	shr    $0x3,%rax
    33b5:	48 8d 04 40          	lea    (%rax,%rax,2),%rax
    33b9:	48 c1 e0 02          	shl    $0x2,%rax
    33bd:	48 29 c6             	sub    %rax,%rsi
    33c0:	41 ff d5             	callq  *%r13
    33c3:	48 8d 44 24 27       	lea    0x27(%rsp),%rax
    33c8:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    33cd:	48 8b 05 e4 3b 00 00 	mov    0x3be4(%rip),%rax        # 6fb8 <std::__once_callable@GLIBCXX_3.4.11>
    33d4:	48 8d 54 24 28       	lea    0x28(%rsp),%rdx
    33d9:	64 48 89 10          	mov    %rdx,%fs:(%rax)
    33dd:	48 8b 05 e4 3b 00 00 	mov    0x3be4(%rip),%rax        # 6fc8 <std::__once_call@GLIBCXX_3.4.11>
    33e4:	48 8d 1d c5 f3 ff ff 	lea    -0xc3b(%rip),%rbx        # 27b0 <std::call_once<ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}>(std::once_flag&, ackermann5<unsigned int>(unsigned int, unsigned int)::{lambda()#1}&&)::{lambda()#2}::_FUN()>
    33eb:	64 48 89 18          	mov    %rbx,%fs:(%rax)
    33ef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    33f4:	89 c7                	mov    %eax,%edi
    33f6:	e8 95 ee ff ff       	callq  2290 <std::__throw_system_error(int)@plt>
    33fb:	48 8d 0d 76 1c 00 00 	lea    0x1c76(%rip),%rcx        # 5078 <_IO_stdin_used+0x78>
    3402:	ba cf 00 00 00       	mov    $0xcf,%edx
    3407:	48 8d 35 25 1c 00 00 	lea    0x1c25(%rip),%rsi        # 5033 <_IO_stdin_used+0x33>
    340e:	48 8d 3d 3a 1c 00 00 	lea    0x1c3a(%rip),%rdi        # 504f <_IO_stdin_used+0x4f>
    3415:	e8 66 ee ff ff       	callq  2280 <__assert_fail@plt>
    341a:	e8 21 ef ff ff       	callq  2340 <std::__throw_bad_cast()@plt>
    341f:	e8 dc ee ff ff       	callq  2300 <__stack_chk_fail@plt>
    3424:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    342b:	00 00 00 
    342e:	66 90                	xchg   %ax,%ax

0000000000003430 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)>:
    3430:	f3 0f 1e fa          	endbr64 
    3434:	41 57                	push   %r15
    3436:	48 b9 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rcx
    343d:	ff ff 1f 
    3440:	41 56                	push   %r14
    3442:	41 55                	push   %r13
    3444:	41 54                	push   %r12
    3446:	55                   	push   %rbp
    3447:	53                   	push   %rbx
    3448:	48 83 ec 18          	sub    $0x18,%rsp
    344c:	4c 8b 67 08          	mov    0x8(%rdi),%r12
    3450:	4c 8b 07             	mov    (%rdi),%r8
    3453:	4c 89 e0             	mov    %r12,%rax
    3456:	4c 29 c0             	sub    %r8,%rax
    3459:	48 c1 f8 02          	sar    $0x2,%rax
    345d:	48 39 c8             	cmp    %rcx,%rax
    3460:	0f 84 fd 00 00 00    	je     3563 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)+0x133>
    3466:	49 89 d7             	mov    %rdx,%r15
    3469:	48 89 f2             	mov    %rsi,%rdx
    346c:	48 89 fb             	mov    %rdi,%rbx
    346f:	49 89 f5             	mov    %rsi,%r13
    3472:	4c 29 c2             	sub    %r8,%rdx
    3475:	48 85 c0             	test   %rax,%rax
    3478:	0f 84 da 00 00 00    	je     3558 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)+0x128>
    347e:	48 8d 34 00          	lea    (%rax,%rax,1),%rsi
    3482:	49 be fc ff ff ff ff 	movabs $0x7ffffffffffffffc,%r14
    3489:	ff ff 7f 
    348c:	48 39 f0             	cmp    %rsi,%rax
    348f:	0f 86 93 00 00 00    	jbe    3528 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)+0xf8>
    3495:	4c 89 f7             	mov    %r14,%rdi
    3498:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    349d:	4c 89 04 24          	mov    %r8,(%rsp)
    34a1:	e8 4a ee ff ff       	callq  22f0 <operator new(unsigned long)@plt>
    34a6:	4c 8b 04 24          	mov    (%rsp),%r8
    34aa:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    34af:	48 89 c5             	mov    %rax,%rbp
    34b2:	49 01 c6             	add    %rax,%r14
    34b5:	41 8b 07             	mov    (%r15),%eax
    34b8:	4c 8d 4c 15 04       	lea    0x4(%rbp,%rdx,1),%r9
    34bd:	4d 29 ec             	sub    %r13,%r12
    34c0:	89 44 15 00          	mov    %eax,0x0(%rbp,%rdx,1)
    34c4:	4f 8d 3c 21          	lea    (%r9,%r12,1),%r15
    34c8:	48 85 d2             	test   %rdx,%rdx
    34cb:	7f 2b                	jg     34f8 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)+0xc8>
    34cd:	4d 85 e4             	test   %r12,%r12
    34d0:	7f 66                	jg     3538 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)+0x108>
    34d2:	4d 85 c0             	test   %r8,%r8
    34d5:	75 43                	jne    351a <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)+0xea>
    34d7:	48 89 2b             	mov    %rbp,(%rbx)
    34da:	4c 89 7b 08          	mov    %r15,0x8(%rbx)
    34de:	4c 89 73 10          	mov    %r14,0x10(%rbx)
    34e2:	48 83 c4 18          	add    $0x18,%rsp
    34e6:	5b                   	pop    %rbx
    34e7:	5d                   	pop    %rbp
    34e8:	41 5c                	pop    %r12
    34ea:	41 5d                	pop    %r13
    34ec:	41 5e                	pop    %r14
    34ee:	41 5f                	pop    %r15
    34f0:	c3                   	retq   
    34f1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    34f8:	4c 89 c6             	mov    %r8,%rsi
    34fb:	48 89 ef             	mov    %rbp,%rdi
    34fe:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
    3503:	4c 89 04 24          	mov    %r8,(%rsp)
    3507:	e8 94 ee ff ff       	callq  23a0 <memmove@plt>
    350c:	4d 85 e4             	test   %r12,%r12
    350f:	4c 8b 04 24          	mov    (%rsp),%r8
    3513:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
    3518:	7f 1e                	jg     3538 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)+0x108>
    351a:	4c 89 c7             	mov    %r8,%rdi
    351d:	e8 be ed ff ff       	callq  22e0 <operator delete(void*)@plt>
    3522:	eb b3                	jmp    34d7 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)+0xa7>
    3524:	0f 1f 40 00          	nopl   0x0(%rax)
    3528:	48 85 f6             	test   %rsi,%rsi
    352b:	75 42                	jne    356f <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)+0x13f>
    352d:	45 31 f6             	xor    %r14d,%r14d
    3530:	31 ed                	xor    %ebp,%ebp
    3532:	eb 81                	jmp    34b5 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)+0x85>
    3534:	0f 1f 40 00          	nopl   0x0(%rax)
    3538:	4c 89 e2             	mov    %r12,%rdx
    353b:	4c 89 ee             	mov    %r13,%rsi
    353e:	4c 89 cf             	mov    %r9,%rdi
    3541:	4c 89 04 24          	mov    %r8,(%rsp)
    3545:	e8 76 ed ff ff       	callq  22c0 <memcpy@plt>
    354a:	4c 8b 04 24          	mov    (%rsp),%r8
    354e:	4d 85 c0             	test   %r8,%r8
    3551:	74 84                	je     34d7 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)+0xa7>
    3553:	eb c5                	jmp    351a <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)+0xea>
    3555:	0f 1f 00             	nopl   (%rax)
    3558:	41 be 04 00 00 00    	mov    $0x4,%r14d
    355e:	e9 32 ff ff ff       	jmpq   3495 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)+0x65>
    3563:	48 8d 3d 50 1b 00 00 	lea    0x1b50(%rip),%rdi        # 50ba <_IO_stdin_used+0xba>
    356a:	e8 e1 ec ff ff       	callq  2250 <std::__throw_length_error(char const*)@plt>
    356f:	48 39 ce             	cmp    %rcx,%rsi
    3572:	48 0f 46 ce          	cmovbe %rsi,%rcx
    3576:	49 89 ce             	mov    %rcx,%r14
    3579:	49 c1 e6 02          	shl    $0x2,%r14
    357d:	e9 13 ff ff ff       	jmpq   3495 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)+0x65>
    3582:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3589:	00 00 00 
    358c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000003590 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)>:
    3590:	f3 0f 1e fa          	endbr64 
    3594:	41 57                	push   %r15
    3596:	49 bf ff ff ff ff ff 	movabs $0x1fffffffffffffff,%r15
    359d:	ff ff 1f 
    35a0:	41 56                	push   %r14
    35a2:	41 55                	push   %r13
    35a4:	41 89 f5             	mov    %esi,%r13d
    35a7:	41 54                	push   %r12
    35a9:	55                   	push   %rbp
    35aa:	53                   	push   %rbx
    35ab:	89 fb                	mov    %edi,%ebx
    35ad:	48 83 ec 58          	sub    $0x58,%rsp
    35b1:	89 7c 24 2c          	mov    %edi,0x2c(%rsp)
    35b5:	bf 04 00 00 00       	mov    $0x4,%edi
    35ba:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    35c1:	00 00 
    35c3:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    35c8:	31 c0                	xor    %eax,%eax
    35ca:	e8 21 ed ff ff       	callq  22f0 <operator new(unsigned long)@plt>
    35cf:	4c 8d 70 04          	lea    0x4(%rax),%r14
    35d3:	89 18                	mov    %ebx,(%rax)
    35d5:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    35da:	48 89 c5             	mov    %rax,%rbp
    35dd:	48 8d 44 24 2c       	lea    0x2c(%rsp),%rax
    35e2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    35e7:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
    35ec:	4c 89 74 24 40       	mov    %r14,0x40(%rsp)
    35f1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    35f6:	eb 17                	jmp    360f <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x7f>
    35f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    35ff:	00 
    3600:	41 ff c5             	inc    %r13d
    3603:	4d 89 e6             	mov    %r12,%r14
    3606:	4c 39 f5             	cmp    %r14,%rbp
    3609:	74 3a                	je     3645 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0xb5>
    360b:	41 8b 5e fc          	mov    -0x4(%r14),%ebx
    360f:	4d 8d 66 fc          	lea    -0x4(%r14),%r12
    3613:	89 5c 24 2c          	mov    %ebx,0x2c(%rsp)
    3617:	4c 89 64 24 38       	mov    %r12,0x38(%rsp)
    361c:	85 db                	test   %ebx,%ebx
    361e:	74 e0                	je     3600 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x70>
    3620:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
    3625:	ff cb                	dec    %ebx
    3627:	4d 39 c4             	cmp    %r8,%r12
    362a:	74 7c                	je     36a8 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x118>
    362c:	41 89 5e fc          	mov    %ebx,-0x4(%r14)
    3630:	4c 89 74 24 38       	mov    %r14,0x38(%rsp)
    3635:	45 85 ed             	test   %r13d,%r13d
    3638:	75 46                	jne    3680 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0xf0>
    363a:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    3640:	4c 39 f5             	cmp    %r14,%rbp
    3643:	75 c6                	jne    360b <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x7b>
    3645:	48 85 ed             	test   %rbp,%rbp
    3648:	74 08                	je     3652 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0xc2>
    364a:	48 89 ef             	mov    %rbp,%rdi
    364d:	e8 8e ec ff ff       	callq  22e0 <operator delete(void*)@plt>
    3652:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
    3657:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    365e:	00 00 
    3660:	0f 85 53 01 00 00    	jne    37b9 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x229>
    3666:	48 83 c4 58          	add    $0x58,%rsp
    366a:	5b                   	pop    %rbx
    366b:	5d                   	pop    %rbp
    366c:	41 5c                	pop    %r12
    366e:	44 89 e8             	mov    %r13d,%eax
    3671:	41 5d                	pop    %r13
    3673:	41 5e                	pop    %r14
    3675:	41 5f                	pop    %r15
    3677:	c3                   	retq   
    3678:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    367f:	00 
    3680:	4d 39 f0             	cmp    %r14,%r8
    3683:	0f 84 ef 00 00 00    	je     3778 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x1e8>
    3689:	8b 44 24 2c          	mov    0x2c(%rsp),%eax
    368d:	49 83 c6 04          	add    $0x4,%r14
    3691:	41 89 46 fc          	mov    %eax,-0x4(%r14)
    3695:	4c 89 74 24 38       	mov    %r14,0x38(%rsp)
    369a:	41 ff cd             	dec    %r13d
    369d:	e9 64 ff ff ff       	jmpq   3606 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x76>
    36a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    36a8:	49 29 ec             	sub    %rbp,%r12
    36ab:	4c 89 e0             	mov    %r12,%rax
    36ae:	48 c1 f8 02          	sar    $0x2,%rax
    36b2:	4c 39 f8             	cmp    %r15,%rax
    36b5:	0f 84 f2 00 00 00    	je     37ad <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x21d>
    36bb:	48 85 c0             	test   %rax,%rax
    36be:	0f 84 a4 00 00 00    	je     3768 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x1d8>
    36c4:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
    36c8:	49 be fc ff ff ff ff 	movabs $0x7ffffffffffffffc,%r14
    36cf:	ff ff 7f 
    36d2:	48 39 d0             	cmp    %rdx,%rax
    36d5:	76 39                	jbe    3710 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x180>
    36d7:	4c 89 f7             	mov    %r14,%rdi
    36da:	e8 11 ec ff ff       	callq  22f0 <operator new(unsigned long)@plt>
    36df:	48 89 c1             	mov    %rax,%rcx
    36e2:	4e 8d 04 30          	lea    (%rax,%r14,1),%r8
    36e6:	42 89 1c 21          	mov    %ebx,(%rcx,%r12,1)
    36ea:	4e 8d 74 21 04       	lea    0x4(%rcx,%r12,1),%r14
    36ef:	4d 85 e4             	test   %r12,%r12
    36f2:	7f 38                	jg     372c <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x19c>
    36f4:	48 85 ed             	test   %rbp,%rbp
    36f7:	75 4e                	jne    3747 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x1b7>
    36f9:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
    36fe:	4c 89 74 24 38       	mov    %r14,0x38(%rsp)
    3703:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
    3708:	48 89 cd             	mov    %rcx,%rbp
    370b:	e9 25 ff ff ff       	jmpq   3635 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0xa5>
    3710:	48 85 d2             	test   %rdx,%rdx
    3713:	0f 85 80 00 00 00    	jne    3799 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x209>
    3719:	31 c9                	xor    %ecx,%ecx
    371b:	42 89 1c 21          	mov    %ebx,(%rcx,%r12,1)
    371f:	45 31 c0             	xor    %r8d,%r8d
    3722:	4e 8d 74 21 04       	lea    0x4(%rcx,%r12,1),%r14
    3727:	4d 85 e4             	test   %r12,%r12
    372a:	7e c8                	jle    36f4 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x164>
    372c:	48 89 cf             	mov    %rcx,%rdi
    372f:	4c 89 e2             	mov    %r12,%rdx
    3732:	48 89 ee             	mov    %rbp,%rsi
    3735:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
    373a:	e8 61 ec ff ff       	callq  23a0 <memmove@plt>
    373f:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
    3744:	48 89 c1             	mov    %rax,%rcx
    3747:	48 89 ef             	mov    %rbp,%rdi
    374a:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    374f:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
    3754:	e8 87 eb ff ff       	callq  22e0 <operator delete(void*)@plt>
    3759:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
    375e:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
    3763:	eb 94                	jmp    36f9 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x169>
    3765:	0f 1f 00             	nopl   (%rax)
    3768:	41 be 04 00 00 00    	mov    $0x4,%r14d
    376e:	e9 64 ff ff ff       	jmpq   36d7 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x147>
    3773:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    3778:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    377d:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    3782:	4c 89 c6             	mov    %r8,%rsi
    3785:	e8 a6 fc ff ff       	callq  3430 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)>
    378a:	4c 8b 74 24 38       	mov    0x38(%rsp),%r14
    378f:	48 8b 6c 24 30       	mov    0x30(%rsp),%rbp
    3794:	e9 01 ff ff ff       	jmpq   369a <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x10a>
    3799:	4c 39 fa             	cmp    %r15,%rdx
    379c:	49 0f 47 d7          	cmova  %r15,%rdx
    37a0:	4c 8d 34 95 00 00 00 	lea    0x0(,%rdx,4),%r14
    37a7:	00 
    37a8:	e9 2a ff ff ff       	jmpq   36d7 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x147>
    37ad:	48 8d 3d 06 19 00 00 	lea    0x1906(%rip),%rdi        # 50ba <_IO_stdin_used+0xba>
    37b4:	e8 97 ea ff ff       	callq  2250 <std::__throw_length_error(char const*)@plt>
    37b9:	e8 42 eb ff ff       	callq  2300 <__stack_chk_fail@plt>
    37be:	f3 0f 1e fa          	endbr64 
    37c2:	48 89 c5             	mov    %rax,%rbp
    37c5:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
    37ca:	48 85 ff             	test   %rdi,%rdi
    37cd:	74 10                	je     37df <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x24f>
    37cf:	c5 f8 77             	vzeroupper 
    37d2:	e8 09 eb ff ff       	callq  22e0 <operator delete(void*)@plt>
    37d7:	48 89 ef             	mov    %rbp,%rdi
    37da:	e8 e1 eb ff ff       	callq  23c0 <_Unwind_Resume@plt>
    37df:	c5 f8 77             	vzeroupper 
    37e2:	eb f3                	jmp    37d7 <unsigned int ackermann6<unsigned int>(unsigned int, unsigned int)+0x247>
    37e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    37eb:	00 00 00 
    37ee:	66 90                	xchg   %ax,%ax

00000000000037f0 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)>:
    37f0:	f3 0f 1e fa          	endbr64 
    37f4:	41 55                	push   %r13
    37f6:	41 54                	push   %r12
    37f8:	55                   	push   %rbp
    37f9:	48 89 f5             	mov    %rsi,%rbp
    37fc:	53                   	push   %rbx
    37fd:	48 89 fb             	mov    %rdi,%rbx
    3800:	48 83 ec 08          	sub    $0x8,%rsp
    3804:	48 83 fe 01          	cmp    $0x1,%rsi
    3808:	0f 84 da 00 00 00    	je     38e8 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0xf8>
    380e:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    3815:	ff ff 0f 
    3818:	49 89 d4             	mov    %rdx,%r12
    381b:	48 39 c6             	cmp    %rax,%rsi
    381e:	0f 87 d8 00 00 00    	ja     38fc <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0x10c>
    3824:	4c 8d 2c f5 00 00 00 	lea    0x0(,%rsi,8),%r13
    382b:	00 
    382c:	4c 89 ef             	mov    %r13,%rdi
    382f:	e8 bc ea ff ff       	callq  22f0 <operator new(unsigned long)@plt>
    3834:	4c 89 ea             	mov    %r13,%rdx
    3837:	31 f6                	xor    %esi,%esi
    3839:	48 89 c7             	mov    %rax,%rdi
    383c:	49 89 c4             	mov    %rax,%r12
    383f:	e8 1c ea ff ff       	callq  2260 <memset@plt>
    3844:	4c 8d 4b 30          	lea    0x30(%rbx),%r9
    3848:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    384c:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    3853:	00 
    3854:	48 85 f6             	test   %rsi,%rsi
    3857:	74 5f                	je     38b8 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0xc8>
    3859:	45 31 c0             	xor    %r8d,%r8d
    385c:	4c 8d 53 10          	lea    0x10(%rbx),%r10
    3860:	eb 17                	jmp    3879 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0x89>
    3862:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    3868:	48 8b 00             	mov    (%rax),%rax
    386b:	48 89 01             	mov    %rax,(%rcx)
    386e:	48 8b 07             	mov    (%rdi),%rax
    3871:	48 89 08             	mov    %rcx,(%rax)
    3874:	48 85 f6             	test   %rsi,%rsi
    3877:	74 3f                	je     38b8 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0xc8>
    3879:	48 89 f1             	mov    %rsi,%rcx
    387c:	8b 41 08             	mov    0x8(%rcx),%eax
    387f:	31 d2                	xor    %edx,%edx
    3881:	48 f7 f5             	div    %rbp
    3884:	48 8b 36             	mov    (%rsi),%rsi
    3887:	49 8d 3c d4          	lea    (%r12,%rdx,8),%rdi
    388b:	48 8b 07             	mov    (%rdi),%rax
    388e:	48 85 c0             	test   %rax,%rax
    3891:	75 d5                	jne    3868 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0x78>
    3893:	48 8b 43 10          	mov    0x10(%rbx),%rax
    3897:	48 89 01             	mov    %rax,(%rcx)
    389a:	48 89 4b 10          	mov    %rcx,0x10(%rbx)
    389e:	4c 89 17             	mov    %r10,(%rdi)
    38a1:	48 83 39 00          	cmpq   $0x0,(%rcx)
    38a5:	74 39                	je     38e0 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0xf0>
    38a7:	4b 89 0c c4          	mov    %rcx,(%r12,%r8,8)
    38ab:	49 89 d0             	mov    %rdx,%r8
    38ae:	48 85 f6             	test   %rsi,%rsi
    38b1:	75 c6                	jne    3879 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0x89>
    38b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    38b8:	48 8b 3b             	mov    (%rbx),%rdi
    38bb:	4c 39 cf             	cmp    %r9,%rdi
    38be:	74 05                	je     38c5 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0xd5>
    38c0:	e8 1b ea ff ff       	callq  22e0 <operator delete(void*)@plt>
    38c5:	48 89 6b 08          	mov    %rbp,0x8(%rbx)
    38c9:	4c 89 23             	mov    %r12,(%rbx)
    38cc:	48 83 c4 08          	add    $0x8,%rsp
    38d0:	5b                   	pop    %rbx
    38d1:	5d                   	pop    %rbp
    38d2:	41 5c                	pop    %r12
    38d4:	41 5d                	pop    %r13
    38d6:	c3                   	retq   
    38d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    38de:	00 00 
    38e0:	49 89 d0             	mov    %rdx,%r8
    38e3:	eb 8f                	jmp    3874 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0x84>
    38e5:	0f 1f 00             	nopl   (%rax)
    38e8:	4c 8d 67 30          	lea    0x30(%rdi),%r12
    38ec:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
    38f3:	00 
    38f4:	4d 89 e1             	mov    %r12,%r9
    38f7:	e9 4c ff ff ff       	jmpq   3848 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0x58>
    38fc:	e8 2f e9 ff ff       	callq  2230 <std::__throw_bad_alloc()@plt>
    3901:	f3 0f 1e fa          	endbr64 
    3905:	48 89 c7             	mov    %rax,%rdi
    3908:	c5 f8 77             	vzeroupper 
    390b:	e8 30 e9 ff ff       	callq  2240 <__cxa_begin_catch@plt>
    3910:	49 8b 04 24          	mov    (%r12),%rax
    3914:	48 89 43 28          	mov    %rax,0x28(%rbx)
    3918:	e8 53 ea ff ff       	callq  2370 <__cxa_rethrow@plt>
    391d:	f3 0f 1e fa          	endbr64 
    3921:	48 89 c5             	mov    %rax,%rbp
    3924:	c5 f8 77             	vzeroupper 
    3927:	e8 84 ea ff ff       	callq  23b0 <__cxa_end_catch@plt>
    392c:	48 89 ef             	mov    %rbp,%rdi
    392f:	e8 8c ea ff ff       	callq  23c0 <_Unwind_Resume@plt>
    3934:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    393b:	00 00 00 
    393e:	66 90                	xchg   %ax,%ax

0000000000003940 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, false>*, unsigned long)>:
    3940:	f3 0f 1e fa          	endbr64 
    3944:	41 55                	push   %r13
    3946:	49 89 d5             	mov    %rdx,%r13
    3949:	41 54                	push   %r12
    394b:	49 89 cc             	mov    %rcx,%r12
    394e:	4c 89 c1             	mov    %r8,%rcx
    3951:	55                   	push   %rbp
    3952:	48 89 f5             	mov    %rsi,%rbp
    3955:	53                   	push   %rbx
    3956:	48 89 fb             	mov    %rdi,%rbx
    3959:	48 83 c7 20          	add    $0x20,%rdi
    395d:	48 83 ec 18          	sub    $0x18,%rsp
    3961:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3968:	00 00 
    396a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    396f:	31 c0                	xor    %eax,%eax
    3971:	48 8b 57 f8          	mov    -0x8(%rdi),%rdx
    3975:	48 8b 47 08          	mov    0x8(%rdi),%rax
    3979:	48 8b 77 e8          	mov    -0x18(%rdi),%rsi
    397d:	48 89 04 24          	mov    %rax,(%rsp)
    3981:	e8 ca e9 ff ff       	callq  2350 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>
    3986:	84 c0                	test   %al,%al
    3988:	74 1a                	je     39a4 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, false>*, unsigned long)+0x64>
    398a:	48 89 d6             	mov    %rdx,%rsi
    398d:	48 89 df             	mov    %rbx,%rdi
    3990:	48 89 e2             	mov    %rsp,%rdx
    3993:	e8 58 fe ff ff       	callq  37f0 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)>
    3998:	4c 89 e8             	mov    %r13,%rax
    399b:	31 d2                	xor    %edx,%edx
    399d:	48 f7 73 08          	divq   0x8(%rbx)
    39a1:	48 89 d5             	mov    %rdx,%rbp
    39a4:	48 8b 33             	mov    (%rbx),%rsi
    39a7:	48 8d 0c ee          	lea    (%rsi,%rbp,8),%rcx
    39ab:	48 8b 01             	mov    (%rcx),%rax
    39ae:	48 85 c0             	test   %rax,%rax
    39b1:	74 35                	je     39e8 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, false>*, unsigned long)+0xa8>
    39b3:	48 8b 00             	mov    (%rax),%rax
    39b6:	49 89 04 24          	mov    %rax,(%r12)
    39ba:	48 8b 01             	mov    (%rcx),%rax
    39bd:	4c 89 20             	mov    %r12,(%rax)
    39c0:	48 ff 43 18          	incq   0x18(%rbx)
    39c4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    39c9:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    39d0:	00 00 
    39d2:	75 3f                	jne    3a13 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, false>*, unsigned long)+0xd3>
    39d4:	48 83 c4 18          	add    $0x18,%rsp
    39d8:	5b                   	pop    %rbx
    39d9:	5d                   	pop    %rbp
    39da:	4c 89 e0             	mov    %r12,%rax
    39dd:	41 5c                	pop    %r12
    39df:	41 5d                	pop    %r13
    39e1:	c3                   	retq   
    39e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    39e8:	48 8b 43 10          	mov    0x10(%rbx),%rax
    39ec:	49 89 04 24          	mov    %rax,(%r12)
    39f0:	4c 89 63 10          	mov    %r12,0x10(%rbx)
    39f4:	49 8b 04 24          	mov    (%r12),%rax
    39f8:	48 85 c0             	test   %rax,%rax
    39fb:	74 0d                	je     3a0a <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, false>*, unsigned long)+0xca>
    39fd:	8b 40 08             	mov    0x8(%rax),%eax
    3a00:	31 d2                	xor    %edx,%edx
    3a02:	48 f7 73 08          	divq   0x8(%rbx)
    3a06:	4c 89 24 d6          	mov    %r12,(%rsi,%rdx,8)
    3a0a:	48 8d 43 10          	lea    0x10(%rbx),%rax
    3a0e:	48 89 01             	mov    %rax,(%rcx)
    3a11:	eb ad                	jmp    39c0 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, false>*, unsigned long)+0x80>
    3a13:	e8 e8 e8 ff ff       	callq  2300 <__stack_chk_fail@plt>
    3a18:	f3 0f 1e fa          	endbr64 
    3a1c:	48 89 c7             	mov    %rax,%rdi
    3a1f:	c5 f8 77             	vzeroupper 
    3a22:	e8 19 e8 ff ff       	callq  2240 <__cxa_begin_catch@plt>
    3a27:	49 8b 7c 24 20       	mov    0x20(%r12),%rdi
    3a2c:	48 85 ff             	test   %rdi,%rdi
    3a2f:	75 4c                	jne    3a7d <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, false>*, unsigned long)+0x13d>
    3a31:	49 8b 44 24 18       	mov    0x18(%r12),%rax
    3a36:	49 8b 7c 24 10       	mov    0x10(%r12),%rdi
    3a3b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    3a42:	00 
    3a43:	31 f6                	xor    %esi,%esi
    3a45:	e8 16 e8 ff ff       	callq  2260 <memset@plt>
    3a4a:	49 8b 7c 24 10       	mov    0x10(%r12),%rdi
    3a4f:	49 8d 44 24 40       	lea    0x40(%r12),%rax
    3a54:	49 c7 44 24 28 00 00 	movq   $0x0,0x28(%r12)
    3a5b:	00 00 
    3a5d:	49 c7 44 24 20 00 00 	movq   $0x0,0x20(%r12)
    3a64:	00 00 
    3a66:	48 39 c7             	cmp    %rax,%rdi
    3a69:	74 05                	je     3a70 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, false>*, unsigned long)+0x130>
    3a6b:	e8 70 e8 ff ff       	callq  22e0 <operator delete(void*)@plt>
    3a70:	4c 89 e7             	mov    %r12,%rdi
    3a73:	e8 68 e8 ff ff       	callq  22e0 <operator delete(void*)@plt>
    3a78:	e8 f3 e8 ff ff       	callq  2370 <__cxa_rethrow@plt>
    3a7d:	48 8b 1f             	mov    (%rdi),%rbx
    3a80:	e8 5b e8 ff ff       	callq  22e0 <operator delete(void*)@plt>
    3a85:	48 89 df             	mov    %rbx,%rdi
    3a88:	eb a2                	jmp    3a2c <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, false>*, unsigned long)+0xec>
    3a8a:	f3 0f 1e fa          	endbr64 
    3a8e:	48 89 c5             	mov    %rax,%rbp
    3a91:	c5 f8 77             	vzeroupper 
    3a94:	e8 17 e9 ff ff       	callq  23b0 <__cxa_end_catch@plt>
    3a99:	48 89 ef             	mov    %rbp,%rdi
    3a9c:	e8 1f e9 ff ff       	callq  23c0 <_Unwind_Resume@plt>
    3aa1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3aa8:	00 00 00 
    3aab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003ab0 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)>:
    3ab0:	f3 0f 1e fa          	endbr64 
    3ab4:	41 55                	push   %r13
    3ab6:	31 d2                	xor    %edx,%edx
    3ab8:	41 54                	push   %r12
    3aba:	55                   	push   %rbp
    3abb:	48 89 fd             	mov    %rdi,%rbp
    3abe:	53                   	push   %rbx
    3abf:	48 89 f3             	mov    %rsi,%rbx
    3ac2:	48 83 ec 08          	sub    $0x8,%rsp
    3ac6:	44 8b 2e             	mov    (%rsi),%r13d
    3ac9:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    3acd:	4c 89 e8             	mov    %r13,%rax
    3ad0:	48 f7 f7             	div    %rdi
    3ad3:	48 8b 45 00          	mov    0x0(%rbp),%rax
    3ad7:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
    3adb:	49 89 d4             	mov    %rdx,%r12
    3ade:	48 85 c0             	test   %rax,%rax
    3ae1:	74 3d                	je     3b20 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)+0x70>
    3ae3:	48 8b 08             	mov    (%rax),%rcx
    3ae6:	4d 89 e8             	mov    %r13,%r8
    3ae9:	8b 71 08             	mov    0x8(%rcx),%esi
    3aec:	eb 1a                	jmp    3b08 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)+0x58>
    3aee:	66 90                	xchg   %ax,%ax
    3af0:	48 8b 09             	mov    (%rcx),%rcx
    3af3:	48 85 c9             	test   %rcx,%rcx
    3af6:	74 28                	je     3b20 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)+0x70>
    3af8:	8b 41 08             	mov    0x8(%rcx),%eax
    3afb:	31 d2                	xor    %edx,%edx
    3afd:	48 89 c6             	mov    %rax,%rsi
    3b00:	48 f7 f7             	div    %rdi
    3b03:	49 39 d4             	cmp    %rdx,%r12
    3b06:	75 18                	jne    3b20 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)+0x70>
    3b08:	41 39 f0             	cmp    %esi,%r8d
    3b0b:	75 e3                	jne    3af0 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)+0x40>
    3b0d:	48 83 c4 08          	add    $0x8,%rsp
    3b11:	5b                   	pop    %rbx
    3b12:	5d                   	pop    %rbp
    3b13:	41 5c                	pop    %r12
    3b15:	48 8d 41 10          	lea    0x10(%rcx),%rax
    3b19:	41 5d                	pop    %r13
    3b1b:	c3                   	retq   
    3b1c:	0f 1f 40 00          	nopl   0x0(%rax)
    3b20:	bf 48 00 00 00       	mov    $0x48,%edi
    3b25:	e8 c6 e7 ff ff       	callq  22f0 <operator new(unsigned long)@plt>
    3b2a:	48 89 c1             	mov    %rax,%rcx
    3b2d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    3b34:	8b 03                	mov    (%rbx),%eax
    3b36:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
    3b3a:	89 41 08             	mov    %eax,0x8(%rcx)
    3b3d:	48 8d 41 40          	lea    0x40(%rcx),%rax
    3b41:	c5 f8 11 41 30       	vmovups %xmm0,0x30(%rcx)
    3b46:	48 c7 41 40 00 00 00 	movq   $0x0,0x40(%rcx)
    3b4d:	00 
    3b4e:	48 89 41 10          	mov    %rax,0x10(%rcx)
    3b52:	48 c7 41 18 01 00 00 	movq   $0x1,0x18(%rcx)
    3b59:	00 
    3b5a:	48 c7 41 20 00 00 00 	movq   $0x0,0x20(%rcx)
    3b61:	00 
    3b62:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
    3b69:	00 
    3b6a:	c7 41 30 00 00 80 3f 	movl   $0x3f800000,0x30(%rcx)
    3b71:	48 c7 41 38 00 00 00 	movq   $0x0,0x38(%rcx)
    3b78:	00 
    3b79:	4c 89 ea             	mov    %r13,%rdx
    3b7c:	4c 89 e6             	mov    %r12,%rsi
    3b7f:	48 89 ef             	mov    %rbp,%rdi
    3b82:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    3b88:	e8 b3 fd ff ff       	callq  3940 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, false>*, unsigned long)>
    3b8d:	48 83 c4 08          	add    $0x8,%rsp
    3b91:	5b                   	pop    %rbx
    3b92:	5d                   	pop    %rbp
    3b93:	41 5c                	pop    %r12
    3b95:	48 83 c0 10          	add    $0x10,%rax
    3b99:	41 5d                	pop    %r13
    3b9b:	c3                   	retq   
    3b9c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000003ba0 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int&&)>:
    3ba0:	f3 0f 1e fa          	endbr64 
    3ba4:	41 55                	push   %r13
    3ba6:	31 d2                	xor    %edx,%edx
    3ba8:	41 54                	push   %r12
    3baa:	55                   	push   %rbp
    3bab:	48 89 fd             	mov    %rdi,%rbp
    3bae:	53                   	push   %rbx
    3baf:	48 89 f3             	mov    %rsi,%rbx
    3bb2:	48 83 ec 08          	sub    $0x8,%rsp
    3bb6:	44 8b 2e             	mov    (%rsi),%r13d
    3bb9:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    3bbd:	4c 89 e8             	mov    %r13,%rax
    3bc0:	48 f7 f7             	div    %rdi
    3bc3:	48 8b 45 00          	mov    0x0(%rbp),%rax
    3bc7:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
    3bcb:	49 89 d4             	mov    %rdx,%r12
    3bce:	48 85 c0             	test   %rax,%rax
    3bd1:	74 3d                	je     3c10 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int&&)+0x70>
    3bd3:	48 8b 08             	mov    (%rax),%rcx
    3bd6:	4d 89 e8             	mov    %r13,%r8
    3bd9:	8b 71 08             	mov    0x8(%rcx),%esi
    3bdc:	eb 1a                	jmp    3bf8 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int&&)+0x58>
    3bde:	66 90                	xchg   %ax,%ax
    3be0:	48 8b 09             	mov    (%rcx),%rcx
    3be3:	48 85 c9             	test   %rcx,%rcx
    3be6:	74 28                	je     3c10 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int&&)+0x70>
    3be8:	8b 41 08             	mov    0x8(%rcx),%eax
    3beb:	31 d2                	xor    %edx,%edx
    3bed:	48 89 c6             	mov    %rax,%rsi
    3bf0:	48 f7 f7             	div    %rdi
    3bf3:	49 39 d4             	cmp    %rdx,%r12
    3bf6:	75 18                	jne    3c10 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int&&)+0x70>
    3bf8:	41 39 f0             	cmp    %esi,%r8d
    3bfb:	75 e3                	jne    3be0 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int&&)+0x40>
    3bfd:	48 83 c4 08          	add    $0x8,%rsp
    3c01:	5b                   	pop    %rbx
    3c02:	5d                   	pop    %rbp
    3c03:	41 5c                	pop    %r12
    3c05:	48 8d 41 10          	lea    0x10(%rcx),%rax
    3c09:	41 5d                	pop    %r13
    3c0b:	c3                   	retq   
    3c0c:	0f 1f 40 00          	nopl   0x0(%rax)
    3c10:	bf 48 00 00 00       	mov    $0x48,%edi
    3c15:	e8 d6 e6 ff ff       	callq  22f0 <operator new(unsigned long)@plt>
    3c1a:	48 89 c1             	mov    %rax,%rcx
    3c1d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    3c24:	8b 03                	mov    (%rbx),%eax
    3c26:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
    3c2a:	89 41 08             	mov    %eax,0x8(%rcx)
    3c2d:	48 8d 41 40          	lea    0x40(%rcx),%rax
    3c31:	c5 f8 11 41 30       	vmovups %xmm0,0x30(%rcx)
    3c36:	48 c7 41 40 00 00 00 	movq   $0x0,0x40(%rcx)
    3c3d:	00 
    3c3e:	48 89 41 10          	mov    %rax,0x10(%rcx)
    3c42:	48 c7 41 18 01 00 00 	movq   $0x1,0x18(%rcx)
    3c49:	00 
    3c4a:	48 c7 41 20 00 00 00 	movq   $0x0,0x20(%rcx)
    3c51:	00 
    3c52:	48 c7 41 28 00 00 00 	movq   $0x0,0x28(%rcx)
    3c59:	00 
    3c5a:	c7 41 30 00 00 80 3f 	movl   $0x3f800000,0x30(%rcx)
    3c61:	48 c7 41 38 00 00 00 	movq   $0x0,0x38(%rcx)
    3c68:	00 
    3c69:	4c 89 ea             	mov    %r13,%rdx
    3c6c:	4c 89 e6             	mov    %r12,%rsi
    3c6f:	48 89 ef             	mov    %rbp,%rdi
    3c72:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    3c78:	e8 c3 fc ff ff       	callq  3940 <std::_Hashtable<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, false>*, unsigned long)>
    3c7d:	48 83 c4 08          	add    $0x8,%rsp
    3c81:	5b                   	pop    %rbx
    3c82:	5d                   	pop    %rbp
    3c83:	41 5c                	pop    %r12
    3c85:	48 83 c0 10          	add    $0x10,%rax
    3c89:	41 5d                	pop    %r13
    3c8b:	c3                   	retq   
    3c8c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000003c90 <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)>:
    3c90:	f3 0f 1e fa          	endbr64 
    3c94:	41 55                	push   %r13
    3c96:	41 54                	push   %r12
    3c98:	55                   	push   %rbp
    3c99:	48 89 f5             	mov    %rsi,%rbp
    3c9c:	53                   	push   %rbx
    3c9d:	48 89 fb             	mov    %rdi,%rbx
    3ca0:	48 83 ec 08          	sub    $0x8,%rsp
    3ca4:	48 83 fe 01          	cmp    $0x1,%rsi
    3ca8:	0f 84 da 00 00 00    	je     3d88 <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0xf8>
    3cae:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    3cb5:	ff ff 0f 
    3cb8:	49 89 d4             	mov    %rdx,%r12
    3cbb:	48 39 c6             	cmp    %rax,%rsi
    3cbe:	0f 87 d8 00 00 00    	ja     3d9c <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0x10c>
    3cc4:	4c 8d 2c f5 00 00 00 	lea    0x0(,%rsi,8),%r13
    3ccb:	00 
    3ccc:	4c 89 ef             	mov    %r13,%rdi
    3ccf:	e8 1c e6 ff ff       	callq  22f0 <operator new(unsigned long)@plt>
    3cd4:	4c 89 ea             	mov    %r13,%rdx
    3cd7:	31 f6                	xor    %esi,%esi
    3cd9:	48 89 c7             	mov    %rax,%rdi
    3cdc:	49 89 c4             	mov    %rax,%r12
    3cdf:	e8 7c e5 ff ff       	callq  2260 <memset@plt>
    3ce4:	4c 8d 4b 30          	lea    0x30(%rbx),%r9
    3ce8:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    3cec:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    3cf3:	00 
    3cf4:	48 85 f6             	test   %rsi,%rsi
    3cf7:	74 5f                	je     3d58 <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0xc8>
    3cf9:	45 31 c0             	xor    %r8d,%r8d
    3cfc:	4c 8d 53 10          	lea    0x10(%rbx),%r10
    3d00:	eb 17                	jmp    3d19 <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0x89>
    3d02:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    3d08:	48 8b 00             	mov    (%rax),%rax
    3d0b:	48 89 01             	mov    %rax,(%rcx)
    3d0e:	48 8b 07             	mov    (%rdi),%rax
    3d11:	48 89 08             	mov    %rcx,(%rax)
    3d14:	48 85 f6             	test   %rsi,%rsi
    3d17:	74 3f                	je     3d58 <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0xc8>
    3d19:	48 89 f1             	mov    %rsi,%rcx
    3d1c:	8b 41 08             	mov    0x8(%rcx),%eax
    3d1f:	31 d2                	xor    %edx,%edx
    3d21:	48 f7 f5             	div    %rbp
    3d24:	48 8b 36             	mov    (%rsi),%rsi
    3d27:	49 8d 3c d4          	lea    (%r12,%rdx,8),%rdi
    3d2b:	48 8b 07             	mov    (%rdi),%rax
    3d2e:	48 85 c0             	test   %rax,%rax
    3d31:	75 d5                	jne    3d08 <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0x78>
    3d33:	48 8b 43 10          	mov    0x10(%rbx),%rax
    3d37:	48 89 01             	mov    %rax,(%rcx)
    3d3a:	48 89 4b 10          	mov    %rcx,0x10(%rbx)
    3d3e:	4c 89 17             	mov    %r10,(%rdi)
    3d41:	48 83 39 00          	cmpq   $0x0,(%rcx)
    3d45:	74 39                	je     3d80 <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0xf0>
    3d47:	4b 89 0c c4          	mov    %rcx,(%r12,%r8,8)
    3d4b:	49 89 d0             	mov    %rdx,%r8
    3d4e:	48 85 f6             	test   %rsi,%rsi
    3d51:	75 c6                	jne    3d19 <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0x89>
    3d53:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    3d58:	48 8b 3b             	mov    (%rbx),%rdi
    3d5b:	4c 39 cf             	cmp    %r9,%rdi
    3d5e:	74 05                	je     3d65 <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0xd5>
    3d60:	e8 7b e5 ff ff       	callq  22e0 <operator delete(void*)@plt>
    3d65:	48 89 6b 08          	mov    %rbp,0x8(%rbx)
    3d69:	4c 89 23             	mov    %r12,(%rbx)
    3d6c:	48 83 c4 08          	add    $0x8,%rsp
    3d70:	5b                   	pop    %rbx
    3d71:	5d                   	pop    %rbp
    3d72:	41 5c                	pop    %r12
    3d74:	41 5d                	pop    %r13
    3d76:	c3                   	retq   
    3d77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    3d7e:	00 00 
    3d80:	49 89 d0             	mov    %rdx,%r8
    3d83:	eb 8f                	jmp    3d14 <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0x84>
    3d85:	0f 1f 00             	nopl   (%rax)
    3d88:	4c 8d 67 30          	lea    0x30(%rdi),%r12
    3d8c:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
    3d93:	00 
    3d94:	4d 89 e1             	mov    %r12,%r9
    3d97:	e9 4c ff ff ff       	jmpq   3ce8 <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)+0x58>
    3d9c:	e8 8f e4 ff ff       	callq  2230 <std::__throw_bad_alloc()@plt>
    3da1:	f3 0f 1e fa          	endbr64 
    3da5:	48 89 c7             	mov    %rax,%rdi
    3da8:	c5 f8 77             	vzeroupper 
    3dab:	e8 90 e4 ff ff       	callq  2240 <__cxa_begin_catch@plt>
    3db0:	49 8b 04 24          	mov    (%r12),%rax
    3db4:	48 89 43 28          	mov    %rax,0x28(%rbx)
    3db8:	e8 b3 e5 ff ff       	callq  2370 <__cxa_rethrow@plt>
    3dbd:	f3 0f 1e fa          	endbr64 
    3dc1:	48 89 c5             	mov    %rax,%rbp
    3dc4:	c5 f8 77             	vzeroupper 
    3dc7:	e8 e4 e5 ff ff       	callq  23b0 <__cxa_end_catch@plt>
    3dcc:	48 89 ef             	mov    %rbp,%rdi
    3dcf:	e8 ec e5 ff ff       	callq  23c0 <_Unwind_Resume@plt>
    3dd4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3ddb:	00 00 00 
    3dde:	66 90                	xchg   %ax,%ax

0000000000003de0 <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, unsigned int>, false>*, unsigned long)>:
    3de0:	f3 0f 1e fa          	endbr64 
    3de4:	41 55                	push   %r13
    3de6:	49 89 d5             	mov    %rdx,%r13
    3de9:	41 54                	push   %r12
    3deb:	49 89 cc             	mov    %rcx,%r12
    3dee:	4c 89 c1             	mov    %r8,%rcx
    3df1:	55                   	push   %rbp
    3df2:	48 89 f5             	mov    %rsi,%rbp
    3df5:	53                   	push   %rbx
    3df6:	48 89 fb             	mov    %rdi,%rbx
    3df9:	48 83 c7 20          	add    $0x20,%rdi
    3dfd:	48 83 ec 18          	sub    $0x18,%rsp
    3e01:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3e08:	00 00 
    3e0a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    3e0f:	31 c0                	xor    %eax,%eax
    3e11:	48 8b 57 f8          	mov    -0x8(%rdi),%rdx
    3e15:	48 8b 47 08          	mov    0x8(%rdi),%rax
    3e19:	48 8b 77 e8          	mov    -0x18(%rdi),%rsi
    3e1d:	48 89 04 24          	mov    %rax,(%rsp)
    3e21:	e8 2a e5 ff ff       	callq  2350 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>
    3e26:	84 c0                	test   %al,%al
    3e28:	74 1a                	je     3e44 <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, unsigned int>, false>*, unsigned long)+0x64>
    3e2a:	48 89 d6             	mov    %rdx,%rsi
    3e2d:	48 89 df             	mov    %rbx,%rdi
    3e30:	48 89 e2             	mov    %rsp,%rdx
    3e33:	e8 58 fe ff ff       	callq  3c90 <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)>
    3e38:	4c 89 e8             	mov    %r13,%rax
    3e3b:	31 d2                	xor    %edx,%edx
    3e3d:	48 f7 73 08          	divq   0x8(%rbx)
    3e41:	48 89 d5             	mov    %rdx,%rbp
    3e44:	48 8b 33             	mov    (%rbx),%rsi
    3e47:	48 8d 0c ee          	lea    (%rsi,%rbp,8),%rcx
    3e4b:	48 8b 01             	mov    (%rcx),%rax
    3e4e:	48 85 c0             	test   %rax,%rax
    3e51:	74 35                	je     3e88 <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, unsigned int>, false>*, unsigned long)+0xa8>
    3e53:	48 8b 00             	mov    (%rax),%rax
    3e56:	49 89 04 24          	mov    %rax,(%r12)
    3e5a:	48 8b 01             	mov    (%rcx),%rax
    3e5d:	4c 89 20             	mov    %r12,(%rax)
    3e60:	48 ff 43 18          	incq   0x18(%rbx)
    3e64:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    3e69:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    3e70:	00 00 
    3e72:	75 3f                	jne    3eb3 <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, unsigned int>, false>*, unsigned long)+0xd3>
    3e74:	48 83 c4 18          	add    $0x18,%rsp
    3e78:	5b                   	pop    %rbx
    3e79:	5d                   	pop    %rbp
    3e7a:	4c 89 e0             	mov    %r12,%rax
    3e7d:	41 5c                	pop    %r12
    3e7f:	41 5d                	pop    %r13
    3e81:	c3                   	retq   
    3e82:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    3e88:	48 8b 43 10          	mov    0x10(%rbx),%rax
    3e8c:	49 89 04 24          	mov    %rax,(%r12)
    3e90:	4c 89 63 10          	mov    %r12,0x10(%rbx)
    3e94:	49 8b 04 24          	mov    (%r12),%rax
    3e98:	48 85 c0             	test   %rax,%rax
    3e9b:	74 0d                	je     3eaa <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, unsigned int>, false>*, unsigned long)+0xca>
    3e9d:	8b 40 08             	mov    0x8(%rax),%eax
    3ea0:	31 d2                	xor    %edx,%edx
    3ea2:	48 f7 73 08          	divq   0x8(%rbx)
    3ea6:	4c 89 24 d6          	mov    %r12,(%rsi,%rdx,8)
    3eaa:	48 8d 43 10          	lea    0x10(%rbx),%rax
    3eae:	48 89 01             	mov    %rax,(%rcx)
    3eb1:	eb ad                	jmp    3e60 <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, unsigned int>, false>*, unsigned long)+0x80>
    3eb3:	e8 48 e4 ff ff       	callq  2300 <__stack_chk_fail@plt>
    3eb8:	f3 0f 1e fa          	endbr64 
    3ebc:	48 89 c7             	mov    %rax,%rdi
    3ebf:	c5 f8 77             	vzeroupper 
    3ec2:	e8 79 e3 ff ff       	callq  2240 <__cxa_begin_catch@plt>
    3ec7:	4c 89 e7             	mov    %r12,%rdi
    3eca:	e8 11 e4 ff ff       	callq  22e0 <operator delete(void*)@plt>
    3ecf:	e8 9c e4 ff ff       	callq  2370 <__cxa_rethrow@plt>
    3ed4:	f3 0f 1e fa          	endbr64 
    3ed8:	48 89 c5             	mov    %rax,%rbp
    3edb:	c5 f8 77             	vzeroupper 
    3ede:	e8 cd e4 ff ff       	callq  23b0 <__cxa_end_catch@plt>
    3ee3:	48 89 ef             	mov    %rbp,%rdi
    3ee6:	e8 d5 e4 ff ff       	callq  23c0 <_Unwind_Resume@plt>
    3eeb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003ef0 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)>:
    3ef0:	f3 0f 1e fa          	endbr64 
    3ef4:	41 55                	push   %r13
    3ef6:	31 d2                	xor    %edx,%edx
    3ef8:	41 54                	push   %r12
    3efa:	55                   	push   %rbp
    3efb:	48 89 fd             	mov    %rdi,%rbp
    3efe:	53                   	push   %rbx
    3eff:	48 89 f3             	mov    %rsi,%rbx
    3f02:	48 83 ec 08          	sub    $0x8,%rsp
    3f06:	44 8b 2e             	mov    (%rsi),%r13d
    3f09:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    3f0d:	4c 89 e8             	mov    %r13,%rax
    3f10:	48 f7 f7             	div    %rdi
    3f13:	48 8b 45 00          	mov    0x0(%rbp),%rax
    3f17:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
    3f1b:	49 89 d4             	mov    %rdx,%r12
    3f1e:	48 85 c0             	test   %rax,%rax
    3f21:	74 3d                	je     3f60 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)+0x70>
    3f23:	48 8b 08             	mov    (%rax),%rcx
    3f26:	4d 89 e8             	mov    %r13,%r8
    3f29:	8b 71 08             	mov    0x8(%rcx),%esi
    3f2c:	eb 1a                	jmp    3f48 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)+0x58>
    3f2e:	66 90                	xchg   %ax,%ax
    3f30:	48 8b 09             	mov    (%rcx),%rcx
    3f33:	48 85 c9             	test   %rcx,%rcx
    3f36:	74 28                	je     3f60 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)+0x70>
    3f38:	8b 41 08             	mov    0x8(%rcx),%eax
    3f3b:	31 d2                	xor    %edx,%edx
    3f3d:	48 89 c6             	mov    %rax,%rsi
    3f40:	48 f7 f7             	div    %rdi
    3f43:	49 39 d4             	cmp    %rdx,%r12
    3f46:	75 18                	jne    3f60 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)+0x70>
    3f48:	41 39 f0             	cmp    %esi,%r8d
    3f4b:	75 e3                	jne    3f30 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)+0x40>
    3f4d:	48 83 c4 08          	add    $0x8,%rsp
    3f51:	5b                   	pop    %rbx
    3f52:	5d                   	pop    %rbp
    3f53:	41 5c                	pop    %r12
    3f55:	48 8d 41 0c          	lea    0xc(%rcx),%rax
    3f59:	41 5d                	pop    %r13
    3f5b:	c3                   	retq   
    3f5c:	0f 1f 40 00          	nopl   0x0(%rax)
    3f60:	bf 10 00 00 00       	mov    $0x10,%edi
    3f65:	e8 86 e3 ff ff       	callq  22f0 <operator new(unsigned long)@plt>
    3f6a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    3f71:	48 89 c1             	mov    %rax,%rcx
    3f74:	8b 03                	mov    (%rbx),%eax
    3f76:	c7 41 0c 00 00 00 00 	movl   $0x0,0xc(%rcx)
    3f7d:	89 41 08             	mov    %eax,0x8(%rcx)
    3f80:	4c 89 ea             	mov    %r13,%rdx
    3f83:	4c 89 e6             	mov    %r12,%rsi
    3f86:	48 89 ef             	mov    %rbp,%rdi
    3f89:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    3f8f:	e8 4c fe ff ff       	callq  3de0 <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, unsigned int>, false>*, unsigned long)>
    3f94:	48 83 c4 08          	add    $0x8,%rsp
    3f98:	5b                   	pop    %rbx
    3f99:	5d                   	pop    %rbp
    3f9a:	41 5c                	pop    %r12
    3f9c:	48 83 c0 0c          	add    $0xc,%rax
    3fa0:	41 5d                	pop    %r13
    3fa2:	c3                   	retq   
    3fa3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3faa:	00 00 00 
    3fad:	0f 1f 00             	nopl   (%rax)

0000000000003fb0 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)>:
    3fb0:	f3 0f 1e fa          	endbr64 
    3fb4:	41 54                	push   %r12
    3fb6:	55                   	push   %rbp
    3fb7:	53                   	push   %rbx
    3fb8:	48 83 ec 10          	sub    $0x10,%rsp
    3fbc:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
    3fc0:	89 74 24 08          	mov    %esi,0x8(%rsp)
    3fc4:	0f b6 05 95 31 10 00 	movzbl 0x103195(%rip),%eax        # 107160 <guard variable for ackermann3<unsigned int>(unsigned int, unsigned int)::solution>
    3fcb:	84 c0                	test   %al,%al
    3fcd:	0f 84 4d 01 00 00    	je     4120 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)+0x170>
    3fd3:	8b 44 24 0c          	mov    0xc(%rsp),%eax
    3fd7:	48 8b 35 aa 31 10 00 	mov    0x1031aa(%rip),%rsi        # 107188 <ackermann3<unsigned int>(unsigned int, unsigned int)::solution+0x8>
    3fde:	31 d2                	xor    %edx,%edx
    3fe0:	48 89 c7             	mov    %rax,%rdi
    3fe3:	48 f7 f6             	div    %rsi
    3fe6:	48 8b 05 93 31 10 00 	mov    0x103193(%rip),%rax        # 107180 <ackermann3<unsigned int>(unsigned int, unsigned int)::solution>
    3fed:	8b 5c 24 08          	mov    0x8(%rsp),%ebx
    3ff1:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
    3ff5:	49 89 d1             	mov    %rdx,%r9
    3ff8:	48 85 c0             	test   %rax,%rax
    3ffb:	0f 84 87 00 00 00    	je     4088 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)+0xd8>
    4001:	48 8b 08             	mov    (%rax),%rcx
    4004:	44 8b 41 08          	mov    0x8(%rcx),%r8d
    4008:	eb 1e                	jmp    4028 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)+0x78>
    400a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4010:	48 8b 09             	mov    (%rcx),%rcx
    4013:	48 85 c9             	test   %rcx,%rcx
    4016:	74 70                	je     4088 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)+0xd8>
    4018:	8b 41 08             	mov    0x8(%rcx),%eax
    401b:	31 d2                	xor    %edx,%edx
    401d:	49 89 c0             	mov    %rax,%r8
    4020:	48 f7 f6             	div    %rsi
    4023:	49 39 d1             	cmp    %rdx,%r9
    4026:	75 60                	jne    4088 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)+0xd8>
    4028:	44 39 c7             	cmp    %r8d,%edi
    402b:	75 e3                	jne    4010 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)+0x60>
    402d:	48 8b 71 18          	mov    0x18(%rcx),%rsi
    4031:	89 d8                	mov    %ebx,%eax
    4033:	31 d2                	xor    %edx,%edx
    4035:	48 f7 f6             	div    %rsi
    4038:	48 8b 41 10          	mov    0x10(%rcx),%rax
    403c:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
    4040:	49 89 d1             	mov    %rdx,%r9
    4043:	48 85 c0             	test   %rax,%rax
    4046:	74 40                	je     4088 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)+0xd8>
    4048:	48 8b 08             	mov    (%rax),%rcx
    404b:	44 8b 41 08          	mov    0x8(%rcx),%r8d
    404f:	41 39 d8             	cmp    %ebx,%r8d
    4052:	74 21                	je     4075 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)+0xc5>
    4054:	0f 1f 40 00          	nopl   0x0(%rax)
    4058:	48 8b 09             	mov    (%rcx),%rcx
    405b:	48 85 c9             	test   %rcx,%rcx
    405e:	74 28                	je     4088 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)+0xd8>
    4060:	8b 41 08             	mov    0x8(%rcx),%eax
    4063:	31 d2                	xor    %edx,%edx
    4065:	49 89 c0             	mov    %rax,%r8
    4068:	48 f7 f6             	div    %rsi
    406b:	49 39 d1             	cmp    %rdx,%r9
    406e:	75 18                	jne    4088 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)+0xd8>
    4070:	41 39 d8             	cmp    %ebx,%r8d
    4073:	75 e3                	jne    4058 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)+0xa8>
    4075:	8b 41 0c             	mov    0xc(%rcx),%eax
    4078:	48 83 c4 10          	add    $0x10,%rsp
    407c:	5b                   	pop    %rbx
    407d:	5d                   	pop    %rbp
    407e:	41 5c                	pop    %r12
    4080:	c3                   	retq   
    4081:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    4088:	85 ff                	test   %edi,%edi
    408a:	74 64                	je     40f0 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)+0x140>
    408c:	85 db                	test   %ebx,%ebx
    408e:	0f 85 1c 01 00 00    	jne    41b0 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)+0x200>
    4094:	ff cf                	dec    %edi
    4096:	be 01 00 00 00       	mov    $0x1,%esi
    409b:	4c 8d 64 24 0c       	lea    0xc(%rsp),%r12
    40a0:	e8 0b ff ff ff       	callq  3fb0 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)>
    40a5:	4c 89 e6             	mov    %r12,%rsi
    40a8:	48 8d 3d d1 30 10 00 	lea    0x1030d1(%rip),%rdi        # 107180 <ackermann3<unsigned int>(unsigned int, unsigned int)::solution>
    40af:	89 c3                	mov    %eax,%ebx
    40b1:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
    40b6:	e8 f5 f9 ff ff       	callq  3ab0 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)>
    40bb:	48 89 c7             	mov    %rax,%rdi
    40be:	48 89 ee             	mov    %rbp,%rsi
    40c1:	e8 2a fe ff ff       	callq  3ef0 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)>
    40c6:	89 18                	mov    %ebx,(%rax)
    40c8:	4c 89 e6             	mov    %r12,%rsi
    40cb:	48 8d 3d ae 30 10 00 	lea    0x1030ae(%rip),%rdi        # 107180 <ackermann3<unsigned int>(unsigned int, unsigned int)::solution>
    40d2:	e8 d9 f9 ff ff       	callq  3ab0 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)>
    40d7:	48 89 c7             	mov    %rax,%rdi
    40da:	48 89 ee             	mov    %rbp,%rsi
    40dd:	e8 0e fe ff ff       	callq  3ef0 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)>
    40e2:	8b 00                	mov    (%rax),%eax
    40e4:	48 83 c4 10          	add    $0x10,%rsp
    40e8:	5b                   	pop    %rbx
    40e9:	5d                   	pop    %rbp
    40ea:	41 5c                	pop    %r12
    40ec:	c3                   	retq   
    40ed:	0f 1f 00             	nopl   (%rax)
    40f0:	4c 8d 64 24 0c       	lea    0xc(%rsp),%r12
    40f5:	4c 89 e6             	mov    %r12,%rsi
    40f8:	48 8d 3d 81 30 10 00 	lea    0x103081(%rip),%rdi        # 107180 <ackermann3<unsigned int>(unsigned int, unsigned int)::solution>
    40ff:	e8 ac f9 ff ff       	callq  3ab0 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)>
    4104:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
    4109:	48 89 c7             	mov    %rax,%rdi
    410c:	48 89 ee             	mov    %rbp,%rsi
    410f:	e8 dc fd ff ff       	callq  3ef0 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)>
    4114:	ff c3                	inc    %ebx
    4116:	89 18                	mov    %ebx,(%rax)
    4118:	eb ae                	jmp    40c8 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)+0x118>
    411a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4120:	48 8d 3d 39 30 10 00 	lea    0x103039(%rip),%rdi        # 107160 <guard variable for ackermann3<unsigned int>(unsigned int, unsigned int)::solution>
    4127:	e8 a4 e2 ff ff       	callq  23d0 <__cxa_guard_acquire@plt>
    412c:	85 c0                	test   %eax,%eax
    412e:	0f 84 9f fe ff ff    	je     3fd3 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)+0x23>
    4134:	48 8d 05 75 30 10 00 	lea    0x103075(%rip),%rax        # 1071b0 <ackermann3<unsigned int>(unsigned int, unsigned int)::solution+0x30>
    413b:	48 8d 15 c6 2e 00 00 	lea    0x2ec6(%rip),%rdx        # 7008 <__dso_handle>
    4142:	48 8d 70 d0          	lea    -0x30(%rax),%rsi
    4146:	48 8d 3d 63 e5 ff ff 	lea    -0x1a9d(%rip),%rdi        # 26b0 <std::unordered_map<unsigned int, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > > >::~unordered_map()>
    414d:	48 89 05 2c 30 10 00 	mov    %rax,0x10302c(%rip)        # 107180 <ackermann3<unsigned int>(unsigned int, unsigned int)::solution>
    4154:	48 c7 05 29 30 10 00 	movq   $0x1,0x103029(%rip)        # 107188 <ackermann3<unsigned int>(unsigned int, unsigned int)::solution+0x8>
    415b:	01 00 00 00 
    415f:	48 c7 05 26 30 10 00 	movq   $0x0,0x103026(%rip)        # 107190 <ackermann3<unsigned int>(unsigned int, unsigned int)::solution+0x10>
    4166:	00 00 00 00 
    416a:	48 c7 05 23 30 10 00 	movq   $0x0,0x103023(%rip)        # 107198 <ackermann3<unsigned int>(unsigned int, unsigned int)::solution+0x18>
    4171:	00 00 00 00 
    4175:	c7 05 21 30 10 00 00 	movl   $0x3f800000,0x103021(%rip)        # 1071a0 <ackermann3<unsigned int>(unsigned int, unsigned int)::solution+0x20>
    417c:	00 80 3f 
    417f:	48 c7 05 1e 30 10 00 	movq   $0x0,0x10301e(%rip)        # 1071a8 <ackermann3<unsigned int>(unsigned int, unsigned int)::solution+0x28>
    4186:	00 00 00 00 
    418a:	48 c7 05 1b 30 10 00 	movq   $0x0,0x10301b(%rip)        # 1071b0 <ackermann3<unsigned int>(unsigned int, unsigned int)::solution+0x30>
    4191:	00 00 00 00 
    4195:	e8 36 e1 ff ff       	callq  22d0 <__cxa_atexit@plt>
    419a:	48 8d 3d bf 2f 10 00 	lea    0x102fbf(%rip),%rdi        # 107160 <guard variable for ackermann3<unsigned int>(unsigned int, unsigned int)::solution>
    41a1:	e8 ca e0 ff ff       	callq  2270 <__cxa_guard_release@plt>
    41a6:	e9 28 fe ff ff       	jmpq   3fd3 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)+0x23>
    41ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    41b0:	8d 73 ff             	lea    -0x1(%rbx),%esi
    41b3:	e8 f8 fd ff ff       	callq  3fb0 <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)>
    41b8:	89 c6                	mov    %eax,%esi
    41ba:	8b 44 24 0c          	mov    0xc(%rsp),%eax
    41be:	8d 78 ff             	lea    -0x1(%rax),%edi
    41c1:	e9 d5 fe ff ff       	jmpq   409b <unsigned int ackermann3<unsigned int>(unsigned int, unsigned int)+0xeb>
    41c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    41cd:	00 00 00 

00000000000041d0 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)>:
    41d0:	f3 0f 1e fa          	endbr64 
    41d4:	41 54                	push   %r12
    41d6:	55                   	push   %rbp
    41d7:	53                   	push   %rbx
    41d8:	48 83 ec 20          	sub    $0x20,%rsp
    41dc:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
    41e0:	89 74 24 08          	mov    %esi,0x8(%rsp)
    41e4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    41eb:	00 00 
    41ed:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    41f2:	31 c0                	xor    %eax,%eax
    41f4:	0f b6 05 bd 2f 10 00 	movzbl 0x102fbd(%rip),%eax        # 1071b8 <guard variable for ackermann2<unsigned int>(unsigned int, unsigned int)::solution>
    41fb:	84 c0                	test   %al,%al
    41fd:	0f 84 d5 00 00 00    	je     42d8 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x108>
    4203:	8b 44 24 0c          	mov    0xc(%rsp),%eax
    4207:	48 8b 35 ba 2f 10 00 	mov    0x102fba(%rip),%rsi        # 1071c8 <ackermann2<unsigned int>(unsigned int, unsigned int)::solution+0x8>
    420e:	31 d2                	xor    %edx,%edx
    4210:	49 89 c0             	mov    %rax,%r8
    4213:	48 f7 f6             	div    %rsi
    4216:	48 8b 05 a3 2f 10 00 	mov    0x102fa3(%rip),%rax        # 1071c0 <ackermann2<unsigned int>(unsigned int, unsigned int)::solution>
    421d:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
    4221:	49 89 d1             	mov    %rdx,%r9
    4224:	48 85 c0             	test   %rax,%rax
    4227:	0f 84 36 01 00 00    	je     4363 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x193>
    422d:	48 8b 08             	mov    (%rax),%rcx
    4230:	8b 79 08             	mov    0x8(%rcx),%edi
    4233:	eb 23                	jmp    4258 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x88>
    4235:	0f 1f 00             	nopl   (%rax)
    4238:	48 8b 09             	mov    (%rcx),%rcx
    423b:	48 85 c9             	test   %rcx,%rcx
    423e:	0f 84 1f 01 00 00    	je     4363 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x193>
    4244:	8b 41 08             	mov    0x8(%rcx),%eax
    4247:	31 d2                	xor    %edx,%edx
    4249:	48 89 c7             	mov    %rax,%rdi
    424c:	48 f7 f6             	div    %rsi
    424f:	49 39 d1             	cmp    %rdx,%r9
    4252:	0f 85 0b 01 00 00    	jne    4363 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x193>
    4258:	41 39 f8             	cmp    %edi,%r8d
    425b:	75 db                	jne    4238 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x68>
    425d:	8b 44 24 08          	mov    0x8(%rsp),%eax
    4261:	48 8b 71 18          	mov    0x18(%rcx),%rsi
    4265:	31 d2                	xor    %edx,%edx
    4267:	49 89 c1             	mov    %rax,%r9
    426a:	48 f7 f6             	div    %rsi
    426d:	48 8b 41 10          	mov    0x10(%rcx),%rax
    4271:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
    4275:	49 89 d0             	mov    %rdx,%r8
    4278:	48 85 c0             	test   %rax,%rax
    427b:	0f 84 f3 00 00 00    	je     4374 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x1a4>
    4281:	48 8b 08             	mov    (%rax),%rcx
    4284:	8b 79 08             	mov    0x8(%rcx),%edi
    4287:	eb 27                	jmp    42b0 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0xe0>
    4289:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    4290:	48 8b 09             	mov    (%rcx),%rcx
    4293:	48 85 c9             	test   %rcx,%rcx
    4296:	0f 84 d8 00 00 00    	je     4374 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x1a4>
    429c:	8b 41 08             	mov    0x8(%rcx),%eax
    429f:	31 d2                	xor    %edx,%edx
    42a1:	48 89 c7             	mov    %rax,%rdi
    42a4:	48 f7 f6             	div    %rsi
    42a7:	49 39 d0             	cmp    %rdx,%r8
    42aa:	0f 85 c4 00 00 00    	jne    4374 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x1a4>
    42b0:	41 39 f9             	cmp    %edi,%r9d
    42b3:	75 db                	jne    4290 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0xc0>
    42b5:	8b 41 0c             	mov    0xc(%rcx),%eax
    42b8:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
    42bd:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
    42c4:	00 00 
    42c6:	0f 85 a3 00 00 00    	jne    436f <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x19f>
    42cc:	48 83 c4 20          	add    $0x20,%rsp
    42d0:	5b                   	pop    %rbx
    42d1:	5d                   	pop    %rbp
    42d2:	41 5c                	pop    %r12
    42d4:	c3                   	retq   
    42d5:	0f 1f 00             	nopl   (%rax)
    42d8:	48 8d 3d d9 2e 10 00 	lea    0x102ed9(%rip),%rdi        # 1071b8 <guard variable for ackermann2<unsigned int>(unsigned int, unsigned int)::solution>
    42df:	e8 ec e0 ff ff       	callq  23d0 <__cxa_guard_acquire@plt>
    42e4:	85 c0                	test   %eax,%eax
    42e6:	0f 84 17 ff ff ff    	je     4203 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x33>
    42ec:	48 8d 05 fd 2e 10 00 	lea    0x102efd(%rip),%rax        # 1071f0 <ackermann2<unsigned int>(unsigned int, unsigned int)::solution+0x30>
    42f3:	48 8d 15 0e 2d 00 00 	lea    0x2d0e(%rip),%rdx        # 7008 <__dso_handle>
    42fa:	48 8d 70 d0          	lea    -0x30(%rax),%rsi
    42fe:	48 8d 3d ab e3 ff ff 	lea    -0x1c55(%rip),%rdi        # 26b0 <std::unordered_map<unsigned int, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > > >::~unordered_map()>
    4305:	48 89 05 b4 2e 10 00 	mov    %rax,0x102eb4(%rip)        # 1071c0 <ackermann2<unsigned int>(unsigned int, unsigned int)::solution>
    430c:	48 c7 05 b1 2e 10 00 	movq   $0x1,0x102eb1(%rip)        # 1071c8 <ackermann2<unsigned int>(unsigned int, unsigned int)::solution+0x8>
    4313:	01 00 00 00 
    4317:	48 c7 05 ae 2e 10 00 	movq   $0x0,0x102eae(%rip)        # 1071d0 <ackermann2<unsigned int>(unsigned int, unsigned int)::solution+0x10>
    431e:	00 00 00 00 
    4322:	48 c7 05 ab 2e 10 00 	movq   $0x0,0x102eab(%rip)        # 1071d8 <ackermann2<unsigned int>(unsigned int, unsigned int)::solution+0x18>
    4329:	00 00 00 00 
    432d:	c7 05 a9 2e 10 00 00 	movl   $0x3f800000,0x102ea9(%rip)        # 1071e0 <ackermann2<unsigned int>(unsigned int, unsigned int)::solution+0x20>
    4334:	00 80 3f 
    4337:	48 c7 05 a6 2e 10 00 	movq   $0x0,0x102ea6(%rip)        # 1071e8 <ackermann2<unsigned int>(unsigned int, unsigned int)::solution+0x28>
    433e:	00 00 00 00 
    4342:	48 c7 05 a3 2e 10 00 	movq   $0x0,0x102ea3(%rip)        # 1071f0 <ackermann2<unsigned int>(unsigned int, unsigned int)::solution+0x30>
    4349:	00 00 00 00 
    434d:	e8 7e df ff ff       	callq  22d0 <__cxa_atexit@plt>
    4352:	48 8d 3d 5f 2e 10 00 	lea    0x102e5f(%rip),%rdi        # 1071b8 <guard variable for ackermann2<unsigned int>(unsigned int, unsigned int)::solution>
    4359:	e8 12 df ff ff       	callq  2270 <__cxa_guard_release@plt>
    435e:	e9 a0 fe ff ff       	jmpq   4203 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x33>
    4363:	48 8d 3d 6a 0d 00 00 	lea    0xd6a(%rip),%rdi        # 50d4 <_IO_stdin_used+0xd4>
    436a:	e8 f1 df ff ff       	callq  2360 <std::__throw_out_of_range(char const*)@plt>
    436f:	e8 8c df ff ff       	callq  2300 <__stack_chk_fail@plt>
    4374:	48 8d 3d 59 0d 00 00 	lea    0xd59(%rip),%rdi        # 50d4 <_IO_stdin_used+0xd4>
    437b:	e8 e0 df ff ff       	callq  2360 <std::__throw_out_of_range(char const*)@plt>
    4380:	f3 0f 1e fa          	endbr64 
    4384:	48 89 c7             	mov    %rax,%rdi
    4387:	48 89 d0             	mov    %rdx,%rax
    438a:	48 ff c8             	dec    %rax
    438d:	75 6d                	jne    43fc <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x22c>
    438f:	c5 f8 77             	vzeroupper 
    4392:	e8 a9 de ff ff       	callq  2240 <__cxa_begin_catch@plt>
    4397:	8b 7c 24 0c          	mov    0xc(%rsp),%edi
    439b:	8b 44 24 08          	mov    0x8(%rsp),%eax
    439f:	85 ff                	test   %edi,%edi
    43a1:	75 61                	jne    4404 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x234>
    43a3:	48 8d 74 24 14       	lea    0x14(%rsp),%rsi
    43a8:	48 8d 3d 11 2e 10 00 	lea    0x102e11(%rip),%rdi        # 1071c0 <ackermann2<unsigned int>(unsigned int, unsigned int)::solution>
    43af:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%rsp)
    43b6:	00 
    43b7:	8d 58 01             	lea    0x1(%rax),%ebx
    43ba:	e8 e1 f7 ff ff       	callq  3ba0 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int&&)>
    43bf:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
    43c4:	48 89 c7             	mov    %rax,%rdi
    43c7:	48 89 ee             	mov    %rbp,%rsi
    43ca:	e8 21 fb ff ff       	callq  3ef0 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)>
    43cf:	89 18                	mov    %ebx,(%rax)
    43d1:	4c 8d 64 24 0c       	lea    0xc(%rsp),%r12
    43d6:	e8 d5 df ff ff       	callq  23b0 <__cxa_end_catch@plt>
    43db:	4c 89 e6             	mov    %r12,%rsi
    43de:	48 8d 3d db 2d 10 00 	lea    0x102ddb(%rip),%rdi        # 1071c0 <ackermann2<unsigned int>(unsigned int, unsigned int)::solution>
    43e5:	e8 c6 f6 ff ff       	callq  3ab0 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)>
    43ea:	48 89 c7             	mov    %rax,%rdi
    43ed:	48 89 ee             	mov    %rbp,%rsi
    43f0:	e8 fb fa ff ff       	callq  3ef0 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)>
    43f5:	8b 00                	mov    (%rax),%eax
    43f7:	e9 bc fe ff ff       	jmpq   42b8 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0xe8>
    43fc:	c5 f8 77             	vzeroupper 
    43ff:	e8 bc df ff ff       	callq  23c0 <_Unwind_Resume@plt>
    4404:	85 c0                	test   %eax,%eax
    4406:	74 40                	je     4448 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x278>
    4408:	8d 70 ff             	lea    -0x1(%rax),%esi
    440b:	e8 c0 fd ff ff       	callq  41d0 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)>
    4410:	89 c6                	mov    %eax,%esi
    4412:	8b 44 24 0c          	mov    0xc(%rsp),%eax
    4416:	8d 78 ff             	lea    -0x1(%rax),%edi
    4419:	e8 b2 fd ff ff       	callq  41d0 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)>
    441e:	4c 8d 64 24 0c       	lea    0xc(%rsp),%r12
    4423:	4c 89 e6             	mov    %r12,%rsi
    4426:	48 8d 3d 93 2d 10 00 	lea    0x102d93(%rip),%rdi        # 1071c0 <ackermann2<unsigned int>(unsigned int, unsigned int)::solution>
    442d:	89 c3                	mov    %eax,%ebx
    442f:	e8 7c f6 ff ff       	callq  3ab0 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)>
    4434:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
    4439:	48 89 c7             	mov    %rax,%rdi
    443c:	48 89 ee             	mov    %rbp,%rsi
    443f:	e8 ac fa ff ff       	callq  3ef0 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)>
    4444:	89 18                	mov    %ebx,(%rax)
    4446:	eb 8e                	jmp    43d6 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x206>
    4448:	ff cf                	dec    %edi
    444a:	be 01 00 00 00       	mov    $0x1,%esi
    444f:	e8 7c fd ff ff       	callq  41d0 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)>
    4454:	4c 8d 64 24 0c       	lea    0xc(%rsp),%r12
    4459:	4c 89 e6             	mov    %r12,%rsi
    445c:	48 8d 3d 5d 2d 10 00 	lea    0x102d5d(%rip),%rdi        # 1071c0 <ackermann2<unsigned int>(unsigned int, unsigned int)::solution>
    4463:	89 c3                	mov    %eax,%ebx
    4465:	e8 46 f6 ff ff       	callq  3ab0 <std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > >, std::allocator<std::pair<unsigned int const, std::unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > > > >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)>
    446a:	48 8b 78 08          	mov    0x8(%rax),%rdi
    446e:	48 89 c5             	mov    %rax,%rbp
    4471:	48 8b 00             	mov    (%rax),%rax
    4474:	48 8b 08             	mov    (%rax),%rcx
    4477:	48 85 c9             	test   %rcx,%rcx
    447a:	75 47                	jne    44c3 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x2f3>
    447c:	bf 10 00 00 00       	mov    $0x10,%edi
    4481:	e8 6a de ff ff       	callq  22f0 <operator new(unsigned long)@plt>
    4486:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    448d:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    4494:	00 
    4495:	48 89 c1             	mov    %rax,%rcx
    4498:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    449e:	31 d2                	xor    %edx,%edx
    44a0:	31 f6                	xor    %esi,%esi
    44a2:	48 89 ef             	mov    %rbp,%rdi
    44a5:	e8 36 f9 ff ff       	callq  3de0 <std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, unsigned int>, false>*, unsigned long)>
    44aa:	48 83 c0 0c          	add    $0xc,%rax
    44ae:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
    44b3:	89 18                	mov    %ebx,(%rax)
    44b5:	e9 1c ff ff ff       	jmpq   43d6 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x206>
    44ba:	f3 0f 1e fa          	endbr64 
    44be:	48 89 c5             	mov    %rax,%rbp
    44c1:	eb 13                	jmp    44d6 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x306>
    44c3:	48 8b 01             	mov    (%rcx),%rax
    44c6:	83 78 08 00          	cmpl   $0x0,0x8(%rax)
    44ca:	75 1a                	jne    44e6 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x316>
    44cc:	48 8b 01             	mov    (%rcx),%rax
    44cf:	48 85 c0             	test   %rax,%rax
    44d2:	74 a8                	je     447c <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x2ac>
    44d4:	eb d4                	jmp    44aa <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x2da>
    44d6:	c5 f8 77             	vzeroupper 
    44d9:	e8 d2 de ff ff       	callq  23b0 <__cxa_end_catch@plt>
    44de:	48 89 ef             	mov    %rbp,%rdi
    44e1:	e8 da de ff ff       	callq  23c0 <_Unwind_Resume@plt>
    44e6:	48 8b 30             	mov    (%rax),%rsi
    44e9:	48 85 f6             	test   %rsi,%rsi
    44ec:	74 8e                	je     447c <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x2ac>
    44ee:	48 89 c1             	mov    %rax,%rcx
    44f1:	8b 46 08             	mov    0x8(%rsi),%eax
    44f4:	31 d2                	xor    %edx,%edx
    44f6:	48 f7 f7             	div    %rdi
    44f9:	48 85 d2             	test   %rdx,%rdx
    44fc:	0f 85 7a ff ff ff    	jne    447c <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x2ac>
    4502:	48 89 f0             	mov    %rsi,%rax
    4505:	eb bf                	jmp    44c6 <unsigned int ackermann2<unsigned int>(unsigned int, unsigned int)+0x2f6>
    4507:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    450e:	00 00 

0000000000004510 <__libc_csu_init>:
    4510:	f3 0f 1e fa          	endbr64 
    4514:	41 57                	push   %r15
    4516:	4c 8d 3d 6b 27 00 00 	lea    0x276b(%rip),%r15        # 6c88 <__frame_dummy_init_array_entry>
    451d:	41 56                	push   %r14
    451f:	49 89 d6             	mov    %rdx,%r14
    4522:	41 55                	push   %r13
    4524:	49 89 f5             	mov    %rsi,%r13
    4527:	41 54                	push   %r12
    4529:	41 89 fc             	mov    %edi,%r12d
    452c:	55                   	push   %rbp
    452d:	48 8d 2d 64 27 00 00 	lea    0x2764(%rip),%rbp        # 6c98 <__do_global_dtors_aux_fini_array_entry>
    4534:	53                   	push   %rbx
    4535:	4c 29 fd             	sub    %r15,%rbp
    4538:	48 83 ec 08          	sub    $0x8,%rsp
    453c:	e8 bf da ff ff       	callq  2000 <_init>
    4541:	48 c1 fd 03          	sar    $0x3,%rbp
    4545:	74 1f                	je     4566 <__libc_csu_init+0x56>
    4547:	31 db                	xor    %ebx,%ebx
    4549:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    4550:	4c 89 f2             	mov    %r14,%rdx
    4553:	4c 89 ee             	mov    %r13,%rsi
    4556:	44 89 e7             	mov    %r12d,%edi
    4559:	41 ff 14 df          	callq  *(%r15,%rbx,8)
    455d:	48 83 c3 01          	add    $0x1,%rbx
    4561:	48 39 dd             	cmp    %rbx,%rbp
    4564:	75 ea                	jne    4550 <__libc_csu_init+0x40>
    4566:	48 83 c4 08          	add    $0x8,%rsp
    456a:	5b                   	pop    %rbx
    456b:	5d                   	pop    %rbp
    456c:	41 5c                	pop    %r12
    456e:	41 5d                	pop    %r13
    4570:	41 5e                	pop    %r14
    4572:	41 5f                	pop    %r15
    4574:	c3                   	retq   
    4575:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    457c:	00 00 00 00 

0000000000004580 <__libc_csu_fini>:
    4580:	f3 0f 1e fa          	endbr64 
    4584:	c3                   	retq   

Desensamblado de la secci贸n .fini:

0000000000004588 <_fini>:
    4588:	f3 0f 1e fa          	endbr64 
    458c:	48 83 ec 08          	sub    $0x8,%rsp
    4590:	48 83 c4 08          	add    $0x8,%rsp
    4594:	c3                   	retq   
